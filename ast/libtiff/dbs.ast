SOURCE_FILE	106:4	1265:0	0	
SIMPLE_DECL	106:4	106:70	1	XTiffErrorHandler PP ; PP PP ( ( Display * display , XErrorEvent * error_event ) ) ;
VAR_DECL	106:4	106:22	2	XTiffErrorHandler PP ; PP PP ( ( Display * display , XErrorEvent * error_event ) )
TYPE	106:4	106:4	3	XTiffErrorHandler
TYPE_NAME	106:4	106:4	4	XTiffErrorHandler
LEAF_NODE	106:4	106:4	5	XTiffErrorHandler
NAME	106:22	106:22	3	PP
LEAF_NODE	106:22	106:22	4	PP
LEAF_NODE	0:0	0:0	3	;
INIT	106:22	106:22	3	PP PP ( ( Display * display , XErrorEvent * error_event ) )
ASSIGN	106:22	106:24	4	PP PP ( ( Display * display , XErrorEvent * error_event ) )
LVAL	106:22	106:22	5	PP
NAME	106:22	106:22	6	PP
LEAF_NODE	106:22	106:22	7	PP
ASSIGN_OP	106:22	106:22	5	PP
NAME	106:22	106:22	6	PP
LEAF_NODE	106:22	106:22	7	PP
RVAL	106:24	106:69	5	( ( Display * display , XErrorEvent * error_event ) )
LEAF_NODE	106:24	106:24	6	(
EXPR	106:25	106:68	6	( Display * display , XErrorEvent * error_event )
LEAF_NODE	106:25	106:25	7	(
FIELD	106:26	106:26	7	Display
LEAF_NODE	106:26	106:26	8	Display
LEAF_NODE	106:34	106:34	7	*
FIELD	106:35	106:35	7	display
LEAF_NODE	106:35	106:35	8	display
LEAF_NODE	106:42	106:42	7	,
FIELD	106:44	106:44	7	XErrorEvent
LEAF_NODE	106:44	106:44	8	XErrorEvent
LEAF_NODE	106:56	106:56	7	*
FIELD	106:57	106:57	7	error_event
LEAF_NODE	106:57	106:57	8	error_event
LEAF_NODE	106:68	106:68	7	)
LEAF_NODE	106:69	106:69	6	)
LEAF_NODE	106:70	106:70	2	;
SIMPLE_DECL	109:0	109:38	1	int xtVersion ; xtVersion = XtSpecificationRelease ;
VAR_DECL	109:0	109:4	2	int xtVersion ; xtVersion = XtSpecificationRelease
TYPE	109:0	109:0	3	int
TYPE_NAME	109:0	109:0	4	int
LEAF_NODE	109:0	109:0	5	int
NAME	109:4	109:4	3	xtVersion
LEAF_NODE	109:4	109:4	4	xtVersion
LEAF_NODE	0:0	0:0	3	;
INIT	109:4	109:4	3	xtVersion = XtSpecificationRelease
ASSIGN	109:4	109:16	4	xtVersion = XtSpecificationRelease
LVAL	109:4	109:4	5	xtVersion
NAME	109:4	109:4	6	xtVersion
LEAF_NODE	109:4	109:4	7	xtVersion
ASSIGN_OP	109:14	109:14	5	=
LEAF_NODE	109:14	109:14	6	=
RVAL	109:16	109:16	5	XtSpecificationRelease
FIELD	109:16	109:16	6	XtSpecificationRelease
LEAF_NODE	109:16	109:16	7	XtSpecificationRelease
LEAF_NODE	109:38	109:38	2	;
SIMPLE_DECL	114:0	114:68	1	Widget shellWidget , Widget formWidget , Widget listWidget , Widget labelWidget , Widget imageWidget ;
INIT_DECL_LIST	114:0	114:0	2	Widget shellWidget , Widget formWidget , Widget listWidget , Widget labelWidget , Widget imageWidget
VAR_DECL	114:0	114:7	3	Widget shellWidget
TYPE	114:0	114:0	4	Widget
TYPE_NAME	114:0	114:0	5	Widget
LEAF_NODE	114:0	114:0	6	Widget
NAME	114:7	114:7	4	shellWidget
LEAF_NODE	114:7	114:7	5	shellWidget
LEAF_NODE	114:18	114:18	3	,
INIT_DECL_LIST	114:0	114:0	3	Widget formWidget , Widget listWidget , Widget labelWidget , Widget imageWidget
VAR_DECL	114:0	114:20	4	Widget formWidget
TYPE	114:0	114:0	5	Widget
TYPE_NAME	114:0	114:0	6	Widget
LEAF_NODE	114:0	114:0	7	Widget
NAME	114:20	114:20	5	formWidget
LEAF_NODE	114:20	114:20	6	formWidget
LEAF_NODE	114:30	114:30	4	,
INIT_DECL_LIST	114:0	114:0	4	Widget listWidget , Widget labelWidget , Widget imageWidget
VAR_DECL	114:0	114:32	5	Widget listWidget
TYPE	114:0	114:0	6	Widget
TYPE_NAME	114:0	114:0	7	Widget
LEAF_NODE	114:0	114:0	8	Widget
NAME	114:32	114:32	6	listWidget
LEAF_NODE	114:32	114:32	7	listWidget
LEAF_NODE	114:42	114:42	5	,
INIT_DECL_LIST	114:0	114:0	5	Widget labelWidget , Widget imageWidget
VAR_DECL	114:0	114:44	6	Widget labelWidget
TYPE	114:0	114:0	7	Widget
TYPE_NAME	114:0	114:0	8	Widget
LEAF_NODE	114:0	114:0	9	Widget
NAME	114:44	114:44	7	labelWidget
LEAF_NODE	114:44	114:44	8	labelWidget
LEAF_NODE	114:55	114:55	6	,
VAR_DECL	114:0	114:57	6	Widget imageWidget
TYPE	114:0	114:0	7	Widget
TYPE_NAME	114:0	114:0	8	Widget
LEAF_NODE	114:0	114:0	9	Widget
NAME	114:57	114:57	7	imageWidget
LEAF_NODE	114:57	114:57	8	imageWidget
LEAF_NODE	114:68	114:68	2	;
SIMPLE_DECL	116:0	116:67	1	enum CLASS_NAME BASE_CLASSES { ButtonQuit = 0 , ButtonPreviousPage = 1 , ButtonNextPage = 2 } ;
CLASS_DEF	116:0	116:0	2	enum CLASS_NAME BASE_CLASSES { ButtonQuit = 0 , ButtonPreviousPage = 1 , ButtonNextPage = 2 }
CLASS_DEF	116:0	116:66	3	enum CLASS_NAME BASE_CLASSES { ButtonQuit = 0 , ButtonPreviousPage = 1 , ButtonNextPage = 2 }
LEAF_NODE	116:0	116:0	4	enum
LEAF_NODE	0:0	0:0	4	CLASS_NAME
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	116:5	116:5	4	{
CLASS_CONTENT	116:7	116:64	4	ButtonQuit = 0 , ButtonPreviousPage = 1 , ButtonNextPage = 2
LEAF_NODE	116:7	116:7	5	ButtonQuit
LEAF_NODE	116:18	116:18	5	=
LEAF_NODE	116:20	116:20	5	0
LEAF_NODE	116:21	116:21	5	,
LEAF_NODE	116:23	116:23	5	ButtonPreviousPage
LEAF_NODE	116:42	116:42	5	=
LEAF_NODE	116:44	116:44	5	1
LEAF_NODE	116:45	116:45	5	,
LEAF_NODE	116:47	116:47	5	ButtonNextPage
LEAF_NODE	116:62	116:62	5	=
LEAF_NODE	116:64	116:64	5	2
LEAF_NODE	116:66	116:66	4	}
LEAF_NODE	116:67	116:67	2	;
SIMPLE_DECL	130:8	138:22	1	struct CLASS_NAME BASE_CLASSES { Boolean help ; float gamma ; Boolean usePixmap ; uint32 viewportWidth ; uint32 viewportHeight ; int translate ; Boolean verbose ; } AppData , struct CLASS_NAME BASE_CLASSES { Boolean help ; float gamma ; Boolean usePixmap ; uint32 viewportWidth ; uint32 viewportHeight ; int translate ; Boolean verbose ; } * AppDataPtr ;
INIT_DECL_LIST	130:8	130:8	2	struct CLASS_NAME BASE_CLASSES { Boolean help ; float gamma ; Boolean usePixmap ; uint32 viewportWidth ; uint32 viewportHeight ; int translate ; Boolean verbose ; } AppData , struct CLASS_NAME BASE_CLASSES { Boolean help ; float gamma ; Boolean usePixmap ; uint32 viewportWidth ; uint32 viewportHeight ; int translate ; Boolean verbose ; } * AppDataPtr
VAR_DECL	130:8	138:2	3	struct CLASS_NAME BASE_CLASSES { Boolean help ; float gamma ; Boolean usePixmap ; uint32 viewportWidth ; uint32 viewportHeight ; int translate ; Boolean verbose ; } AppData
TYPE	130:8	130:8	4	struct CLASS_NAME BASE_CLASSES { Boolean help ; float gamma ; Boolean usePixmap ; uint32 viewportWidth ; uint32 viewportHeight ; int translate ; Boolean verbose ; }
CLASS_DEF	130:8	138:0	5	struct CLASS_NAME BASE_CLASSES { Boolean help ; float gamma ; Boolean usePixmap ; uint32 viewportWidth ; uint32 viewportHeight ; int translate ; Boolean verbose ; }
LEAF_NODE	130:8	130:8	6	struct
LEAF_NODE	0:0	0:0	6	CLASS_NAME
LEAF_NODE	0:0	0:0	6	BASE_CLASSES
LEAF_NODE	130:15	130:15	6	{
CLASS_CONTENT	131:4	137:4	6	Boolean help ; float gamma ; Boolean usePixmap ; uint32 viewportWidth ; uint32 viewportHeight ; int translate ; Boolean verbose ;
SIMPLE_DECL	131:4	131:16	7	Boolean help ;
VAR_DECL	131:4	131:12	8	Boolean help
TYPE	131:4	131:4	9	Boolean
TYPE_NAME	131:4	131:4	10	Boolean
LEAF_NODE	131:4	131:4	11	Boolean
NAME	131:12	131:12	9	help
LEAF_NODE	131:12	131:12	10	help
LEAF_NODE	131:16	131:16	8	;
SIMPLE_DECL	132:4	132:15	7	float gamma ;
VAR_DECL	132:4	132:10	8	float gamma
TYPE	132:4	132:4	9	float
TYPE_NAME	132:4	132:4	10	float
LEAF_NODE	132:4	132:4	11	float
NAME	132:10	132:10	9	gamma
LEAF_NODE	132:10	132:10	10	gamma
LEAF_NODE	132:15	132:15	8	;
SIMPLE_DECL	133:4	133:21	7	Boolean usePixmap ;
VAR_DECL	133:4	133:12	8	Boolean usePixmap
TYPE	133:4	133:4	9	Boolean
TYPE_NAME	133:4	133:4	10	Boolean
LEAF_NODE	133:4	133:4	11	Boolean
NAME	133:12	133:12	9	usePixmap
LEAF_NODE	133:12	133:12	10	usePixmap
LEAF_NODE	133:21	133:21	8	;
SIMPLE_DECL	134:4	134:24	7	uint32 viewportWidth ;
VAR_DECL	134:4	134:11	8	uint32 viewportWidth
TYPE	134:4	134:4	9	uint32
TYPE_NAME	134:4	134:4	10	uint32
LEAF_NODE	134:4	134:4	11	uint32
NAME	134:11	134:11	9	viewportWidth
LEAF_NODE	134:11	134:11	10	viewportWidth
LEAF_NODE	134:24	134:24	8	;
SIMPLE_DECL	135:4	135:25	7	uint32 viewportHeight ;
VAR_DECL	135:4	135:11	8	uint32 viewportHeight
TYPE	135:4	135:4	9	uint32
TYPE_NAME	135:4	135:4	10	uint32
LEAF_NODE	135:4	135:4	11	uint32
NAME	135:11	135:11	9	viewportHeight
LEAF_NODE	135:11	135:11	10	viewportHeight
LEAF_NODE	135:25	135:25	8	;
SIMPLE_DECL	136:4	136:17	7	int translate ;
VAR_DECL	136:4	136:8	8	int translate
TYPE	136:4	136:4	9	int
TYPE_NAME	136:4	136:4	10	int
LEAF_NODE	136:4	136:4	11	int
NAME	136:8	136:8	9	translate
LEAF_NODE	136:8	136:8	10	translate
LEAF_NODE	136:17	136:17	8	;
SIMPLE_DECL	137:4	137:19	7	Boolean verbose ;
VAR_DECL	137:4	137:12	8	Boolean verbose
TYPE	137:4	137:4	9	Boolean
TYPE_NAME	137:4	137:4	10	Boolean
LEAF_NODE	137:4	137:4	11	Boolean
NAME	137:12	137:12	9	verbose
LEAF_NODE	137:12	137:12	10	verbose
LEAF_NODE	137:19	137:19	8	;
LEAF_NODE	138:0	138:0	6	}
NAME	138:2	138:2	4	AppData
LEAF_NODE	138:2	138:2	5	AppData
LEAF_NODE	138:9	138:9	3	,
VAR_DECL	130:8	138:12	3	struct CLASS_NAME BASE_CLASSES { Boolean help ; float gamma ; Boolean usePixmap ; uint32 viewportWidth ; uint32 viewportHeight ; int translate ; Boolean verbose ; } * AppDataPtr
TYPE	130:8	138:11	4	struct CLASS_NAME BASE_CLASSES { Boolean help ; float gamma ; Boolean usePixmap ; uint32 viewportWidth ; uint32 viewportHeight ; int translate ; Boolean verbose ; } *
CLASS_DEF	130:8	138:0	5	struct CLASS_NAME BASE_CLASSES { Boolean help ; float gamma ; Boolean usePixmap ; uint32 viewportWidth ; uint32 viewportHeight ; int translate ; Boolean verbose ; }
LEAF_NODE	130:8	130:8	6	struct
LEAF_NODE	0:0	0:0	6	CLASS_NAME
LEAF_NODE	0:0	0:0	6	BASE_CLASSES
LEAF_NODE	130:15	130:15	6	{
CLASS_CONTENT	131:4	137:4	6	Boolean help ; float gamma ; Boolean usePixmap ; uint32 viewportWidth ; uint32 viewportHeight ; int translate ; Boolean verbose ;
SIMPLE_DECL	131:4	131:16	7	Boolean help ;
VAR_DECL	131:4	131:12	8	Boolean help
TYPE	131:4	131:4	9	Boolean
TYPE_NAME	131:4	131:4	10	Boolean
LEAF_NODE	131:4	131:4	11	Boolean
NAME	131:12	131:12	9	help
LEAF_NODE	131:12	131:12	10	help
LEAF_NODE	131:16	131:16	8	;
SIMPLE_DECL	132:4	132:15	7	float gamma ;
VAR_DECL	132:4	132:10	8	float gamma
TYPE	132:4	132:4	9	float
TYPE_NAME	132:4	132:4	10	float
LEAF_NODE	132:4	132:4	11	float
NAME	132:10	132:10	9	gamma
LEAF_NODE	132:10	132:10	10	gamma
LEAF_NODE	132:15	132:15	8	;
SIMPLE_DECL	133:4	133:21	7	Boolean usePixmap ;
VAR_DECL	133:4	133:12	8	Boolean usePixmap
TYPE	133:4	133:4	9	Boolean
TYPE_NAME	133:4	133:4	10	Boolean
LEAF_NODE	133:4	133:4	11	Boolean
NAME	133:12	133:12	9	usePixmap
LEAF_NODE	133:12	133:12	10	usePixmap
LEAF_NODE	133:21	133:21	8	;
SIMPLE_DECL	134:4	134:24	7	uint32 viewportWidth ;
VAR_DECL	134:4	134:11	8	uint32 viewportWidth
TYPE	134:4	134:4	9	uint32
TYPE_NAME	134:4	134:4	10	uint32
LEAF_NODE	134:4	134:4	11	uint32
NAME	134:11	134:11	9	viewportWidth
LEAF_NODE	134:11	134:11	10	viewportWidth
LEAF_NODE	134:24	134:24	8	;
SIMPLE_DECL	135:4	135:25	7	uint32 viewportHeight ;
VAR_DECL	135:4	135:11	8	uint32 viewportHeight
TYPE	135:4	135:4	9	uint32
TYPE_NAME	135:4	135:4	10	uint32
LEAF_NODE	135:4	135:4	11	uint32
NAME	135:11	135:11	9	viewportHeight
LEAF_NODE	135:11	135:11	10	viewportHeight
LEAF_NODE	135:25	135:25	8	;
SIMPLE_DECL	136:4	136:17	7	int translate ;
VAR_DECL	136:4	136:8	8	int translate
TYPE	136:4	136:4	9	int
TYPE_NAME	136:4	136:4	10	int
LEAF_NODE	136:4	136:4	11	int
NAME	136:8	136:8	9	translate
LEAF_NODE	136:8	136:8	10	translate
LEAF_NODE	136:17	136:17	8	;
SIMPLE_DECL	137:4	137:19	7	Boolean verbose ;
VAR_DECL	137:4	137:12	8	Boolean verbose
TYPE	137:4	137:4	9	Boolean
TYPE_NAME	137:4	137:4	10	Boolean
LEAF_NODE	137:4	137:4	11	Boolean
NAME	137:12	137:12	9	verbose
LEAF_NODE	137:12	137:12	10	verbose
LEAF_NODE	137:19	137:19	8	;
LEAF_NODE	138:0	138:0	6	}
POINTER	138:11	138:11	5	*
LEAF_NODE	138:11	138:11	6	*
NAME	138:12	138:12	4	AppDataPtr
LEAF_NODE	138:12	138:12	5	AppDataPtr
LEAF_NODE	138:22	138:22	2	;
SIMPLE_DECL	140:0	140:15	1	AppData appData ;
VAR_DECL	140:0	140:8	2	AppData appData
TYPE	140:0	140:0	3	AppData
TYPE_NAME	140:0	140:0	4	AppData
LEAF_NODE	140:0	140:0	5	AppData
NAME	140:8	140:8	3	appData
LEAF_NODE	140:8	140:8	4	appData
LEAF_NODE	140:15	140:15	2	;
SIMPLE_DECL	213:0	220:56	1	char [ ] translationsTable ; translationsTable = "<Key>q:      quit() \n \\n                            <Key>Q:      quit() \n \\n                            <Message>WM_PROTOCOLS: quit()\n \\n                            <Key>p:      previous() \n \\n                            <Key>P:      previous() \n \\n                            <Key>n:      next() \n \\n                            <Key>N:      next() \n \\n                            <Configure>: notifyresize()" ;
VAR_DECL	213:0	213:5	2	char [ ] translationsTable ; translationsTable = "<Key>q:      quit() \n \\n                            <Key>Q:      quit() \n \\n                            <Message>WM_PROTOCOLS: quit()\n \\n                            <Key>p:      previous() \n \\n                            <Key>P:      previous() \n \\n                            <Key>n:      next() \n \\n                            <Key>N:      next() \n \\n                            <Configure>: notifyresize()"
TYPE	213:0	213:22	3	char [ ]
TYPE_NAME	213:0	213:0	4	char
LEAF_NODE	213:0	213:0	5	char
TYPE_SUFFIX	213:22	213:23	4	[ ]
LEAF_NODE	213:22	213:22	5	[
LEAF_NODE	213:23	213:23	5	]
NAME	213:5	213:5	3	translationsTable
LEAF_NODE	213:5	213:5	4	translationsTable
LEAF_NODE	0:0	0:0	3	;
INIT	213:5	213:5	3	translationsTable = "<Key>q:      quit() \n \\n                            <Key>Q:      quit() \n \\n                            <Message>WM_PROTOCOLS: quit()\n \\n                            <Key>p:      previous() \n \\n                            <Key>P:      previous() \n \\n                            <Key>n:      next() \n \\n                            <Key>N:      next() \n \\n                            <Configure>: notifyresize()"
ASSIGN	213:5	213:27	4	translationsTable = "<Key>q:      quit() \n \\n                            <Key>Q:      quit() \n \\n                            <Message>WM_PROTOCOLS: quit()\n \\n                            <Key>p:      previous() \n \\n                            <Key>P:      previous() \n \\n                            <Key>n:      next() \n \\n                            <Key>N:      next() \n \\n                            <Configure>: notifyresize()"
LVAL	213:5	213:5	5	translationsTable
NAME	213:5	213:5	6	translationsTable
LEAF_NODE	213:5	213:5	7	translationsTable
ASSIGN_OP	213:25	213:25	5	=
LEAF_NODE	213:25	213:25	6	=
RVAL	213:27	213:27	5	"<Key>q:      quit() \n \\n                            <Key>Q:      quit() \n \\n                            <Message>WM_PROTOCOLS: quit()\n \\n                            <Key>p:      previous() \n \\n                            <Key>P:      previous() \n \\n                            <Key>n:      next() \n \\n                            <Key>N:      next() \n \\n                            <Configure>: notifyresize()"
FIELD	213:27	213:27	6	"<Key>q:      quit() \n \\n                            <Key>Q:      quit() \n \\n                            <Message>WM_PROTOCOLS: quit()\n \\n                            <Key>p:      previous() \n \\n                            <Key>P:      previous() \n \\n                            <Key>n:      next() \n \\n                            <Key>N:      next() \n \\n                            <Configure>: notifyresize()"
LEAF_NODE	213:27	213:27	7	"<Key>q:      quit() \n \\n                            <Key>Q:      quit() \n \\n                            <Message>WM_PROTOCOLS: quit()\n \\n                            <Key>p:      previous() \n \\n                            <Key>P:      previous() \n \\n                            <Key>n:      next() \n \\n                            <Key>N:      next() \n \\n                            <Configure>: notifyresize()"
LEAF_NODE	220:56	220:56	2	;
SIMPLE_DECL	225:0	225:29	1	Colormap xColormap ;
VAR_DECL	225:0	225:20	2	Colormap xColormap
TYPE	225:0	225:0	3	Colormap
TYPE_NAME	225:0	225:0	4	Colormap
LEAF_NODE	225:0	225:0	5	Colormap
NAME	225:20	225:20	3	xColormap
LEAF_NODE	225:20	225:20	4	xColormap
LEAF_NODE	225:29	225:29	2	;
SIMPLE_DECL	226:0	226:28	1	Display * xDisplay ;
VAR_DECL	226:0	226:20	2	Display * xDisplay
TYPE	226:0	226:8	3	Display *
TYPE_NAME	226:0	226:0	4	Display
LEAF_NODE	226:0	226:0	5	Display
POINTER	226:8	226:8	4	*
LEAF_NODE	226:8	226:8	5	*
NAME	226:20	226:20	3	xDisplay
LEAF_NODE	226:20	226:20	4	xDisplay
LEAF_NODE	226:28	226:28	2	;
SIMPLE_DECL	227:0	227:32	1	Pixmap xImagePixmap ;
VAR_DECL	227:0	227:20	2	Pixmap xImagePixmap
TYPE	227:0	227:0	3	Pixmap
TYPE_NAME	227:0	227:0	4	Pixmap
LEAF_NODE	227:0	227:0	5	Pixmap
NAME	227:20	227:20	3	xImagePixmap
LEAF_NODE	227:20	227:20	4	xImagePixmap
LEAF_NODE	227:32	227:32	2	;
SIMPLE_DECL	228:0	228:27	1	Visual * xVisual ;
VAR_DECL	228:0	228:20	2	Visual * xVisual
TYPE	228:0	228:7	3	Visual *
TYPE_NAME	228:0	228:0	4	Visual
LEAF_NODE	228:0	228:0	5	Visual
POINTER	228:7	228:7	4	*
LEAF_NODE	228:7	228:7	5	*
NAME	228:20	228:20	3	xVisual
LEAF_NODE	228:20	228:20	4	xVisual
LEAF_NODE	228:27	228:27	2	;
SIMPLE_DECL	229:0	229:26	1	XImage * xImage ;
VAR_DECL	229:0	229:20	2	XImage * xImage
TYPE	229:0	229:7	3	XImage *
TYPE_NAME	229:0	229:0	4	XImage
LEAF_NODE	229:0	229:0	5	XImage
POINTER	229:7	229:7	4	*
LEAF_NODE	229:7	229:7	5	*
NAME	229:20	229:20	3	xImage
LEAF_NODE	229:20	229:20	4	xImage
LEAF_NODE	229:26	229:26	2	;
SIMPLE_DECL	230:0	230:26	1	GC xWinGc ;
VAR_DECL	230:0	230:20	2	GC xWinGc
TYPE	230:0	230:0	3	GC
TYPE_NAME	230:0	230:0	4	GC
LEAF_NODE	230:0	230:0	5	GC
NAME	230:20	230:20	3	xWinGc
LEAF_NODE	230:20	230:20	4	xWinGc
LEAF_NODE	230:26	230:26	2	;
SIMPLE_DECL	231:0	232:68	1	int xImageDepth , int xScreen , int xRedMask , int xGreenMask , int xBlueMask , int xOffset ; xOffset = 0 , int yOffset ; yOffset = 0 , int grabX ; grabX = - 1 , int grabY ; grabY = - 1 ;
INIT_DECL_LIST	231:0	231:0	2	int xImageDepth , int xScreen , int xRedMask , int xGreenMask , int xBlueMask , int xOffset ; xOffset = 0 , int yOffset ; yOffset = 0 , int grabX ; grabX = - 1 , int grabY ; grabY = - 1
VAR_DECL	231:0	231:20	3	int xImageDepth
TYPE	231:0	231:0	4	int
TYPE_NAME	231:0	231:0	5	int
LEAF_NODE	231:0	231:0	6	int
NAME	231:20	231:20	4	xImageDepth
LEAF_NODE	231:20	231:20	5	xImageDepth
LEAF_NODE	231:31	231:31	3	,
INIT_DECL_LIST	231:0	231:0	3	int xScreen , int xRedMask , int xGreenMask , int xBlueMask , int xOffset ; xOffset = 0 , int yOffset ; yOffset = 0 , int grabX ; grabX = - 1 , int grabY ; grabY = - 1
VAR_DECL	231:0	231:33	4	int xScreen
TYPE	231:0	231:0	5	int
TYPE_NAME	231:0	231:0	6	int
LEAF_NODE	231:0	231:0	7	int
NAME	231:33	231:33	5	xScreen
LEAF_NODE	231:33	231:33	6	xScreen
LEAF_NODE	231:40	231:40	4	,
INIT_DECL_LIST	231:0	231:0	4	int xRedMask , int xGreenMask , int xBlueMask , int xOffset ; xOffset = 0 , int yOffset ; yOffset = 0 , int grabX ; grabX = - 1 , int grabY ; grabY = - 1
VAR_DECL	231:0	231:42	5	int xRedMask
TYPE	231:0	231:0	6	int
TYPE_NAME	231:0	231:0	7	int
LEAF_NODE	231:0	231:0	8	int
NAME	231:42	231:42	6	xRedMask
LEAF_NODE	231:42	231:42	7	xRedMask
LEAF_NODE	231:50	231:50	5	,
INIT_DECL_LIST	231:0	231:0	5	int xGreenMask , int xBlueMask , int xOffset ; xOffset = 0 , int yOffset ; yOffset = 0 , int grabX ; grabX = - 1 , int grabY ; grabY = - 1
VAR_DECL	231:0	231:52	6	int xGreenMask
TYPE	231:0	231:0	7	int
TYPE_NAME	231:0	231:0	8	int
LEAF_NODE	231:0	231:0	9	int
NAME	231:52	231:52	7	xGreenMask
LEAF_NODE	231:52	231:52	8	xGreenMask
LEAF_NODE	231:62	231:62	6	,
INIT_DECL_LIST	231:0	231:0	6	int xBlueMask , int xOffset ; xOffset = 0 , int yOffset ; yOffset = 0 , int grabX ; grabX = - 1 , int grabY ; grabY = - 1
VAR_DECL	231:0	231:64	7	int xBlueMask
TYPE	231:0	231:0	8	int
TYPE_NAME	231:0	231:0	9	int
LEAF_NODE	231:0	231:0	10	int
NAME	231:64	231:64	8	xBlueMask
LEAF_NODE	231:64	231:64	9	xBlueMask
LEAF_NODE	231:73	231:73	7	,
INIT_DECL_LIST	231:0	231:0	7	int xOffset ; xOffset = 0 , int yOffset ; yOffset = 0 , int grabX ; grabX = - 1 , int grabY ; grabY = - 1
VAR_DECL	231:0	232:20	8	int xOffset ; xOffset = 0
TYPE	231:0	231:0	9	int
TYPE_NAME	231:0	231:0	10	int
LEAF_NODE	231:0	231:0	11	int
NAME	232:20	232:20	9	xOffset
LEAF_NODE	232:20	232:20	10	xOffset
LEAF_NODE	0:0	0:0	9	;
INIT	232:20	232:20	9	xOffset = 0
ASSIGN	232:20	232:30	10	xOffset = 0
LVAL	232:20	232:20	11	xOffset
NAME	232:20	232:20	12	xOffset
LEAF_NODE	232:20	232:20	13	xOffset
ASSIGN_OP	232:28	232:28	11	=
LEAF_NODE	232:28	232:28	12	=
RVAL	232:30	232:30	11	0
FIELD	232:30	232:30	12	0
LEAF_NODE	232:30	232:30	13	0
LEAF_NODE	232:31	232:31	8	,
INIT_DECL_LIST	231:0	231:0	8	int yOffset ; yOffset = 0 , int grabX ; grabX = - 1 , int grabY ; grabY = - 1
VAR_DECL	231:0	232:33	9	int yOffset ; yOffset = 0
TYPE	231:0	231:0	10	int
TYPE_NAME	231:0	231:0	11	int
LEAF_NODE	231:0	231:0	12	int
NAME	232:33	232:33	10	yOffset
LEAF_NODE	232:33	232:33	11	yOffset
LEAF_NODE	0:0	0:0	10	;
INIT	232:33	232:33	10	yOffset = 0
ASSIGN	232:33	232:43	11	yOffset = 0
LVAL	232:33	232:33	12	yOffset
NAME	232:33	232:33	13	yOffset
LEAF_NODE	232:33	232:33	14	yOffset
ASSIGN_OP	232:41	232:41	12	=
LEAF_NODE	232:41	232:41	13	=
RVAL	232:43	232:43	12	0
FIELD	232:43	232:43	13	0
LEAF_NODE	232:43	232:43	14	0
LEAF_NODE	232:44	232:44	9	,
INIT_DECL_LIST	231:0	231:0	9	int grabX ; grabX = - 1 , int grabY ; grabY = - 1
VAR_DECL	231:0	232:46	10	int grabX ; grabX = - 1
TYPE	231:0	231:0	11	int
TYPE_NAME	231:0	231:0	12	int
LEAF_NODE	231:0	231:0	13	int
NAME	232:46	232:46	11	grabX
LEAF_NODE	232:46	232:46	12	grabX
LEAF_NODE	0:0	0:0	11	;
INIT	232:46	232:46	11	grabX = - 1
ASSIGN	232:46	232:54	12	grabX = - 1
LVAL	232:46	232:46	13	grabX
NAME	232:46	232:46	14	grabX
LEAF_NODE	232:46	232:46	15	grabX
ASSIGN_OP	232:52	232:52	13	=
LEAF_NODE	232:52	232:52	14	=
RVAL	232:54	232:54	13	- 1
UNARY_EXPR	232:54	232:55	14	- 1
UNARY_OPERATOR	232:54	232:54	15	-
LEAF_NODE	232:54	232:54	16	-
FIELD	232:55	232:55	15	1
LEAF_NODE	232:55	232:55	16	1
LEAF_NODE	232:56	232:56	10	,
VAR_DECL	231:0	232:58	10	int grabY ; grabY = - 1
TYPE	231:0	231:0	11	int
TYPE_NAME	231:0	231:0	12	int
LEAF_NODE	231:0	231:0	13	int
NAME	232:58	232:58	11	grabY
LEAF_NODE	232:58	232:58	12	grabY
LEAF_NODE	0:0	0:0	11	;
INIT	232:58	232:58	11	grabY = - 1
ASSIGN	232:58	232:66	12	grabY = - 1
LVAL	232:58	232:58	13	grabY
NAME	232:58	232:58	14	grabY
LEAF_NODE	232:58	232:58	15	grabY
ASSIGN_OP	232:64	232:64	13	=
LEAF_NODE	232:64	232:64	14	=
RVAL	232:66	232:66	13	- 1
UNARY_EXPR	232:66	232:67	14	- 1
UNARY_OPERATOR	232:66	232:66	15	-
LEAF_NODE	232:66	232:66	16	-
FIELD	232:67	232:67	15	1
LEAF_NODE	232:67	232:67	16	1
LEAF_NODE	232:68	232:68	2	;
SIMPLE_DECL	233:0	233:33	1	unsigned char basePixel ; basePixel = 0 ;
VAR_DECL	233:0	233:20	2	unsigned char basePixel ; basePixel = 0
TYPE	233:0	233:0	3	unsigned char
TYPE_NAME	233:0	233:9	4	unsigned char
LEAF_NODE	233:0	233:0	5	unsigned
LEAF_NODE	233:9	233:9	5	char
NAME	233:20	233:20	3	basePixel
LEAF_NODE	233:20	233:20	4	basePixel
LEAF_NODE	0:0	0:0	3	;
INIT	233:20	233:20	3	basePixel = 0
ASSIGN	233:20	233:32	4	basePixel = 0
LVAL	233:20	233:20	5	basePixel
NAME	233:20	233:20	6	basePixel
LEAF_NODE	233:20	233:20	7	basePixel
ASSIGN_OP	233:30	233:30	5	=
LEAF_NODE	233:30	233:30	6	=
RVAL	233:32	233:32	5	0
FIELD	233:32	233:32	6	0
LEAF_NODE	233:32	233:32	7	0
LEAF_NODE	233:33	233:33	2	;
SIMPLE_DECL	238:0	238:33	1	TIFF * tfFile ; tfFile = NULL ;
VAR_DECL	238:0	238:20	2	TIFF * tfFile ; tfFile = NULL
TYPE	238:0	238:5	3	TIFF *
TYPE_NAME	238:0	238:0	4	TIFF
LEAF_NODE	238:0	238:0	5	TIFF
POINTER	238:5	238:5	4	*
LEAF_NODE	238:5	238:5	5	*
NAME	238:20	238:20	3	tfFile
LEAF_NODE	238:20	238:20	4	tfFile
LEAF_NODE	0:0	0:0	3	;
INIT	238:20	238:20	3	tfFile = NULL
ASSIGN	238:20	238:29	4	tfFile = NULL
LVAL	238:20	238:20	5	tfFile
NAME	238:20	238:20	6	tfFile
LEAF_NODE	238:20	238:20	7	tfFile
ASSIGN_OP	238:27	238:27	5	=
LEAF_NODE	238:27	238:27	6	=
RVAL	238:29	238:29	5	NULL
FIELD	238:29	238:29	6	NULL
LEAF_NODE	238:29	238:29	7	NULL
LEAF_NODE	238:33	238:33	2	;
SIMPLE_DECL	239:0	239:47	1	uint32 tfImageWidth , uint32 tfImageHeight ;
INIT_DECL_LIST	239:0	239:0	2	uint32 tfImageWidth , uint32 tfImageHeight
VAR_DECL	239:0	239:20	3	uint32 tfImageWidth
TYPE	239:0	239:0	4	uint32
TYPE_NAME	239:0	239:0	5	uint32
LEAF_NODE	239:0	239:0	6	uint32
NAME	239:20	239:20	4	tfImageWidth
LEAF_NODE	239:20	239:20	5	tfImageWidth
LEAF_NODE	239:32	239:32	3	,
VAR_DECL	239:0	239:34	3	uint32 tfImageHeight
TYPE	239:0	239:0	4	uint32
TYPE_NAME	239:0	239:0	5	uint32
LEAF_NODE	239:0	239:0	6	uint32
NAME	239:34	239:34	4	tfImageHeight
LEAF_NODE	239:34	239:34	5	tfImageHeight
LEAF_NODE	239:47	239:47	2	;
SIMPLE_DECL	240:0	242:47	1	uint16 tfBitsPerSample , uint16 tfSamplesPerPixel , uint16 tfPlanarConfiguration , uint16 tfPhotometricInterpretation , uint16 tfGrayResponseUnit , uint16 tfImageDepth , uint16 tfBytesPerRow ;
INIT_DECL_LIST	240:0	240:0	2	uint16 tfBitsPerSample , uint16 tfSamplesPerPixel , uint16 tfPlanarConfiguration , uint16 tfPhotometricInterpretation , uint16 tfGrayResponseUnit , uint16 tfImageDepth , uint16 tfBytesPerRow
VAR_DECL	240:0	240:20	3	uint16 tfBitsPerSample
TYPE	240:0	240:0	4	uint16
TYPE_NAME	240:0	240:0	5	uint16
LEAF_NODE	240:0	240:0	6	uint16
NAME	240:20	240:20	4	tfBitsPerSample
LEAF_NODE	240:20	240:20	5	tfBitsPerSample
LEAF_NODE	240:35	240:35	3	,
INIT_DECL_LIST	240:0	240:0	3	uint16 tfSamplesPerPixel , uint16 tfPlanarConfiguration , uint16 tfPhotometricInterpretation , uint16 tfGrayResponseUnit , uint16 tfImageDepth , uint16 tfBytesPerRow
VAR_DECL	240:0	240:37	4	uint16 tfSamplesPerPixel
TYPE	240:0	240:0	5	uint16
TYPE_NAME	240:0	240:0	6	uint16
LEAF_NODE	240:0	240:0	7	uint16
NAME	240:37	240:37	5	tfSamplesPerPixel
LEAF_NODE	240:37	240:37	6	tfSamplesPerPixel
LEAF_NODE	240:54	240:54	4	,
INIT_DECL_LIST	240:0	240:0	4	uint16 tfPlanarConfiguration , uint16 tfPhotometricInterpretation , uint16 tfGrayResponseUnit , uint16 tfImageDepth , uint16 tfBytesPerRow
VAR_DECL	240:0	240:56	5	uint16 tfPlanarConfiguration
TYPE	240:0	240:0	6	uint16
TYPE_NAME	240:0	240:0	7	uint16
LEAF_NODE	240:0	240:0	8	uint16
NAME	240:56	240:56	6	tfPlanarConfiguration
LEAF_NODE	240:56	240:56	7	tfPlanarConfiguration
LEAF_NODE	240:77	240:77	5	,
INIT_DECL_LIST	240:0	240:0	5	uint16 tfPhotometricInterpretation , uint16 tfGrayResponseUnit , uint16 tfImageDepth , uint16 tfBytesPerRow
VAR_DECL	240:0	241:20	6	uint16 tfPhotometricInterpretation
TYPE	240:0	240:0	7	uint16
TYPE_NAME	240:0	240:0	8	uint16
LEAF_NODE	240:0	240:0	9	uint16
NAME	241:20	241:20	7	tfPhotometricInterpretation
LEAF_NODE	241:20	241:20	8	tfPhotometricInterpretation
LEAF_NODE	241:47	241:47	6	,
INIT_DECL_LIST	240:0	240:0	6	uint16 tfGrayResponseUnit , uint16 tfImageDepth , uint16 tfBytesPerRow
VAR_DECL	240:0	241:49	7	uint16 tfGrayResponseUnit
TYPE	240:0	240:0	8	uint16
TYPE_NAME	240:0	240:0	9	uint16
LEAF_NODE	240:0	240:0	10	uint16
NAME	241:49	241:49	8	tfGrayResponseUnit
LEAF_NODE	241:49	241:49	9	tfGrayResponseUnit
LEAF_NODE	241:67	241:67	7	,
INIT_DECL_LIST	240:0	240:0	7	uint16 tfImageDepth , uint16 tfBytesPerRow
VAR_DECL	240:0	242:20	8	uint16 tfImageDepth
TYPE	240:0	240:0	9	uint16
TYPE_NAME	240:0	240:0	10	uint16
LEAF_NODE	240:0	240:0	11	uint16
NAME	242:20	242:20	9	tfImageDepth
LEAF_NODE	242:20	242:20	10	tfImageDepth
LEAF_NODE	242:32	242:32	8	,
VAR_DECL	240:0	242:34	8	uint16 tfBytesPerRow
TYPE	240:0	240:0	9	uint16
TYPE_NAME	240:0	240:0	10	uint16
LEAF_NODE	240:0	240:0	11	uint16
NAME	242:34	242:34	9	tfBytesPerRow
LEAF_NODE	242:34	242:34	10	tfBytesPerRow
LEAF_NODE	242:47	242:47	2	;
SIMPLE_DECL	243:0	243:56	1	int tfDirectory ; tfDirectory = 0 , int tfMultiPage ; tfMultiPage = False ;
INIT_DECL_LIST	243:0	243:0	2	int tfDirectory ; tfDirectory = 0 , int tfMultiPage ; tfMultiPage = False
VAR_DECL	243:0	243:20	3	int tfDirectory ; tfDirectory = 0
TYPE	243:0	243:0	4	int
TYPE_NAME	243:0	243:0	5	int
LEAF_NODE	243:0	243:0	6	int
NAME	243:20	243:20	4	tfDirectory
LEAF_NODE	243:20	243:20	5	tfDirectory
LEAF_NODE	0:0	0:0	4	;
INIT	243:20	243:20	4	tfDirectory = 0
ASSIGN	243:20	243:34	5	tfDirectory = 0
LVAL	243:20	243:20	6	tfDirectory
NAME	243:20	243:20	7	tfDirectory
LEAF_NODE	243:20	243:20	8	tfDirectory
ASSIGN_OP	243:32	243:32	6	=
LEAF_NODE	243:32	243:32	7	=
RVAL	243:34	243:34	6	0
FIELD	243:34	243:34	7	0
LEAF_NODE	243:34	243:34	8	0
LEAF_NODE	243:35	243:35	3	,
VAR_DECL	243:0	243:37	3	int tfMultiPage ; tfMultiPage = False
TYPE	243:0	243:0	4	int
TYPE_NAME	243:0	243:0	5	int
LEAF_NODE	243:0	243:0	6	int
NAME	243:37	243:37	4	tfMultiPage
LEAF_NODE	243:37	243:37	5	tfMultiPage
LEAF_NODE	0:0	0:0	4	;
INIT	243:37	243:37	4	tfMultiPage = False
ASSIGN	243:37	243:51	5	tfMultiPage = False
LVAL	243:37	243:37	6	tfMultiPage
NAME	243:37	243:37	7	tfMultiPage
LEAF_NODE	243:37	243:37	8	tfMultiPage
ASSIGN_OP	243:49	243:49	6	=
LEAF_NODE	243:49	243:49	7	=
RVAL	243:51	243:51	6	False
FIELD	243:51	243:51	7	False
LEAF_NODE	243:51	243:51	8	False
LEAF_NODE	243:56	243:56	2	;
SIMPLE_DECL	251:0	251:42	1	double * dRed , double * dGreen , double * dBlue ;
INIT_DECL_LIST	251:0	251:0	2	double * dRed , double * dGreen , double * dBlue
VAR_DECL	251:0	251:21	3	double * dRed
TYPE	251:0	251:20	4	double *
TYPE_NAME	251:0	251:0	5	double
LEAF_NODE	251:0	251:0	6	double
POINTER	251:20	251:20	5	*
LEAF_NODE	251:20	251:20	6	*
NAME	251:21	251:21	4	dRed
LEAF_NODE	251:21	251:21	5	dRed
LEAF_NODE	251:25	251:25	3	,
INIT_DECL_LIST	251:0	251:0	3	double * dGreen , double * dBlue
VAR_DECL	251:0	251:28	4	double * dGreen
TYPE	251:0	251:27	5	double *
TYPE_NAME	251:0	251:0	6	double
LEAF_NODE	251:0	251:0	7	double
POINTER	251:27	251:27	6	*
LEAF_NODE	251:27	251:27	7	*
NAME	251:28	251:28	5	dGreen
LEAF_NODE	251:28	251:28	6	dGreen
LEAF_NODE	251:34	251:34	4	,
VAR_DECL	251:0	251:37	4	double * dBlue
TYPE	251:0	251:36	5	double *
TYPE_NAME	251:0	251:0	6	double
LEAF_NODE	251:0	251:0	7	double
POINTER	251:36	251:36	6	*
LEAF_NODE	251:36	251:36	7	*
NAME	251:37	251:37	5	dBlue
LEAF_NODE	251:37	251:37	6	dBlue
LEAF_NODE	251:42	251:42	2	;
SIMPLE_DECL	256:0	257:49	1	uint16 * redMap ; redMap = NULL , uint16 * greenMap ; greenMap = NULL , uint16 * blueMap ; blueMap = NULL , uint16 * grayMap ; grayMap = NULL , uint16 colormapSize ;
INIT_DECL_LIST	256:0	256:0	2	uint16 * redMap ; redMap = NULL , uint16 * greenMap ; greenMap = NULL , uint16 * blueMap ; blueMap = NULL , uint16 * grayMap ; grayMap = NULL , uint16 colormapSize
VAR_DECL	256:0	256:20	3	uint16 * redMap ; redMap = NULL
TYPE	256:0	256:7	4	uint16 *
TYPE_NAME	256:0	256:0	5	uint16
LEAF_NODE	256:0	256:0	6	uint16
POINTER	256:7	256:7	5	*
LEAF_NODE	256:7	256:7	6	*
NAME	256:20	256:20	4	redMap
LEAF_NODE	256:20	256:20	5	redMap
LEAF_NODE	0:0	0:0	4	;
INIT	256:20	256:20	4	redMap = NULL
ASSIGN	256:20	256:29	5	redMap = NULL
LVAL	256:20	256:20	6	redMap
NAME	256:20	256:20	7	redMap
LEAF_NODE	256:20	256:20	8	redMap
ASSIGN_OP	256:27	256:27	6	=
LEAF_NODE	256:27	256:27	7	=
RVAL	256:29	256:29	6	NULL
FIELD	256:29	256:29	7	NULL
LEAF_NODE	256:29	256:29	8	NULL
LEAF_NODE	256:33	256:33	3	,
INIT_DECL_LIST	256:0	256:0	3	uint16 * greenMap ; greenMap = NULL , uint16 * blueMap ; blueMap = NULL , uint16 * grayMap ; grayMap = NULL , uint16 colormapSize
VAR_DECL	256:0	256:36	4	uint16 * greenMap ; greenMap = NULL
TYPE	256:0	256:35	5	uint16 *
TYPE_NAME	256:0	256:0	6	uint16
LEAF_NODE	256:0	256:0	7	uint16
POINTER	256:35	256:35	6	*
LEAF_NODE	256:35	256:35	7	*
NAME	256:36	256:36	5	greenMap
LEAF_NODE	256:36	256:36	6	greenMap
LEAF_NODE	0:0	0:0	5	;
INIT	256:36	256:36	5	greenMap = NULL
ASSIGN	256:36	256:47	6	greenMap = NULL
LVAL	256:36	256:36	7	greenMap
NAME	256:36	256:36	8	greenMap
LEAF_NODE	256:36	256:36	9	greenMap
ASSIGN_OP	256:45	256:45	7	=
LEAF_NODE	256:45	256:45	8	=
RVAL	256:47	256:47	7	NULL
FIELD	256:47	256:47	8	NULL
LEAF_NODE	256:47	256:47	9	NULL
LEAF_NODE	256:51	256:51	4	,
INIT_DECL_LIST	256:0	256:0	4	uint16 * blueMap ; blueMap = NULL , uint16 * grayMap ; grayMap = NULL , uint16 colormapSize
VAR_DECL	256:0	256:54	5	uint16 * blueMap ; blueMap = NULL
TYPE	256:0	256:53	6	uint16 *
TYPE_NAME	256:0	256:0	7	uint16
LEAF_NODE	256:0	256:0	8	uint16
POINTER	256:53	256:53	7	*
LEAF_NODE	256:53	256:53	8	*
NAME	256:54	256:54	6	blueMap
LEAF_NODE	256:54	256:54	7	blueMap
LEAF_NODE	0:0	0:0	6	;
INIT	256:54	256:54	6	blueMap = NULL
ASSIGN	256:54	256:64	7	blueMap = NULL
LVAL	256:54	256:54	8	blueMap
NAME	256:54	256:54	9	blueMap
LEAF_NODE	256:54	256:54	10	blueMap
ASSIGN_OP	256:62	256:62	8	=
LEAF_NODE	256:62	256:62	9	=
RVAL	256:64	256:64	8	NULL
FIELD	256:64	256:64	9	NULL
LEAF_NODE	256:64	256:64	10	NULL
LEAF_NODE	256:68	256:68	5	,
INIT_DECL_LIST	256:0	256:0	5	uint16 * grayMap ; grayMap = NULL , uint16 colormapSize
VAR_DECL	256:0	257:21	6	uint16 * grayMap ; grayMap = NULL
TYPE	256:0	257:20	7	uint16 *
TYPE_NAME	256:0	256:0	8	uint16
LEAF_NODE	256:0	256:0	9	uint16
POINTER	257:20	257:20	8	*
LEAF_NODE	257:20	257:20	9	*
NAME	257:21	257:21	7	grayMap
LEAF_NODE	257:21	257:21	8	grayMap
LEAF_NODE	0:0	0:0	7	;
INIT	257:21	257:21	7	grayMap = NULL
ASSIGN	257:21	257:31	8	grayMap = NULL
LVAL	257:21	257:21	9	grayMap
NAME	257:21	257:21	10	grayMap
LEAF_NODE	257:21	257:21	11	grayMap
ASSIGN_OP	257:29	257:29	9	=
LEAF_NODE	257:29	257:29	10	=
RVAL	257:31	257:31	9	NULL
FIELD	257:31	257:31	10	NULL
LEAF_NODE	257:31	257:31	11	NULL
LEAF_NODE	257:35	257:35	6	,
VAR_DECL	256:0	257:37	6	uint16 colormapSize
TYPE	256:0	256:0	7	uint16
TYPE_NAME	256:0	256:0	8	uint16
LEAF_NODE	256:0	256:0	9	uint16
NAME	257:37	257:37	7	colormapSize
LEAF_NODE	257:37	257:37	8	colormapSize
LEAF_NODE	257:49	257:49	2	;
SIMPLE_DECL	258:0	258:30	1	char * imageMemory ;
VAR_DECL	258:0	258:19	2	char * imageMemory
TYPE	258:0	258:5	3	char *
TYPE_NAME	258:0	258:0	4	char
LEAF_NODE	258:0	258:0	5	char
POINTER	258:5	258:5	4	*
LEAF_NODE	258:5	258:5	5	*
NAME	258:19	258:19	3	imageMemory
LEAF_NODE	258:19	258:19	4	imageMemory
LEAF_NODE	258:30	258:30	2	;
SIMPLE_DECL	259:0	259:28	1	char * fileName ;
VAR_DECL	259:0	259:20	2	char * fileName
TYPE	259:0	259:5	3	char *
TYPE_NAME	259:0	259:0	4	char
LEAF_NODE	259:0	259:0	5	char
POINTER	259:5	259:5	4	*
LEAF_NODE	259:5	259:5	5	*
NAME	259:20	259:20	3	fileName
LEAF_NODE	259:20	259:20	4	fileName
LEAF_NODE	259:28	259:28	2	;
FUNCTION_DEF	261:0	383:0	1	
RETURN_TYPE	261:0	261:0	2	int
TYPE_NAME	261:0	261:0	3	int
LEAF_NODE	261:0	261:0	4	int
FUNCTION_NAME	262:0	262:0	2	main
LEAF_NODE	262:0	262:0	3	main
PARAMETER_LIST	262:4	262:26	2	( int argc , char * * argv )
LEAF_NODE	262:4	262:4	3	(
PARAMETER_DECL	262:5	262:9	3	int argc
TYPE	262:5	262:5	4	int
TYPE_NAME	262:5	262:5	5	int
LEAF_NODE	262:5	262:5	6	int
NAME	262:9	262:9	4	argc
LEAF_NODE	262:9	262:9	5	argc
LEAF_NODE	262:13	262:13	3	,
PARAMETER_DECL	262:15	262:22	3	char * * argv
TYPE	262:15	262:20	4	char * *
TYPE_NAME	262:15	262:15	5	char
LEAF_NODE	262:15	262:15	6	char
POINTER	262:20	262:21	5	* *
LEAF_NODE	262:20	262:20	6	*
LEAF_NODE	262:21	262:21	6	*
NAME	262:22	262:22	4	argv
LEAF_NODE	262:22	262:22	5	argv
LEAF_NODE	262:26	262:26	3	)
LEAF_NODE	263:0	263:0	2	{
STATEMENTS	264:4	382:4	2	
SIMPLE_DECL	264:4	264:42	3	XSetWindowAttributes window_attributes ;
VAR_DECL	264:4	264:25	4	XSetWindowAttributes window_attributes
TYPE	264:4	264:4	5	XSetWindowAttributes
TYPE_NAME	264:4	264:4	6	XSetWindowAttributes
LEAF_NODE	264:4	264:4	7	XSetWindowAttributes
NAME	264:25	264:25	5	window_attributes
LEAF_NODE	264:25	264:25	6	window_attributes
LEAF_NODE	264:42	264:42	4	;
SIMPLE_DECL	265:4	265:25	3	Widget [ 3 ] widget_list ;
VAR_DECL	265:4	265:11	4	Widget [ 3 ] widget_list
TYPE	265:4	265:22	5	Widget [ 3 ]
TYPE_NAME	265:4	265:4	6	Widget
LEAF_NODE	265:4	265:4	7	Widget
TYPE_SUFFIX	265:22	265:24	6	[ 3 ]
LEAF_NODE	265:22	265:22	7	[
FIELD	265:23	265:23	7	3
LEAF_NODE	265:23	265:23	8	3
LEAF_NODE	265:24	265:24	7	]
NAME	265:11	265:11	5	widget_list
LEAF_NODE	265:11	265:11	6	widget_list
LEAF_NODE	265:25	265:25	4	;
SIMPLE_DECL	266:4	266:15	3	Arg [ 5 ] args ;
VAR_DECL	266:4	266:8	4	Arg [ 5 ] args
TYPE	266:4	266:12	5	Arg [ 5 ]
TYPE_NAME	266:4	266:4	6	Arg
LEAF_NODE	266:4	266:4	7	Arg
TYPE_SUFFIX	266:12	266:14	6	[ 5 ]
LEAF_NODE	266:12	266:12	7	[
FIELD	266:13	266:13	7	5
LEAF_NODE	266:13	266:13	8	5
LEAF_NODE	266:14	266:14	7	]
NAME	266:8	266:8	5	args
LEAF_NODE	266:8	266:8	6	args
LEAF_NODE	266:15	266:15	4	;
EXPR_STATEMENT	268:4	268:24	3	setbuf ( stdout , NULL ) ;
EXPR	268:4	268:4	4	setbuf ( stdout , NULL )
FUNCTION_CALL	268:4	268:23	5	setbuf ( stdout , NULL )
CALLEE	268:4	268:4	6	setbuf
LEAF_NODE	268:4	268:4	7	setbuf
LEAF_NODE	268:10	268:10	6	(
ARGUMENT	268:11	268:11	6	stdout
FIELD	268:11	268:11	7	stdout
LEAF_NODE	268:11	268:11	8	stdout
LEAF_NODE	268:17	268:17	6	,
ARGUMENT	268:19	268:19	6	NULL
FIELD	268:19	268:19	7	NULL
LEAF_NODE	268:19	268:19	8	NULL
LEAF_NODE	268:23	268:23	6	)
LEAF_NODE	268:24	268:24	4	;
EXPR_STATEMENT	268:26	268:46	3	setbuf ( stderr , NULL ) ;
EXPR	268:26	268:26	4	setbuf ( stderr , NULL )
FUNCTION_CALL	268:26	268:45	5	setbuf ( stderr , NULL )
CALLEE	268:26	268:26	6	setbuf
LEAF_NODE	268:26	268:26	7	setbuf
LEAF_NODE	268:32	268:32	6	(
ARGUMENT	268:33	268:33	6	stderr
FIELD	268:33	268:33	7	stderr
LEAF_NODE	268:33	268:33	8	stderr
LEAF_NODE	268:39	268:39	6	,
ARGUMENT	268:41	268:41	6	NULL
FIELD	268:41	268:41	7	NULL
LEAF_NODE	268:41	268:41	8	NULL
LEAF_NODE	268:45	268:45	6	)
LEAF_NODE	268:46	268:46	4	;
EXPR_STATEMENT	270:4	271:44	3	shellWidget = XtInitialize ( argv [ 0 ] , "XTiff" , shellOptions , XtNumber ( shellOptions ) , & argc , argv ) ;
EXPR	270:4	270:4	4	shellWidget = XtInitialize ( argv [ 0 ] , "XTiff" , shellOptions , XtNumber ( shellOptions ) , & argc , argv )
ASSIGN	270:4	270:18	5	shellWidget = XtInitialize ( argv [ 0 ] , "XTiff" , shellOptions , XtNumber ( shellOptions ) , & argc , argv )
LVAL	270:4	270:4	6	shellWidget
FIELD	270:4	270:4	7	shellWidget
LEAF_NODE	270:4	270:4	8	shellWidget
ASSIGN_OP	270:16	270:16	6	=
LEAF_NODE	270:16	270:16	7	=
RVAL	270:18	270:18	6	XtInitialize ( argv [ 0 ] , "XTiff" , shellOptions , XtNumber ( shellOptions ) , & argc , argv )
FUNCTION_CALL	270:18	271:43	7	XtInitialize ( argv [ 0 ] , "XTiff" , shellOptions , XtNumber ( shellOptions ) , & argc , argv )
CALLEE	270:18	270:18	8	XtInitialize
LEAF_NODE	270:18	270:18	9	XtInitialize
LEAF_NODE	270:30	270:30	8	(
ARGUMENT	270:31	270:31	8	argv [ 0 ]
FIELD	270:31	270:37	9	argv [ 0 ]
LEAF_NODE	270:31	270:31	10	argv
LEAF_NODE	270:35	270:35	10	[
EXPR	270:36	270:36	10	0
FIELD	270:36	270:36	11	0
LEAF_NODE	270:36	270:36	12	0
LEAF_NODE	270:37	270:37	10	]
LEAF_NODE	270:38	270:38	8	,
ARGUMENT	270:40	270:40	8	"XTiff"
FIELD	270:40	270:40	9	"XTiff"
LEAF_NODE	270:40	270:40	10	"XTiff"
LEAF_NODE	270:47	270:47	8	,
ARGUMENT	270:49	270:49	8	shellOptions
FIELD	270:49	270:49	9	shellOptions
LEAF_NODE	270:49	270:49	10	shellOptions
LEAF_NODE	270:61	270:61	8	,
ARGUMENT	271:8	271:8	8	XtNumber ( shellOptions )
FUNCTION_CALL	271:8	271:29	9	XtNumber ( shellOptions )
CALLEE	271:8	271:8	10	XtNumber
LEAF_NODE	271:8	271:8	11	XtNumber
LEAF_NODE	271:16	271:16	10	(
ARGUMENT	271:17	271:17	10	shellOptions
FIELD	271:17	271:17	11	shellOptions
LEAF_NODE	271:17	271:17	12	shellOptions
LEAF_NODE	271:29	271:29	10	)
LEAF_NODE	271:30	271:30	8	,
ARGUMENT	271:32	271:32	8	& argc
UNARY_EXPR	271:32	271:33	9	& argc
UNARY_OPERATOR	271:32	271:32	10	&
LEAF_NODE	271:32	271:32	11	&
FIELD	271:33	271:33	10	argc
LEAF_NODE	271:33	271:33	11	argc
LEAF_NODE	271:37	271:37	8	,
ARGUMENT	271:39	271:39	8	argv
FIELD	271:39	271:39	9	argv
LEAF_NODE	271:39	271:39	10	argv
LEAF_NODE	271:43	271:43	8	)
LEAF_NODE	271:44	271:44	4	;
EXPR_STATEMENT	273:4	273:39	3	XSetErrorHandler ( XTiffErrorHandler ) ;
EXPR	273:4	273:4	4	XSetErrorHandler ( XTiffErrorHandler )
FUNCTION_CALL	273:4	273:38	5	XSetErrorHandler ( XTiffErrorHandler )
CALLEE	273:4	273:4	6	XSetErrorHandler
LEAF_NODE	273:4	273:4	7	XSetErrorHandler
LEAF_NODE	273:20	273:20	6	(
ARGUMENT	273:21	273:21	6	XTiffErrorHandler
FIELD	273:21	273:21	7	XTiffErrorHandler
LEAF_NODE	273:21	273:21	8	XTiffErrorHandler
LEAF_NODE	273:38	273:38	6	)
LEAF_NODE	273:39	273:39	4	;
EXPR_STATEMENT	275:4	277:37	3	XtGetApplicationResources ( shellWidget , & appData , ( XtResourceList ) clientResources , ( Cardinal ) XtNumber ( clientResources ) , ( ArgList ) NULL , ( Cardinal ) 0 ) ;
EXPR	275:4	275:4	4	XtGetApplicationResources ( shellWidget , & appData , ( XtResourceList ) clientResources , ( Cardinal ) XtNumber ( clientResources ) , ( ArgList ) NULL , ( Cardinal ) 0 )
FUNCTION_CALL	275:4	277:36	5	XtGetApplicationResources ( shellWidget , & appData , ( XtResourceList ) clientResources , ( Cardinal ) XtNumber ( clientResources ) , ( ArgList ) NULL , ( Cardinal ) 0 )
CALLEE	275:4	275:4	6	XtGetApplicationResources
LEAF_NODE	275:4	275:4	7	XtGetApplicationResources
LEAF_NODE	275:29	275:29	6	(
ARGUMENT	275:30	275:30	6	shellWidget
FIELD	275:30	275:30	7	shellWidget
LEAF_NODE	275:30	275:30	8	shellWidget
LEAF_NODE	275:41	275:41	6	,
ARGUMENT	275:43	275:43	6	& appData
UNARY_EXPR	275:43	275:44	7	& appData
UNARY_OPERATOR	275:43	275:43	8	&
LEAF_NODE	275:43	275:43	9	&
FIELD	275:44	275:44	8	appData
LEAF_NODE	275:44	275:44	9	appData
LEAF_NODE	275:51	275:51	6	,
ARGUMENT	276:8	276:25	6	( XtResourceList ) clientResources
LEAF_NODE	276:8	276:8	7	(
TYPE_NAME	276:9	276:9	7	XtResourceList
LEAF_NODE	276:9	276:9	8	XtResourceList
LEAF_NODE	276:23	276:23	7	)
FIELD	276:25	276:25	7	clientResources
LEAF_NODE	276:25	276:25	8	clientResources
LEAF_NODE	276:40	276:40	6	,
ARGUMENT	276:42	276:53	6	( Cardinal ) XtNumber ( clientResources )
LEAF_NODE	276:42	276:42	7	(
TYPE_NAME	276:43	276:43	7	Cardinal
LEAF_NODE	276:43	276:43	8	Cardinal
LEAF_NODE	276:51	276:51	7	)
FUNCTION_CALL	276:53	276:77	7	XtNumber ( clientResources )
CALLEE	276:53	276:53	8	XtNumber
LEAF_NODE	276:53	276:53	9	XtNumber
LEAF_NODE	276:61	276:61	8	(
ARGUMENT	276:62	276:62	8	clientResources
FIELD	276:62	276:62	9	clientResources
LEAF_NODE	276:62	276:62	10	clientResources
LEAF_NODE	276:77	276:77	8	)
LEAF_NODE	276:78	276:78	6	,
ARGUMENT	277:8	277:18	6	( ArgList ) NULL
LEAF_NODE	277:8	277:8	7	(
TYPE_NAME	277:9	277:9	7	ArgList
LEAF_NODE	277:9	277:9	8	ArgList
LEAF_NODE	277:16	277:16	7	)
FIELD	277:18	277:18	7	NULL
LEAF_NODE	277:18	277:18	8	NULL
LEAF_NODE	277:22	277:22	6	,
ARGUMENT	277:24	277:35	6	( Cardinal ) 0
LEAF_NODE	277:24	277:24	7	(
TYPE_NAME	277:25	277:25	7	Cardinal
LEAF_NODE	277:25	277:25	8	Cardinal
LEAF_NODE	277:33	277:33	7	)
FIELD	277:35	277:35	7	0
LEAF_NODE	277:35	277:35	8	0
LEAF_NODE	277:36	277:36	6	)
LEAF_NODE	277:37	277:37	4	;
SELECTION	279:4	280:8	3	
KEYWORD	279:4	279:4	4	if
LEAF_NODE	279:4	279:4	5	if
LEAF_NODE	279:7	279:7	4	(
CONDITION	279:8	279:8	4	( argc <= 1 ) || ( argc > 2 ) || appData . help
EXPR	279:8	279:8	5	( argc <= 1 ) || ( argc > 2 ) || appData . help
OR	279:8	279:23	6	( argc <= 1 ) || ( argc > 2 ) || appData . help
EXPR	279:8	279:18	7	( argc <= 1 )
LEAF_NODE	279:8	279:8	8	(
FIELD	279:9	279:9	8	argc
LEAF_NODE	279:9	279:9	9	argc
REL_OPERATOR	279:14	279:14	8	<=
LEAF_NODE	279:14	279:14	9	<=
FIELD	279:17	279:17	8	1
LEAF_NODE	279:17	279:17	9	1
LEAF_NODE	279:18	279:18	8	)
LEAF_NODE	279:20	279:20	7	||
EXPR	279:23	279:23	7	( argc > 2 ) || appData . help
OR	279:23	279:37	8	( argc > 2 ) || appData . help
EXPR	279:23	279:32	9	( argc > 2 )
LEAF_NODE	279:23	279:23	10	(
FIELD	279:24	279:24	10	argc
LEAF_NODE	279:24	279:24	11	argc
REL_OPERATOR	279:29	279:29	10	>
LEAF_NODE	279:29	279:29	11	>
FIELD	279:31	279:31	10	2
LEAF_NODE	279:31	279:31	11	2
LEAF_NODE	279:32	279:32	10	)
LEAF_NODE	279:34	279:34	9	||
EXPR	279:37	279:37	9	appData . help
FIELD	279:37	279:45	10	appData . help
LEAF_NODE	279:37	279:37	11	appData
LEAF_NODE	279:44	279:44	11	.
LEAF_NODE	279:45	279:45	11	help
LEAF_NODE	279:49	279:49	4	)
STATEMENTS	280:8	280:8	4	
EXPR_STATEMENT	280:8	280:15	5	Usage ( ) ;
EXPR	280:8	280:8	6	Usage ( )
FUNCTION_CALL	280:8	280:14	7	Usage ( )
CALLEE	280:8	280:8	8	Usage
LEAF_NODE	280:8	280:8	9	Usage
LEAF_NODE	280:13	280:13	8	(
LEAF_NODE	280:14	280:14	8	)
LEAF_NODE	280:15	280:15	6	;
SELECTION	282:4	282:34	3	
KEYWORD	282:4	282:4	4	if
LEAF_NODE	282:4	282:4	5	if
LEAF_NODE	282:7	282:7	4	(
CONDITION	282:8	282:8	4	appData . verbose == False
EXPR	282:8	282:27	5	appData . verbose == False
FIELD	282:8	282:16	6	appData . verbose
LEAF_NODE	282:8	282:8	7	appData
LEAF_NODE	282:15	282:15	7	.
LEAF_NODE	282:16	282:16	7	verbose
EQ_OPERATOR	282:24	282:24	6	==
LEAF_NODE	282:24	282:24	7	==
FIELD	282:27	282:27	6	False
LEAF_NODE	282:27	282:27	7	False
LEAF_NODE	282:32	282:32	4	)
STATEMENTS	282:34	285:4	4	
LEAF_NODE	282:34	282:34	5	{
STATEMENTS	283:8	284:8	5	
EXPR_STATEMENT	283:8	283:30	6	TIFFSetErrorHandler ( 0 ) ;
EXPR	283:8	283:8	7	TIFFSetErrorHandler ( 0 )
FUNCTION_CALL	283:8	283:29	8	TIFFSetErrorHandler ( 0 )
CALLEE	283:8	283:8	9	TIFFSetErrorHandler
LEAF_NODE	283:8	283:8	10	TIFFSetErrorHandler
LEAF_NODE	283:27	283:27	9	(
ARGUMENT	283:28	283:28	9	0
FIELD	283:28	283:28	10	0
LEAF_NODE	283:28	283:28	11	0
LEAF_NODE	283:29	283:29	9	)
LEAF_NODE	283:30	283:30	7	;
EXPR_STATEMENT	284:8	284:32	6	TIFFSetWarningHandler ( 0 ) ;
EXPR	284:8	284:8	7	TIFFSetWarningHandler ( 0 )
FUNCTION_CALL	284:8	284:31	8	TIFFSetWarningHandler ( 0 )
CALLEE	284:8	284:8	9	TIFFSetWarningHandler
LEAF_NODE	284:8	284:8	10	TIFFSetWarningHandler
LEAF_NODE	284:29	284:29	9	(
ARGUMENT	284:30	284:30	9	0
FIELD	284:30	284:30	10	0
LEAF_NODE	284:30	284:30	11	0
LEAF_NODE	284:31	284:31	9	)
LEAF_NODE	284:32	284:32	7	;
LEAF_NODE	285:4	285:4	5	}
EXPR_STATEMENT	287:4	287:22	3	fileName = argv [ 1 ] ;
EXPR	287:4	287:4	4	fileName = argv [ 1 ]
ASSIGN	287:4	287:15	5	fileName = argv [ 1 ]
LVAL	287:4	287:4	6	fileName
FIELD	287:4	287:4	7	fileName
LEAF_NODE	287:4	287:4	8	fileName
ASSIGN_OP	287:13	287:13	6	=
LEAF_NODE	287:13	287:13	7	=
RVAL	287:15	287:15	6	argv [ 1 ]
FIELD	287:15	287:21	7	argv [ 1 ]
LEAF_NODE	287:15	287:15	8	argv
LEAF_NODE	287:19	287:19	8	[
EXPR	287:20	287:20	8	1
FIELD	287:20	287:20	9	1
LEAF_NODE	287:20	287:20	10	1
LEAF_NODE	287:21	287:21	8	]
LEAF_NODE	287:22	287:22	4	;
EXPR_STATEMENT	289:4	289:37	3	xDisplay = XtDisplay ( shellWidget ) ;
EXPR	289:4	289:4	4	xDisplay = XtDisplay ( shellWidget )
ASSIGN	289:4	289:15	5	xDisplay = XtDisplay ( shellWidget )
LVAL	289:4	289:4	6	xDisplay
FIELD	289:4	289:4	7	xDisplay
LEAF_NODE	289:4	289:4	8	xDisplay
ASSIGN_OP	289:13	289:13	6	=
LEAF_NODE	289:13	289:13	7	=
RVAL	289:15	289:15	6	XtDisplay ( shellWidget )
FUNCTION_CALL	289:15	289:36	7	XtDisplay ( shellWidget )
CALLEE	289:15	289:15	8	XtDisplay
LEAF_NODE	289:15	289:15	9	XtDisplay
LEAF_NODE	289:24	289:24	8	(
ARGUMENT	289:25	289:25	8	shellWidget
FIELD	289:25	289:25	9	shellWidget
LEAF_NODE	289:25	289:25	10	shellWidget
LEAF_NODE	289:36	289:36	8	)
LEAF_NODE	289:37	289:37	4	;
EXPR_STATEMENT	290:4	290:37	3	xScreen = DefaultScreen ( xDisplay ) ;
EXPR	290:4	290:4	4	xScreen = DefaultScreen ( xDisplay )
ASSIGN	290:4	290:14	5	xScreen = DefaultScreen ( xDisplay )
LVAL	290:4	290:4	6	xScreen
FIELD	290:4	290:4	7	xScreen
LEAF_NODE	290:4	290:4	8	xScreen
ASSIGN_OP	290:12	290:12	6	=
LEAF_NODE	290:12	290:12	7	=
RVAL	290:14	290:14	6	DefaultScreen ( xDisplay )
FUNCTION_CALL	290:14	290:36	7	DefaultScreen ( xDisplay )
CALLEE	290:14	290:14	8	DefaultScreen
LEAF_NODE	290:14	290:14	9	DefaultScreen
LEAF_NODE	290:27	290:27	8	(
ARGUMENT	290:28	290:28	8	xDisplay
FIELD	290:28	290:28	9	xDisplay
LEAF_NODE	290:28	290:28	10	xDisplay
LEAF_NODE	290:36	290:36	8	)
LEAF_NODE	290:37	290:37	4	;
EXPR_STATEMENT	292:4	292:18	3	OpenTIFFFile ( ) ;
EXPR	292:4	292:4	4	OpenTIFFFile ( )
FUNCTION_CALL	292:4	292:17	5	OpenTIFFFile ( )
CALLEE	292:4	292:4	6	OpenTIFFFile
LEAF_NODE	292:4	292:4	7	OpenTIFFFile
LEAF_NODE	292:16	292:16	6	(
LEAF_NODE	292:17	292:17	6	)
LEAF_NODE	292:18	292:18	4	;
EXPR_STATEMENT	293:4	293:19	3	GetTIFFHeader ( ) ;
EXPR	293:4	293:4	4	GetTIFFHeader ( )
FUNCTION_CALL	293:4	293:18	5	GetTIFFHeader ( )
CALLEE	293:4	293:4	6	GetTIFFHeader
LEAF_NODE	293:4	293:4	7	GetTIFFHeader
LEAF_NODE	293:17	293:17	6	(
LEAF_NODE	293:18	293:18	6	)
LEAF_NODE	293:19	293:19	4	;
EXPR_STATEMENT	294:4	294:27	3	SimpleGammaCorrection ( ) ;
EXPR	294:4	294:4	4	SimpleGammaCorrection ( )
FUNCTION_CALL	294:4	294:26	5	SimpleGammaCorrection ( )
CALLEE	294:4	294:4	6	SimpleGammaCorrection
LEAF_NODE	294:4	294:4	7	SimpleGammaCorrection
LEAF_NODE	294:25	294:25	6	(
LEAF_NODE	294:26	294:26	6	)
LEAF_NODE	294:27	294:27	4	;
EXPR_STATEMENT	295:4	295:15	3	GetVisual ( ) ;
EXPR	295:4	295:4	4	GetVisual ( )
FUNCTION_CALL	295:4	295:14	5	GetVisual ( )
CALLEE	295:4	295:4	6	GetVisual
LEAF_NODE	295:4	295:4	7	GetVisual
LEAF_NODE	295:13	295:13	6	(
LEAF_NODE	295:14	295:14	6	)
LEAF_NODE	295:15	295:15	4	;
EXPR_STATEMENT	296:4	296:18	3	GetTIFFImage ( ) ;
EXPR	296:4	296:4	4	GetTIFFImage ( )
FUNCTION_CALL	296:4	296:17	5	GetTIFFImage ( )
CALLEE	296:4	296:4	6	GetTIFFImage
LEAF_NODE	296:4	296:4	7	GetTIFFImage
LEAF_NODE	296:16	296:16	6	(
LEAF_NODE	296:17	296:17	6	)
LEAF_NODE	296:18	296:18	4	;
EXPR_STATEMENT	302:4	302:41	3	XtSetArg ( args [ 0 ] , XtNvisual , xVisual ) ;
EXPR	302:4	302:4	4	XtSetArg ( args [ 0 ] , XtNvisual , xVisual )
FUNCTION_CALL	302:4	302:40	5	XtSetArg ( args [ 0 ] , XtNvisual , xVisual )
CALLEE	302:4	302:4	6	XtSetArg
LEAF_NODE	302:4	302:4	7	XtSetArg
LEAF_NODE	302:12	302:12	6	(
ARGUMENT	302:13	302:13	6	args [ 0 ]
FIELD	302:13	302:19	7	args [ 0 ]
LEAF_NODE	302:13	302:13	8	args
LEAF_NODE	302:17	302:17	8	[
EXPR	302:18	302:18	8	0
FIELD	302:18	302:18	9	0
LEAF_NODE	302:18	302:18	10	0
LEAF_NODE	302:19	302:19	8	]
LEAF_NODE	302:20	302:20	6	,
ARGUMENT	302:22	302:22	6	XtNvisual
FIELD	302:22	302:22	7	XtNvisual
LEAF_NODE	302:22	302:22	8	XtNvisual
LEAF_NODE	302:31	302:31	6	,
ARGUMENT	302:33	302:33	6	xVisual
FIELD	302:33	302:33	7	xVisual
LEAF_NODE	302:33	302:33	8	xVisual
LEAF_NODE	302:40	302:40	6	)
LEAF_NODE	302:41	302:41	4	;
EXPR_STATEMENT	303:4	303:45	3	XtSetArg ( args [ 1 ] , XtNcolormap , xColormap ) ;
EXPR	303:4	303:4	4	XtSetArg ( args [ 1 ] , XtNcolormap , xColormap )
FUNCTION_CALL	303:4	303:44	5	XtSetArg ( args [ 1 ] , XtNcolormap , xColormap )
CALLEE	303:4	303:4	6	XtSetArg
LEAF_NODE	303:4	303:4	7	XtSetArg
LEAF_NODE	303:12	303:12	6	(
ARGUMENT	303:13	303:13	6	args [ 1 ]
FIELD	303:13	303:19	7	args [ 1 ]
LEAF_NODE	303:13	303:13	8	args
LEAF_NODE	303:17	303:17	8	[
EXPR	303:18	303:18	8	1
FIELD	303:18	303:18	9	1
LEAF_NODE	303:18	303:18	10	1
LEAF_NODE	303:19	303:19	8	]
LEAF_NODE	303:20	303:20	6	,
ARGUMENT	303:22	303:22	6	XtNcolormap
FIELD	303:22	303:22	7	XtNcolormap
LEAF_NODE	303:22	303:22	8	XtNcolormap
LEAF_NODE	303:33	303:33	6	,
ARGUMENT	303:35	303:35	6	xColormap
FIELD	303:35	303:35	7	xColormap
LEAF_NODE	303:35	303:35	8	xColormap
LEAF_NODE	303:44	303:44	6	)
LEAF_NODE	303:45	303:45	4	;
EXPR_STATEMENT	304:4	305:73	3	XtSetArg ( args [ 2 ] , XtNdepth , xImageDepth == 1 ? DefaultDepth ( xDisplay , xScreen ) : xImageDepth ) ;
EXPR	304:4	304:4	4	XtSetArg ( args [ 2 ] , XtNdepth , xImageDepth == 1 ? DefaultDepth ( xDisplay , xScreen ) : xImageDepth )
FUNCTION_CALL	304:4	305:72	5	XtSetArg ( args [ 2 ] , XtNdepth , xImageDepth == 1 ? DefaultDepth ( xDisplay , xScreen ) : xImageDepth )
CALLEE	304:4	304:4	6	XtSetArg
LEAF_NODE	304:4	304:4	7	XtSetArg
LEAF_NODE	304:12	304:12	6	(
ARGUMENT	304:13	304:13	6	args [ 2 ]
FIELD	304:13	304:19	7	args [ 2 ]
LEAF_NODE	304:13	304:13	8	args
LEAF_NODE	304:17	304:17	8	[
EXPR	304:18	304:18	8	2
FIELD	304:18	304:18	9	2
LEAF_NODE	304:18	304:18	10	2
LEAF_NODE	304:19	304:19	8	]
LEAF_NODE	304:20	304:20	6	,
ARGUMENT	304:22	304:22	6	XtNdepth
FIELD	304:22	304:22	7	XtNdepth
LEAF_NODE	304:22	304:22	8	XtNdepth
LEAF_NODE	304:30	304:30	6	,
ARGUMENT	305:8	305:8	6	xImageDepth == 1 ? DefaultDepth ( xDisplay , xScreen ) : xImageDepth
COND_EXPR	305:8	305:61	7	xImageDepth == 1 ? DefaultDepth ( xDisplay , xScreen ) : xImageDepth
CONDITION	305:8	305:23	8	xImageDepth == 1
FIELD	305:8	305:8	9	xImageDepth
LEAF_NODE	305:8	305:8	10	xImageDepth
EQ_OPERATOR	305:20	305:20	9	==
LEAF_NODE	305:20	305:20	10	==
FIELD	305:23	305:23	9	1
LEAF_NODE	305:23	305:23	10	1
LEAF_NODE	305:25	305:25	8	?
EXPR	305:27	305:27	8	DefaultDepth ( xDisplay , xScreen )
FUNCTION_CALL	305:27	305:57	9	DefaultDepth ( xDisplay , xScreen )
CALLEE	305:27	305:27	10	DefaultDepth
LEAF_NODE	305:27	305:27	11	DefaultDepth
LEAF_NODE	305:39	305:39	10	(
ARGUMENT	305:40	305:40	10	xDisplay
FIELD	305:40	305:40	11	xDisplay
LEAF_NODE	305:40	305:40	12	xDisplay
LEAF_NODE	305:48	305:48	10	,
ARGUMENT	305:50	305:50	10	xScreen
FIELD	305:50	305:50	11	xScreen
LEAF_NODE	305:50	305:50	12	xScreen
LEAF_NODE	305:57	305:57	10	)
LEAF_NODE	305:59	305:59	8	:
FIELD	305:61	305:61	8	xImageDepth
LEAF_NODE	305:61	305:61	9	xImageDepth
LEAF_NODE	305:72	305:72	6	)
LEAF_NODE	305:73	305:73	4	;
EXPR_STATEMENT	306:4	308:63	3	XtSetArg ( args [ 3 ] , XtNiconPixmap , XCreateBitmapFromData ( xDisplay , RootWindow ( xDisplay , xScreen ) , xtifficon_bits , xtifficon_width , xtifficon_height ) ) ;
EXPR	306:4	306:4	4	XtSetArg ( args [ 3 ] , XtNiconPixmap , XCreateBitmapFromData ( xDisplay , RootWindow ( xDisplay , xScreen ) , xtifficon_bits , xtifficon_width , xtifficon_height ) )
FUNCTION_CALL	306:4	308:62	5	XtSetArg ( args [ 3 ] , XtNiconPixmap , XCreateBitmapFromData ( xDisplay , RootWindow ( xDisplay , xScreen ) , xtifficon_bits , xtifficon_width , xtifficon_height ) )
CALLEE	306:4	306:4	6	XtSetArg
LEAF_NODE	306:4	306:4	7	XtSetArg
LEAF_NODE	306:12	306:12	6	(
ARGUMENT	306:13	306:13	6	args [ 3 ]
FIELD	306:13	306:19	7	args [ 3 ]
LEAF_NODE	306:13	306:13	8	args
LEAF_NODE	306:17	306:17	8	[
EXPR	306:18	306:18	8	3
FIELD	306:18	306:18	9	3
LEAF_NODE	306:18	306:18	10	3
LEAF_NODE	306:19	306:19	8	]
LEAF_NODE	306:20	306:20	6	,
ARGUMENT	306:22	306:22	6	XtNiconPixmap
FIELD	306:22	306:22	7	XtNiconPixmap
LEAF_NODE	306:22	306:22	8	XtNiconPixmap
LEAF_NODE	306:35	306:35	6	,
ARGUMENT	307:8	307:8	6	XCreateBitmapFromData ( xDisplay , RootWindow ( xDisplay , xScreen ) , xtifficon_bits , xtifficon_width , xtifficon_height )
FUNCTION_CALL	307:8	308:61	7	XCreateBitmapFromData ( xDisplay , RootWindow ( xDisplay , xScreen ) , xtifficon_bits , xtifficon_width , xtifficon_height )
CALLEE	307:8	307:8	8	XCreateBitmapFromData
LEAF_NODE	307:8	307:8	9	XCreateBitmapFromData
LEAF_NODE	307:29	307:29	8	(
ARGUMENT	307:30	307:30	8	xDisplay
FIELD	307:30	307:30	9	xDisplay
LEAF_NODE	307:30	307:30	10	xDisplay
LEAF_NODE	307:38	307:38	8	,
ARGUMENT	307:40	307:40	8	RootWindow ( xDisplay , xScreen )
FUNCTION_CALL	307:40	307:68	9	RootWindow ( xDisplay , xScreen )
CALLEE	307:40	307:40	10	RootWindow
LEAF_NODE	307:40	307:40	11	RootWindow
LEAF_NODE	307:50	307:50	10	(
ARGUMENT	307:51	307:51	10	xDisplay
FIELD	307:51	307:51	11	xDisplay
LEAF_NODE	307:51	307:51	12	xDisplay
LEAF_NODE	307:59	307:59	10	,
ARGUMENT	307:61	307:61	10	xScreen
FIELD	307:61	307:61	11	xScreen
LEAF_NODE	307:61	307:61	12	xScreen
LEAF_NODE	307:68	307:68	10	)
LEAF_NODE	307:69	307:69	8	,
ARGUMENT	308:12	308:12	8	xtifficon_bits
FIELD	308:12	308:12	9	xtifficon_bits
LEAF_NODE	308:12	308:12	10	xtifficon_bits
LEAF_NODE	308:26	308:26	8	,
ARGUMENT	308:28	308:28	8	xtifficon_width
FIELD	308:28	308:28	9	xtifficon_width
LEAF_NODE	308:28	308:28	10	xtifficon_width
LEAF_NODE	308:43	308:43	8	,
ARGUMENT	308:45	308:45	8	xtifficon_height
FIELD	308:45	308:45	9	xtifficon_height
LEAF_NODE	308:45	308:45	10	xtifficon_height
LEAF_NODE	308:61	308:61	8	)
LEAF_NODE	308:62	308:62	6	)
LEAF_NODE	308:63	308:63	4	;
EXPR_STATEMENT	309:4	309:48	3	XtSetArg ( args [ 4 ] , XtNallowShellResize , True ) ;
EXPR	309:4	309:4	4	XtSetArg ( args [ 4 ] , XtNallowShellResize , True )
FUNCTION_CALL	309:4	309:47	5	XtSetArg ( args [ 4 ] , XtNallowShellResize , True )
CALLEE	309:4	309:4	6	XtSetArg
LEAF_NODE	309:4	309:4	7	XtSetArg
LEAF_NODE	309:12	309:12	6	(
ARGUMENT	309:13	309:13	6	args [ 4 ]
FIELD	309:13	309:19	7	args [ 4 ]
LEAF_NODE	309:13	309:13	8	args
LEAF_NODE	309:17	309:17	8	[
EXPR	309:18	309:18	8	4
FIELD	309:18	309:18	9	4
LEAF_NODE	309:18	309:18	10	4
LEAF_NODE	309:19	309:19	8	]
LEAF_NODE	309:20	309:20	6	,
ARGUMENT	309:22	309:22	6	XtNallowShellResize
FIELD	309:22	309:22	7	XtNallowShellResize
LEAF_NODE	309:22	309:22	8	XtNallowShellResize
LEAF_NODE	309:41	309:41	6	,
ARGUMENT	309:43	309:43	6	True
FIELD	309:43	309:43	7	True
LEAF_NODE	309:43	309:43	8	True
LEAF_NODE	309:47	309:47	6	)
LEAF_NODE	309:48	309:48	4	;
EXPR_STATEMENT	310:4	310:37	3	XtSetValues ( shellWidget , args , 5 ) ;
EXPR	310:4	310:4	4	XtSetValues ( shellWidget , args , 5 )
FUNCTION_CALL	310:4	310:36	5	XtSetValues ( shellWidget , args , 5 )
CALLEE	310:4	310:4	6	XtSetValues
LEAF_NODE	310:4	310:4	7	XtSetValues
LEAF_NODE	310:15	310:15	6	(
ARGUMENT	310:16	310:16	6	shellWidget
FIELD	310:16	310:16	7	shellWidget
LEAF_NODE	310:16	310:16	8	shellWidget
LEAF_NODE	310:27	310:27	6	,
ARGUMENT	310:29	310:29	6	args
FIELD	310:29	310:29	7	args
LEAF_NODE	310:29	310:29	8	args
LEAF_NODE	310:33	310:33	6	,
ARGUMENT	310:35	310:35	6	5
FIELD	310:35	310:35	7	5
LEAF_NODE	310:35	310:35	8	5
LEAF_NODE	310:36	310:36	6	)
LEAF_NODE	310:37	310:37	4	;
EXPR_STATEMENT	315:4	316:50	3	formWidget = XtCreateManagedWidget ( "form" , formWidgetClass , shellWidget , formArgs , XtNumber ( formArgs ) ) ;
EXPR	315:4	315:4	4	formWidget = XtCreateManagedWidget ( "form" , formWidgetClass , shellWidget , formArgs , XtNumber ( formArgs ) )
ASSIGN	315:4	315:17	5	formWidget = XtCreateManagedWidget ( "form" , formWidgetClass , shellWidget , formArgs , XtNumber ( formArgs ) )
LVAL	315:4	315:4	6	formWidget
FIELD	315:4	315:4	7	formWidget
LEAF_NODE	315:4	315:4	8	formWidget
ASSIGN_OP	315:15	315:15	6	=
LEAF_NODE	315:15	315:15	7	=
RVAL	315:17	315:17	6	XtCreateManagedWidget ( "form" , formWidgetClass , shellWidget , formArgs , XtNumber ( formArgs ) )
FUNCTION_CALL	315:17	316:49	7	XtCreateManagedWidget ( "form" , formWidgetClass , shellWidget , formArgs , XtNumber ( formArgs ) )
CALLEE	315:17	315:17	8	XtCreateManagedWidget
LEAF_NODE	315:17	315:17	9	XtCreateManagedWidget
LEAF_NODE	315:38	315:38	8	(
ARGUMENT	315:39	315:39	8	"form"
FIELD	315:39	315:39	9	"form"
LEAF_NODE	315:39	315:39	10	"form"
LEAF_NODE	315:45	315:45	8	,
ARGUMENT	315:47	315:47	8	formWidgetClass
FIELD	315:47	315:47	9	formWidgetClass
LEAF_NODE	315:47	315:47	10	formWidgetClass
LEAF_NODE	315:62	315:62	8	,
ARGUMENT	316:8	316:8	8	shellWidget
FIELD	316:8	316:8	9	shellWidget
LEAF_NODE	316:8	316:8	10	shellWidget
LEAF_NODE	316:19	316:19	8	,
ARGUMENT	316:21	316:21	8	formArgs
FIELD	316:21	316:21	9	formArgs
LEAF_NODE	316:21	316:21	10	formArgs
LEAF_NODE	316:29	316:29	8	,
ARGUMENT	316:31	316:31	8	XtNumber ( formArgs )
FUNCTION_CALL	316:31	316:48	9	XtNumber ( formArgs )
CALLEE	316:31	316:31	10	XtNumber
LEAF_NODE	316:31	316:31	11	XtNumber
LEAF_NODE	316:39	316:39	10	(
ARGUMENT	316:40	316:40	10	formArgs
FIELD	316:40	316:40	11	formArgs
LEAF_NODE	316:40	316:40	12	formArgs
LEAF_NODE	316:48	316:48	10	)
LEAF_NODE	316:49	316:49	8	)
LEAF_NODE	316:50	316:50	4	;
EXPR_STATEMENT	318:8	319:70	3	widget_list [ 0 ] = listWidget = XtCreateWidget ( "list" , listWidgetClass , formWidget , listArgs , XtNumber ( listArgs ) ) ;
EXPR	318:8	318:8	4	widget_list [ 0 ] = listWidget = XtCreateWidget ( "list" , listWidgetClass , formWidget , listArgs , XtNumber ( listArgs ) )
ASSIGN	318:8	318:25	5	widget_list [ 0 ] = listWidget = XtCreateWidget ( "list" , listWidgetClass , formWidget , listArgs , XtNumber ( listArgs ) )
LVAL	318:8	318:8	6	widget_list [ 0 ]
FIELD	318:8	318:21	7	widget_list [ 0 ]
LEAF_NODE	318:8	318:8	8	widget_list
LEAF_NODE	318:19	318:19	8	[
EXPR	318:20	318:20	8	0
FIELD	318:20	318:20	9	0
LEAF_NODE	318:20	318:20	10	0
LEAF_NODE	318:21	318:21	8	]
ASSIGN_OP	318:23	318:23	6	=
LEAF_NODE	318:23	318:23	7	=
RVAL	318:25	318:25	6	listWidget = XtCreateWidget ( "list" , listWidgetClass , formWidget , listArgs , XtNumber ( listArgs ) )
ASSIGN	318:25	318:38	7	listWidget = XtCreateWidget ( "list" , listWidgetClass , formWidget , listArgs , XtNumber ( listArgs ) )
LVAL	318:25	318:25	8	listWidget
FIELD	318:25	318:25	9	listWidget
LEAF_NODE	318:25	318:25	10	listWidget
ASSIGN_OP	318:36	318:36	8	=
LEAF_NODE	318:36	318:36	9	=
RVAL	318:38	318:38	8	XtCreateWidget ( "list" , listWidgetClass , formWidget , listArgs , XtNumber ( listArgs ) )
FUNCTION_CALL	318:38	319:69	9	XtCreateWidget ( "list" , listWidgetClass , formWidget , listArgs , XtNumber ( listArgs ) )
CALLEE	318:38	318:38	10	XtCreateWidget
LEAF_NODE	318:38	318:38	11	XtCreateWidget
LEAF_NODE	318:52	318:52	10	(
ARGUMENT	318:53	318:53	10	"list"
FIELD	318:53	318:53	11	"list"
LEAF_NODE	318:53	318:53	12	"list"
LEAF_NODE	318:59	318:59	10	,
ARGUMENT	319:12	319:12	10	listWidgetClass
FIELD	319:12	319:12	11	listWidgetClass
LEAF_NODE	319:12	319:12	12	listWidgetClass
LEAF_NODE	319:27	319:27	10	,
ARGUMENT	319:29	319:29	10	formWidget
FIELD	319:29	319:29	11	formWidget
LEAF_NODE	319:29	319:29	12	formWidget
LEAF_NODE	319:39	319:39	10	,
ARGUMENT	319:41	319:41	10	listArgs
FIELD	319:41	319:41	11	listArgs
LEAF_NODE	319:41	319:41	12	listArgs
LEAF_NODE	319:49	319:49	10	,
ARGUMENT	319:51	319:51	10	XtNumber ( listArgs )
FUNCTION_CALL	319:51	319:68	11	XtNumber ( listArgs )
CALLEE	319:51	319:51	12	XtNumber
LEAF_NODE	319:51	319:51	13	XtNumber
LEAF_NODE	319:59	319:59	12	(
ARGUMENT	319:60	319:60	12	listArgs
FIELD	319:60	319:60	13	listArgs
LEAF_NODE	319:60	319:60	14	listArgs
LEAF_NODE	319:68	319:68	12	)
LEAF_NODE	319:69	319:69	10	)
LEAF_NODE	319:70	319:70	4	;
EXPR_STATEMENT	321:8	322:73	3	widget_list [ 1 ] = labelWidget = XtCreateWidget ( "label" , labelWidgetClass , formWidget , labelArgs , XtNumber ( labelArgs ) ) ;
EXPR	321:8	321:8	4	widget_list [ 1 ] = labelWidget = XtCreateWidget ( "label" , labelWidgetClass , formWidget , labelArgs , XtNumber ( labelArgs ) )
ASSIGN	321:8	321:25	5	widget_list [ 1 ] = labelWidget = XtCreateWidget ( "label" , labelWidgetClass , formWidget , labelArgs , XtNumber ( labelArgs ) )
LVAL	321:8	321:8	6	widget_list [ 1 ]
FIELD	321:8	321:21	7	widget_list [ 1 ]
LEAF_NODE	321:8	321:8	8	widget_list
LEAF_NODE	321:19	321:19	8	[
EXPR	321:20	321:20	8	1
FIELD	321:20	321:20	9	1
LEAF_NODE	321:20	321:20	10	1
LEAF_NODE	321:21	321:21	8	]
ASSIGN_OP	321:23	321:23	6	=
LEAF_NODE	321:23	321:23	7	=
RVAL	321:25	321:25	6	labelWidget = XtCreateWidget ( "label" , labelWidgetClass , formWidget , labelArgs , XtNumber ( labelArgs ) )
ASSIGN	321:25	321:39	7	labelWidget = XtCreateWidget ( "label" , labelWidgetClass , formWidget , labelArgs , XtNumber ( labelArgs ) )
LVAL	321:25	321:25	8	labelWidget
FIELD	321:25	321:25	9	labelWidget
LEAF_NODE	321:25	321:25	10	labelWidget
ASSIGN_OP	321:37	321:37	8	=
LEAF_NODE	321:37	321:37	9	=
RVAL	321:39	321:39	8	XtCreateWidget ( "label" , labelWidgetClass , formWidget , labelArgs , XtNumber ( labelArgs ) )
FUNCTION_CALL	321:39	322:72	9	XtCreateWidget ( "label" , labelWidgetClass , formWidget , labelArgs , XtNumber ( labelArgs ) )
CALLEE	321:39	321:39	10	XtCreateWidget
LEAF_NODE	321:39	321:39	11	XtCreateWidget
LEAF_NODE	321:53	321:53	10	(
ARGUMENT	321:54	321:54	10	"label"
FIELD	321:54	321:54	11	"label"
LEAF_NODE	321:54	321:54	12	"label"
LEAF_NODE	321:61	321:61	10	,
ARGUMENT	322:12	322:12	10	labelWidgetClass
FIELD	322:12	322:12	11	labelWidgetClass
LEAF_NODE	322:12	322:12	12	labelWidgetClass
LEAF_NODE	322:28	322:28	10	,
ARGUMENT	322:30	322:30	10	formWidget
FIELD	322:30	322:30	11	formWidget
LEAF_NODE	322:30	322:30	12	formWidget
LEAF_NODE	322:40	322:40	10	,
ARGUMENT	322:42	322:42	10	labelArgs
FIELD	322:42	322:42	11	labelArgs
LEAF_NODE	322:42	322:42	12	labelArgs
LEAF_NODE	322:51	322:51	10	,
ARGUMENT	322:53	322:53	10	XtNumber ( labelArgs )
FUNCTION_CALL	322:53	322:71	11	XtNumber ( labelArgs )
CALLEE	322:53	322:53	12	XtNumber
LEAF_NODE	322:53	322:53	13	XtNumber
LEAF_NODE	322:61	322:61	12	(
ARGUMENT	322:62	322:62	12	labelArgs
FIELD	322:62	322:62	13	labelArgs
LEAF_NODE	322:62	322:62	14	labelArgs
LEAF_NODE	322:71	322:71	12	)
LEAF_NODE	322:72	322:72	10	)
LEAF_NODE	322:73	322:73	4	;
EXPR_STATEMENT	324:8	325:68	3	widget_list [ 2 ] = imageWidget = XtCreateWidget ( "image" , widgetClass , formWidget , imageArgs , XtNumber ( imageArgs ) ) ;
EXPR	324:8	324:8	4	widget_list [ 2 ] = imageWidget = XtCreateWidget ( "image" , widgetClass , formWidget , imageArgs , XtNumber ( imageArgs ) )
ASSIGN	324:8	324:25	5	widget_list [ 2 ] = imageWidget = XtCreateWidget ( "image" , widgetClass , formWidget , imageArgs , XtNumber ( imageArgs ) )
LVAL	324:8	324:8	6	widget_list [ 2 ]
FIELD	324:8	324:21	7	widget_list [ 2 ]
LEAF_NODE	324:8	324:8	8	widget_list
LEAF_NODE	324:19	324:19	8	[
EXPR	324:20	324:20	8	2
FIELD	324:20	324:20	9	2
LEAF_NODE	324:20	324:20	10	2
LEAF_NODE	324:21	324:21	8	]
ASSIGN_OP	324:23	324:23	6	=
LEAF_NODE	324:23	324:23	7	=
RVAL	324:25	324:25	6	imageWidget = XtCreateWidget ( "image" , widgetClass , formWidget , imageArgs , XtNumber ( imageArgs ) )
ASSIGN	324:25	324:39	7	imageWidget = XtCreateWidget ( "image" , widgetClass , formWidget , imageArgs , XtNumber ( imageArgs ) )
LVAL	324:25	324:25	8	imageWidget
FIELD	324:25	324:25	9	imageWidget
LEAF_NODE	324:25	324:25	10	imageWidget
ASSIGN_OP	324:37	324:37	8	=
LEAF_NODE	324:37	324:37	9	=
RVAL	324:39	324:39	8	XtCreateWidget ( "image" , widgetClass , formWidget , imageArgs , XtNumber ( imageArgs ) )
FUNCTION_CALL	324:39	325:67	9	XtCreateWidget ( "image" , widgetClass , formWidget , imageArgs , XtNumber ( imageArgs ) )
CALLEE	324:39	324:39	10	XtCreateWidget
LEAF_NODE	324:39	324:39	11	XtCreateWidget
LEAF_NODE	324:53	324:53	10	(
ARGUMENT	324:54	324:54	10	"image"
FIELD	324:54	324:54	11	"image"
LEAF_NODE	324:54	324:54	12	"image"
LEAF_NODE	324:61	324:61	10	,
ARGUMENT	325:12	325:12	10	widgetClass
FIELD	325:12	325:12	11	widgetClass
LEAF_NODE	325:12	325:12	12	widgetClass
LEAF_NODE	325:23	325:23	10	,
ARGUMENT	325:25	325:25	10	formWidget
FIELD	325:25	325:25	11	formWidget
LEAF_NODE	325:25	325:25	12	formWidget
LEAF_NODE	325:35	325:35	10	,
ARGUMENT	325:37	325:37	10	imageArgs
FIELD	325:37	325:37	11	imageArgs
LEAF_NODE	325:37	325:37	12	imageArgs
LEAF_NODE	325:46	325:46	10	,
ARGUMENT	325:48	325:48	10	XtNumber ( imageArgs )
FUNCTION_CALL	325:48	325:66	11	XtNumber ( imageArgs )
CALLEE	325:48	325:48	12	XtNumber
LEAF_NODE	325:48	325:48	13	XtNumber
LEAF_NODE	325:56	325:56	12	(
ARGUMENT	325:57	325:57	12	imageArgs
FIELD	325:57	325:57	13	imageArgs
LEAF_NODE	325:57	325:57	14	imageArgs
LEAF_NODE	325:66	325:66	12	)
LEAF_NODE	325:67	325:67	10	)
LEAF_NODE	325:68	325:68	4	;
EXPR_STATEMENT	327:4	327:56	3	XtManageChildren ( widget_list , XtNumber ( widget_list ) ) ;
EXPR	327:4	327:4	4	XtManageChildren ( widget_list , XtNumber ( widget_list ) )
FUNCTION_CALL	327:4	327:55	5	XtManageChildren ( widget_list , XtNumber ( widget_list ) )
CALLEE	327:4	327:4	6	XtManageChildren
LEAF_NODE	327:4	327:4	7	XtManageChildren
LEAF_NODE	327:20	327:20	6	(
ARGUMENT	327:21	327:21	6	widget_list
FIELD	327:21	327:21	7	widget_list
LEAF_NODE	327:21	327:21	8	widget_list
LEAF_NODE	327:32	327:32	6	,
ARGUMENT	327:34	327:34	6	XtNumber ( widget_list )
FUNCTION_CALL	327:34	327:54	7	XtNumber ( widget_list )
CALLEE	327:34	327:34	8	XtNumber
LEAF_NODE	327:34	327:34	9	XtNumber
LEAF_NODE	327:42	327:42	8	(
ARGUMENT	327:43	327:43	8	widget_list
FIELD	327:43	327:43	9	widget_list
LEAF_NODE	327:43	327:43	10	widget_list
LEAF_NODE	327:54	327:54	8	)
LEAF_NODE	327:55	327:55	6	)
LEAF_NODE	327:56	327:56	4	;
SELECTION	332:4	332:47	3	
KEYWORD	332:4	332:4	4	if
LEAF_NODE	332:4	332:4	5	if
LEAF_NODE	332:7	332:7	4	(
CONDITION	332:8	332:8	4	tfImageWidth >= appData . viewportWidth
EXPR	332:8	332:24	5	tfImageWidth >= appData . viewportWidth
FIELD	332:8	332:8	6	tfImageWidth
LEAF_NODE	332:8	332:8	7	tfImageWidth
REL_OPERATOR	332:21	332:21	6	>=
LEAF_NODE	332:21	332:21	7	>=
FIELD	332:24	332:32	6	appData . viewportWidth
LEAF_NODE	332:24	332:24	7	appData
LEAF_NODE	332:31	332:31	7	.
LEAF_NODE	332:32	332:32	7	viewportWidth
LEAF_NODE	332:45	332:45	4	)
STATEMENTS	332:47	335:4	4	
LEAF_NODE	332:47	332:47	5	{
STATEMENTS	333:8	334:8	5	
EXPR_STATEMENT	333:8	333:58	6	XtSetArg ( args [ 0 ] , XtNwidth , appData . viewportWidth ) ;
EXPR	333:8	333:8	7	XtSetArg ( args [ 0 ] , XtNwidth , appData . viewportWidth )
FUNCTION_CALL	333:8	333:57	8	XtSetArg ( args [ 0 ] , XtNwidth , appData . viewportWidth )
CALLEE	333:8	333:8	9	XtSetArg
LEAF_NODE	333:8	333:8	10	XtSetArg
LEAF_NODE	333:16	333:16	9	(
ARGUMENT	333:17	333:17	9	args [ 0 ]
FIELD	333:17	333:23	10	args [ 0 ]
LEAF_NODE	333:17	333:17	11	args
LEAF_NODE	333:21	333:21	11	[
EXPR	333:22	333:22	11	0
FIELD	333:22	333:22	12	0
LEAF_NODE	333:22	333:22	13	0
LEAF_NODE	333:23	333:23	11	]
LEAF_NODE	333:24	333:24	9	,
ARGUMENT	333:26	333:26	9	XtNwidth
FIELD	333:26	333:26	10	XtNwidth
LEAF_NODE	333:26	333:26	11	XtNwidth
LEAF_NODE	333:34	333:34	9	,
ARGUMENT	333:36	333:36	9	appData . viewportWidth
FIELD	333:36	333:44	10	appData . viewportWidth
LEAF_NODE	333:36	333:36	11	appData
LEAF_NODE	333:43	333:43	11	.
LEAF_NODE	333:44	333:44	11	viewportWidth
LEAF_NODE	333:57	333:57	9	)
LEAF_NODE	333:58	333:58	7	;
EXPR_STATEMENT	334:8	334:41	6	XtSetValues ( shellWidget , args , 1 ) ;
EXPR	334:8	334:8	7	XtSetValues ( shellWidget , args , 1 )
FUNCTION_CALL	334:8	334:40	8	XtSetValues ( shellWidget , args , 1 )
CALLEE	334:8	334:8	9	XtSetValues
LEAF_NODE	334:8	334:8	10	XtSetValues
LEAF_NODE	334:19	334:19	9	(
ARGUMENT	334:20	334:20	9	shellWidget
FIELD	334:20	334:20	10	shellWidget
LEAF_NODE	334:20	334:20	11	shellWidget
LEAF_NODE	334:31	334:31	9	,
ARGUMENT	334:33	334:33	9	args
FIELD	334:33	334:33	10	args
LEAF_NODE	334:33	334:33	11	args
LEAF_NODE	334:37	334:37	9	,
ARGUMENT	334:39	334:39	9	1
FIELD	334:39	334:39	10	1
LEAF_NODE	334:39	334:39	11	1
LEAF_NODE	334:40	334:40	9	)
LEAF_NODE	334:41	334:41	7	;
LEAF_NODE	335:4	335:4	5	}
SELECTION	336:4	336:49	3	
KEYWORD	336:4	336:4	4	if
LEAF_NODE	336:4	336:4	5	if
LEAF_NODE	336:7	336:7	4	(
CONDITION	336:8	336:8	4	tfImageHeight >= appData . viewportHeight
EXPR	336:8	336:25	5	tfImageHeight >= appData . viewportHeight
FIELD	336:8	336:8	6	tfImageHeight
LEAF_NODE	336:8	336:8	7	tfImageHeight
REL_OPERATOR	336:22	336:22	6	>=
LEAF_NODE	336:22	336:22	7	>=
FIELD	336:25	336:33	6	appData . viewportHeight
LEAF_NODE	336:25	336:25	7	appData
LEAF_NODE	336:32	336:32	7	.
LEAF_NODE	336:33	336:33	7	viewportHeight
LEAF_NODE	336:47	336:47	4	)
STATEMENTS	336:49	339:4	4	
LEAF_NODE	336:49	336:49	5	{
STATEMENTS	337:8	338:8	5	
EXPR_STATEMENT	337:8	337:60	6	XtSetArg ( args [ 0 ] , XtNheight , appData . viewportHeight ) ;
EXPR	337:8	337:8	7	XtSetArg ( args [ 0 ] , XtNheight , appData . viewportHeight )
FUNCTION_CALL	337:8	337:59	8	XtSetArg ( args [ 0 ] , XtNheight , appData . viewportHeight )
CALLEE	337:8	337:8	9	XtSetArg
LEAF_NODE	337:8	337:8	10	XtSetArg
LEAF_NODE	337:16	337:16	9	(
ARGUMENT	337:17	337:17	9	args [ 0 ]
FIELD	337:17	337:23	10	args [ 0 ]
LEAF_NODE	337:17	337:17	11	args
LEAF_NODE	337:21	337:21	11	[
EXPR	337:22	337:22	11	0
FIELD	337:22	337:22	12	0
LEAF_NODE	337:22	337:22	13	0
LEAF_NODE	337:23	337:23	11	]
LEAF_NODE	337:24	337:24	9	,
ARGUMENT	337:26	337:26	9	XtNheight
FIELD	337:26	337:26	10	XtNheight
LEAF_NODE	337:26	337:26	11	XtNheight
LEAF_NODE	337:35	337:35	9	,
ARGUMENT	337:37	337:37	9	appData . viewportHeight
FIELD	337:37	337:45	10	appData . viewportHeight
LEAF_NODE	337:37	337:37	11	appData
LEAF_NODE	337:44	337:44	11	.
LEAF_NODE	337:45	337:45	11	viewportHeight
LEAF_NODE	337:59	337:59	9	)
LEAF_NODE	337:60	337:60	7	;
EXPR_STATEMENT	338:8	338:41	6	XtSetValues ( shellWidget , args , 1 ) ;
EXPR	338:8	338:8	7	XtSetValues ( shellWidget , args , 1 )
FUNCTION_CALL	338:8	338:40	8	XtSetValues ( shellWidget , args , 1 )
CALLEE	338:8	338:8	9	XtSetValues
LEAF_NODE	338:8	338:8	10	XtSetValues
LEAF_NODE	338:19	338:19	9	(
ARGUMENT	338:20	338:20	9	shellWidget
FIELD	338:20	338:20	10	shellWidget
LEAF_NODE	338:20	338:20	11	shellWidget
LEAF_NODE	338:31	338:31	9	,
ARGUMENT	338:33	338:33	9	args
FIELD	338:33	338:33	10	args
LEAF_NODE	338:33	338:33	11	args
LEAF_NODE	338:37	338:37	9	,
ARGUMENT	338:39	338:39	9	1
FIELD	338:39	338:39	10	1
LEAF_NODE	338:39	338:39	11	1
LEAF_NODE	338:40	338:40	9	)
LEAF_NODE	338:41	338:41	7	;
LEAF_NODE	339:4	339:4	5	}
EXPR_STATEMENT	341:4	341:45	3	XtSetArg ( args [ 0 ] , XtNwidth , tfImageWidth ) ;
EXPR	341:4	341:4	4	XtSetArg ( args [ 0 ] , XtNwidth , tfImageWidth )
FUNCTION_CALL	341:4	341:44	5	XtSetArg ( args [ 0 ] , XtNwidth , tfImageWidth )
CALLEE	341:4	341:4	6	XtSetArg
LEAF_NODE	341:4	341:4	7	XtSetArg
LEAF_NODE	341:12	341:12	6	(
ARGUMENT	341:13	341:13	6	args [ 0 ]
FIELD	341:13	341:19	7	args [ 0 ]
LEAF_NODE	341:13	341:13	8	args
LEAF_NODE	341:17	341:17	8	[
EXPR	341:18	341:18	8	0
FIELD	341:18	341:18	9	0
LEAF_NODE	341:18	341:18	10	0
LEAF_NODE	341:19	341:19	8	]
LEAF_NODE	341:20	341:20	6	,
ARGUMENT	341:22	341:22	6	XtNwidth
FIELD	341:22	341:22	7	XtNwidth
LEAF_NODE	341:22	341:22	8	XtNwidth
LEAF_NODE	341:30	341:30	6	,
ARGUMENT	341:32	341:32	6	tfImageWidth
FIELD	341:32	341:32	7	tfImageWidth
LEAF_NODE	341:32	341:32	8	tfImageWidth
LEAF_NODE	341:44	341:44	6	)
LEAF_NODE	341:45	341:45	4	;
EXPR_STATEMENT	342:4	342:47	3	XtSetArg ( args [ 1 ] , XtNheight , tfImageHeight ) ;
EXPR	342:4	342:4	4	XtSetArg ( args [ 1 ] , XtNheight , tfImageHeight )
FUNCTION_CALL	342:4	342:46	5	XtSetArg ( args [ 1 ] , XtNheight , tfImageHeight )
CALLEE	342:4	342:4	6	XtSetArg
LEAF_NODE	342:4	342:4	7	XtSetArg
LEAF_NODE	342:12	342:12	6	(
ARGUMENT	342:13	342:13	6	args [ 1 ]
FIELD	342:13	342:19	7	args [ 1 ]
LEAF_NODE	342:13	342:13	8	args
LEAF_NODE	342:17	342:17	8	[
EXPR	342:18	342:18	8	1
FIELD	342:18	342:18	9	1
LEAF_NODE	342:18	342:18	10	1
LEAF_NODE	342:19	342:19	8	]
LEAF_NODE	342:20	342:20	6	,
ARGUMENT	342:22	342:22	6	XtNheight
FIELD	342:22	342:22	7	XtNheight
LEAF_NODE	342:22	342:22	8	XtNheight
LEAF_NODE	342:31	342:31	6	,
ARGUMENT	342:33	342:33	6	tfImageHeight
FIELD	342:33	342:33	7	tfImageHeight
LEAF_NODE	342:33	342:33	8	tfImageHeight
LEAF_NODE	342:46	342:46	6	)
LEAF_NODE	342:47	342:47	4	;
EXPR_STATEMENT	343:4	343:37	3	XtSetValues ( imageWidget , args , 2 ) ;
EXPR	343:4	343:4	4	XtSetValues ( imageWidget , args , 2 )
FUNCTION_CALL	343:4	343:36	5	XtSetValues ( imageWidget , args , 2 )
CALLEE	343:4	343:4	6	XtSetValues
LEAF_NODE	343:4	343:4	7	XtSetValues
LEAF_NODE	343:15	343:15	6	(
ARGUMENT	343:16	343:16	6	imageWidget
FIELD	343:16	343:16	7	imageWidget
LEAF_NODE	343:16	343:16	8	imageWidget
LEAF_NODE	343:27	343:27	6	,
ARGUMENT	343:29	343:29	6	args
FIELD	343:29	343:29	7	args
LEAF_NODE	343:29	343:29	8	args
LEAF_NODE	343:33	343:33	6	,
ARGUMENT	343:35	343:35	6	2
FIELD	343:35	343:35	7	2
LEAF_NODE	343:35	343:35	8	2
LEAF_NODE	343:36	343:36	6	)
LEAF_NODE	343:37	343:37	4	;
EXPR_STATEMENT	348:4	348:46	3	XtSetArg ( args [ 0 ] , XtNfromVert , listWidget ) ;
EXPR	348:4	348:4	4	XtSetArg ( args [ 0 ] , XtNfromVert , listWidget )
FUNCTION_CALL	348:4	348:45	5	XtSetArg ( args [ 0 ] , XtNfromVert , listWidget )
CALLEE	348:4	348:4	6	XtSetArg
LEAF_NODE	348:4	348:4	7	XtSetArg
LEAF_NODE	348:12	348:12	6	(
ARGUMENT	348:13	348:13	6	args [ 0 ]
FIELD	348:13	348:19	7	args [ 0 ]
LEAF_NODE	348:13	348:13	8	args
LEAF_NODE	348:17	348:17	8	[
EXPR	348:18	348:18	8	0
FIELD	348:18	348:18	9	0
LEAF_NODE	348:18	348:18	10	0
LEAF_NODE	348:19	348:19	8	]
LEAF_NODE	348:20	348:20	6	,
ARGUMENT	348:22	348:22	6	XtNfromVert
FIELD	348:22	348:22	7	XtNfromVert
LEAF_NODE	348:22	348:22	8	XtNfromVert
LEAF_NODE	348:33	348:33	6	,
ARGUMENT	348:35	348:35	6	listWidget
FIELD	348:35	348:35	7	listWidget
LEAF_NODE	348:35	348:35	8	listWidget
LEAF_NODE	348:45	348:45	6	)
LEAF_NODE	348:46	348:46	4	;
EXPR_STATEMENT	349:4	349:37	3	XtSetValues ( imageWidget , args , 1 ) ;
EXPR	349:4	349:4	4	XtSetValues ( imageWidget , args , 1 )
FUNCTION_CALL	349:4	349:36	5	XtSetValues ( imageWidget , args , 1 )
CALLEE	349:4	349:4	6	XtSetValues
LEAF_NODE	349:4	349:4	7	XtSetValues
LEAF_NODE	349:15	349:15	6	(
ARGUMENT	349:16	349:16	6	imageWidget
FIELD	349:16	349:16	7	imageWidget
LEAF_NODE	349:16	349:16	8	imageWidget
LEAF_NODE	349:27	349:27	6	,
ARGUMENT	349:29	349:29	6	args
FIELD	349:29	349:29	7	args
LEAF_NODE	349:29	349:29	8	args
LEAF_NODE	349:33	349:33	6	,
ARGUMENT	349:35	349:35	6	1
FIELD	349:35	349:35	7	1
LEAF_NODE	349:35	349:35	8	1
LEAF_NODE	349:36	349:36	6	)
LEAF_NODE	349:37	349:37	4	;
EXPR_STATEMENT	350:4	350:47	3	XtSetArg ( args [ 0 ] , XtNfromHoriz , listWidget ) ;
EXPR	350:4	350:4	4	XtSetArg ( args [ 0 ] , XtNfromHoriz , listWidget )
FUNCTION_CALL	350:4	350:46	5	XtSetArg ( args [ 0 ] , XtNfromHoriz , listWidget )
CALLEE	350:4	350:4	6	XtSetArg
LEAF_NODE	350:4	350:4	7	XtSetArg
LEAF_NODE	350:12	350:12	6	(
ARGUMENT	350:13	350:13	6	args [ 0 ]
FIELD	350:13	350:19	7	args [ 0 ]
LEAF_NODE	350:13	350:13	8	args
LEAF_NODE	350:17	350:17	8	[
EXPR	350:18	350:18	8	0
FIELD	350:18	350:18	9	0
LEAF_NODE	350:18	350:18	10	0
LEAF_NODE	350:19	350:19	8	]
LEAF_NODE	350:20	350:20	6	,
ARGUMENT	350:22	350:22	6	XtNfromHoriz
FIELD	350:22	350:22	7	XtNfromHoriz
LEAF_NODE	350:22	350:22	8	XtNfromHoriz
LEAF_NODE	350:34	350:34	6	,
ARGUMENT	350:36	350:36	6	listWidget
FIELD	350:36	350:36	7	listWidget
LEAF_NODE	350:36	350:36	8	listWidget
LEAF_NODE	350:46	350:46	6	)
LEAF_NODE	350:47	350:47	4	;
EXPR_STATEMENT	351:4	351:37	3	XtSetValues ( labelWidget , args , 1 ) ;
EXPR	351:4	351:4	4	XtSetValues ( labelWidget , args , 1 )
FUNCTION_CALL	351:4	351:36	5	XtSetValues ( labelWidget , args , 1 )
CALLEE	351:4	351:4	6	XtSetValues
LEAF_NODE	351:4	351:4	7	XtSetValues
LEAF_NODE	351:15	351:15	6	(
ARGUMENT	351:16	351:16	6	labelWidget
FIELD	351:16	351:16	7	labelWidget
LEAF_NODE	351:16	351:16	8	labelWidget
LEAF_NODE	351:27	351:27	6	,
ARGUMENT	351:29	351:29	6	args
FIELD	351:29	351:29	7	args
LEAF_NODE	351:29	351:29	8	args
LEAF_NODE	351:33	351:33	6	,
ARGUMENT	351:35	351:35	6	1
FIELD	351:35	351:35	7	1
LEAF_NODE	351:35	351:35	8	1
LEAF_NODE	351:36	351:36	6	)
LEAF_NODE	351:37	351:37	4	;
EXPR_STATEMENT	353:4	353:18	3	SetNameLabel ( ) ;
EXPR	353:4	353:4	4	SetNameLabel ( )
FUNCTION_CALL	353:4	353:17	5	SetNameLabel ( )
CALLEE	353:4	353:4	6	SetNameLabel
LEAF_NODE	353:4	353:4	7	SetNameLabel
LEAF_NODE	353:16	353:16	6	(
LEAF_NODE	353:17	353:17	6	)
LEAF_NODE	353:18	353:18	4	;
EXPR_STATEMENT	355:4	356:25	3	XtAddCallback ( listWidget , XtNcallback , ( XtCallbackProc ) SelectProc , ( XtPointer ) NULL ) ;
EXPR	355:4	355:4	4	XtAddCallback ( listWidget , XtNcallback , ( XtCallbackProc ) SelectProc , ( XtPointer ) NULL )
FUNCTION_CALL	355:4	356:24	5	XtAddCallback ( listWidget , XtNcallback , ( XtCallbackProc ) SelectProc , ( XtPointer ) NULL )
CALLEE	355:4	355:4	6	XtAddCallback
LEAF_NODE	355:4	355:4	7	XtAddCallback
LEAF_NODE	355:17	355:17	6	(
ARGUMENT	355:18	355:18	6	listWidget
FIELD	355:18	355:18	7	listWidget
LEAF_NODE	355:18	355:18	8	listWidget
LEAF_NODE	355:28	355:28	6	,
ARGUMENT	355:30	355:30	6	XtNcallback
FIELD	355:30	355:30	7	XtNcallback
LEAF_NODE	355:30	355:30	8	XtNcallback
LEAF_NODE	355:41	355:41	6	,
ARGUMENT	355:43	355:60	6	( XtCallbackProc ) SelectProc
LEAF_NODE	355:43	355:43	7	(
TYPE_NAME	355:44	355:44	7	XtCallbackProc
LEAF_NODE	355:44	355:44	8	XtCallbackProc
LEAF_NODE	355:58	355:58	7	)
FIELD	355:60	355:60	7	SelectProc
LEAF_NODE	355:60	355:60	8	SelectProc
LEAF_NODE	355:70	355:70	6	,
ARGUMENT	356:8	356:20	6	( XtPointer ) NULL
LEAF_NODE	356:8	356:8	7	(
TYPE_NAME	356:9	356:9	7	XtPointer
LEAF_NODE	356:9	356:9	8	XtPointer
LEAF_NODE	356:18	356:18	7	)
FIELD	356:20	356:20	7	NULL
LEAF_NODE	356:20	356:20	8	NULL
LEAF_NODE	356:24	356:24	6	)
LEAF_NODE	356:25	356:25	4	;
EXPR_STATEMENT	358:4	358:54	3	XtAddActions ( actionsTable , XtNumber ( actionsTable ) ) ;
EXPR	358:4	358:4	4	XtAddActions ( actionsTable , XtNumber ( actionsTable ) )
FUNCTION_CALL	358:4	358:53	5	XtAddActions ( actionsTable , XtNumber ( actionsTable ) )
CALLEE	358:4	358:4	6	XtAddActions
LEAF_NODE	358:4	358:4	7	XtAddActions
LEAF_NODE	358:16	358:16	6	(
ARGUMENT	358:17	358:17	6	actionsTable
FIELD	358:17	358:17	7	actionsTable
LEAF_NODE	358:17	358:17	8	actionsTable
LEAF_NODE	358:29	358:29	6	,
ARGUMENT	358:31	358:31	6	XtNumber ( actionsTable )
FUNCTION_CALL	358:31	358:52	7	XtNumber ( actionsTable )
CALLEE	358:31	358:31	8	XtNumber
LEAF_NODE	358:31	358:31	9	XtNumber
LEAF_NODE	358:39	358:39	8	(
ARGUMENT	358:40	358:40	8	actionsTable
FIELD	358:40	358:40	9	actionsTable
LEAF_NODE	358:40	358:40	10	actionsTable
LEAF_NODE	358:52	358:52	8	)
LEAF_NODE	358:53	358:53	6	)
LEAF_NODE	358:54	358:54	4	;
EXPR_STATEMENT	359:4	360:51	3	XtSetArg ( args [ 0 ] , XtNtranslations , XtParseTranslationTable ( translationsTable ) ) ;
EXPR	359:4	359:4	4	XtSetArg ( args [ 0 ] , XtNtranslations , XtParseTranslationTable ( translationsTable ) )
FUNCTION_CALL	359:4	360:50	5	XtSetArg ( args [ 0 ] , XtNtranslations , XtParseTranslationTable ( translationsTable ) )
CALLEE	359:4	359:4	6	XtSetArg
LEAF_NODE	359:4	359:4	7	XtSetArg
LEAF_NODE	359:12	359:12	6	(
ARGUMENT	359:13	359:13	6	args [ 0 ]
FIELD	359:13	359:19	7	args [ 0 ]
LEAF_NODE	359:13	359:13	8	args
LEAF_NODE	359:17	359:17	8	[
EXPR	359:18	359:18	8	0
FIELD	359:18	359:18	9	0
LEAF_NODE	359:18	359:18	10	0
LEAF_NODE	359:19	359:19	8	]
LEAF_NODE	359:20	359:20	6	,
ARGUMENT	359:22	359:22	6	XtNtranslations
FIELD	359:22	359:22	7	XtNtranslations
LEAF_NODE	359:22	359:22	8	XtNtranslations
LEAF_NODE	359:37	359:37	6	,
ARGUMENT	360:8	360:8	6	XtParseTranslationTable ( translationsTable )
FUNCTION_CALL	360:8	360:49	7	XtParseTranslationTable ( translationsTable )
CALLEE	360:8	360:8	8	XtParseTranslationTable
LEAF_NODE	360:8	360:8	9	XtParseTranslationTable
LEAF_NODE	360:31	360:31	8	(
ARGUMENT	360:32	360:32	8	translationsTable
FIELD	360:32	360:32	9	translationsTable
LEAF_NODE	360:32	360:32	10	translationsTable
LEAF_NODE	360:49	360:49	8	)
LEAF_NODE	360:50	360:50	6	)
LEAF_NODE	360:51	360:51	4	;
EXPR_STATEMENT	361:4	361:40	3	XtSetValues ( formWidget , & args [ 0 ] , 1 ) ;
EXPR	361:4	361:4	4	XtSetValues ( formWidget , & args [ 0 ] , 1 )
FUNCTION_CALL	361:4	361:39	5	XtSetValues ( formWidget , & args [ 0 ] , 1 )
CALLEE	361:4	361:4	6	XtSetValues
LEAF_NODE	361:4	361:4	7	XtSetValues
LEAF_NODE	361:15	361:15	6	(
ARGUMENT	361:16	361:16	6	formWidget
FIELD	361:16	361:16	7	formWidget
LEAF_NODE	361:16	361:16	8	formWidget
LEAF_NODE	361:26	361:26	6	,
ARGUMENT	361:28	361:28	6	& args [ 0 ]
UNARY_EXPR	361:28	361:29	7	& args [ 0 ]
UNARY_OPERATOR	361:28	361:28	8	&
LEAF_NODE	361:28	361:28	9	&
FIELD	361:29	361:35	8	args [ 0 ]
LEAF_NODE	361:29	361:29	9	args
LEAF_NODE	361:33	361:33	9	[
EXPR	361:34	361:34	9	0
FIELD	361:34	361:34	10	0
LEAF_NODE	361:34	361:34	11	0
LEAF_NODE	361:35	361:35	9	]
LEAF_NODE	361:36	361:36	6	,
ARGUMENT	361:38	361:38	6	1
FIELD	361:38	361:38	7	1
LEAF_NODE	361:38	361:38	8	1
LEAF_NODE	361:39	361:39	6	)
LEAF_NODE	361:40	361:40	4	;
EXPR_STATEMENT	362:4	362:41	3	XtSetValues ( imageWidget , & args [ 0 ] , 1 ) ;
EXPR	362:4	362:4	4	XtSetValues ( imageWidget , & args [ 0 ] , 1 )
FUNCTION_CALL	362:4	362:40	5	XtSetValues ( imageWidget , & args [ 0 ] , 1 )
CALLEE	362:4	362:4	6	XtSetValues
LEAF_NODE	362:4	362:4	7	XtSetValues
LEAF_NODE	362:15	362:15	6	(
ARGUMENT	362:16	362:16	6	imageWidget
FIELD	362:16	362:16	7	imageWidget
LEAF_NODE	362:16	362:16	8	imageWidget
LEAF_NODE	362:27	362:27	6	,
ARGUMENT	362:29	362:29	6	& args [ 0 ]
UNARY_EXPR	362:29	362:30	7	& args [ 0 ]
UNARY_OPERATOR	362:29	362:29	8	&
LEAF_NODE	362:29	362:29	9	&
FIELD	362:30	362:36	8	args [ 0 ]
LEAF_NODE	362:30	362:30	9	args
LEAF_NODE	362:34	362:34	9	[
EXPR	362:35	362:35	9	0
FIELD	362:35	362:35	10	0
LEAF_NODE	362:35	362:35	11	0
LEAF_NODE	362:36	362:36	9	]
LEAF_NODE	362:37	362:37	6	,
ARGUMENT	362:39	362:39	6	1
FIELD	362:39	362:39	7	1
LEAF_NODE	362:39	362:39	8	1
LEAF_NODE	362:40	362:40	6	)
LEAF_NODE	362:41	362:41	4	;
EXPR_STATEMENT	368:4	370:31	3	XtAddEventHandler ( imageWidget , ExposureMask | ButtonPressMask | ButtonReleaseMask | Button1MotionMask | KeyPressMask , False , EventProc , NULL ) ;
EXPR	368:4	368:4	4	XtAddEventHandler ( imageWidget , ExposureMask | ButtonPressMask | ButtonReleaseMask | Button1MotionMask | KeyPressMask , False , EventProc , NULL )
FUNCTION_CALL	368:4	370:30	5	XtAddEventHandler ( imageWidget , ExposureMask | ButtonPressMask | ButtonReleaseMask | Button1MotionMask | KeyPressMask , False , EventProc , NULL )
CALLEE	368:4	368:4	6	XtAddEventHandler
LEAF_NODE	368:4	368:4	7	XtAddEventHandler
LEAF_NODE	368:21	368:21	6	(
ARGUMENT	368:22	368:22	6	imageWidget
FIELD	368:22	368:22	7	imageWidget
LEAF_NODE	368:22	368:22	8	imageWidget
LEAF_NODE	368:33	368:33	6	,
ARGUMENT	368:35	368:35	6	ExposureMask | ButtonPressMask | ButtonReleaseMask | Button1MotionMask | KeyPressMask
BIT_OR	368:35	368:50	7	ExposureMask | ButtonPressMask | ButtonReleaseMask | Button1MotionMask | KeyPressMask
BIT_OR_ELEM	368:35	368:35	8	ExposureMask
FIELD	368:35	368:35	9	ExposureMask
LEAF_NODE	368:35	368:35	10	ExposureMask
LEAF_NODE	368:48	368:48	8	|
BIT_OR_ELEM	368:50	368:50	8	ButtonPressMask | ButtonReleaseMask | Button1MotionMask | KeyPressMask
BIT_OR	368:50	369:10	9	ButtonPressMask | ButtonReleaseMask | Button1MotionMask | KeyPressMask
BIT_OR_ELEM	368:50	368:50	10	ButtonPressMask
FIELD	368:50	368:50	11	ButtonPressMask
LEAF_NODE	368:50	368:50	12	ButtonPressMask
LEAF_NODE	369:8	369:8	10	|
BIT_OR_ELEM	369:10	369:10	10	ButtonReleaseMask | Button1MotionMask | KeyPressMask
BIT_OR	369:10	369:30	11	ButtonReleaseMask | Button1MotionMask | KeyPressMask
BIT_OR_ELEM	369:10	369:10	12	ButtonReleaseMask
FIELD	369:10	369:10	13	ButtonReleaseMask
LEAF_NODE	369:10	369:10	14	ButtonReleaseMask
LEAF_NODE	369:28	369:28	12	|
BIT_OR_ELEM	369:30	369:30	12	Button1MotionMask | KeyPressMask
BIT_OR	369:30	369:50	13	Button1MotionMask | KeyPressMask
BIT_OR_ELEM	369:30	369:30	14	Button1MotionMask
FIELD	369:30	369:30	15	Button1MotionMask
LEAF_NODE	369:30	369:30	16	Button1MotionMask
LEAF_NODE	369:48	369:48	14	|
BIT_OR_ELEM	369:50	369:50	14	KeyPressMask
FIELD	369:50	369:50	15	KeyPressMask
LEAF_NODE	369:50	369:50	16	KeyPressMask
LEAF_NODE	369:62	369:62	6	,
ARGUMENT	370:8	370:8	6	False
FIELD	370:8	370:8	7	False
LEAF_NODE	370:8	370:8	8	False
LEAF_NODE	370:13	370:13	6	,
ARGUMENT	370:15	370:15	6	EventProc
FIELD	370:15	370:15	7	EventProc
LEAF_NODE	370:15	370:15	8	EventProc
LEAF_NODE	370:24	370:24	6	,
ARGUMENT	370:26	370:26	6	NULL
FIELD	370:26	370:26	7	NULL
LEAF_NODE	370:26	370:26	8	NULL
LEAF_NODE	370:30	370:30	6	)
LEAF_NODE	370:31	370:31	4	;
EXPR_STATEMENT	372:4	372:32	3	XtRealizeWidget ( shellWidget ) ;
EXPR	372:4	372:4	4	XtRealizeWidget ( shellWidget )
FUNCTION_CALL	372:4	372:31	5	XtRealizeWidget ( shellWidget )
CALLEE	372:4	372:4	6	XtRealizeWidget
LEAF_NODE	372:4	372:4	7	XtRealizeWidget
LEAF_NODE	372:19	372:19	6	(
ARGUMENT	372:20	372:20	6	shellWidget
FIELD	372:20	372:20	7	shellWidget
LEAF_NODE	372:20	372:20	8	shellWidget
LEAF_NODE	372:31	372:31	6	)
LEAF_NODE	372:32	372:32	4	;
EXPR_STATEMENT	374:4	374:68	3	window_attributes . cursor = XCreateFontCursor ( xDisplay , XC_fleur ) ;
EXPR	374:4	374:4	4	window_attributes . cursor = XCreateFontCursor ( xDisplay , XC_fleur )
ASSIGN	374:4	374:31	5	window_attributes . cursor = XCreateFontCursor ( xDisplay , XC_fleur )
LVAL	374:4	374:4	6	window_attributes . cursor
FIELD	374:4	374:22	7	window_attributes . cursor
LEAF_NODE	374:4	374:4	8	window_attributes
LEAF_NODE	374:21	374:21	8	.
LEAF_NODE	374:22	374:22	8	cursor
ASSIGN_OP	374:29	374:29	6	=
LEAF_NODE	374:29	374:29	7	=
RVAL	374:31	374:31	6	XCreateFontCursor ( xDisplay , XC_fleur )
FUNCTION_CALL	374:31	374:67	7	XCreateFontCursor ( xDisplay , XC_fleur )
CALLEE	374:31	374:31	8	XCreateFontCursor
LEAF_NODE	374:31	374:31	9	XCreateFontCursor
LEAF_NODE	374:48	374:48	8	(
ARGUMENT	374:49	374:49	8	xDisplay
FIELD	374:49	374:49	9	xDisplay
LEAF_NODE	374:49	374:49	10	xDisplay
LEAF_NODE	374:57	374:57	8	,
ARGUMENT	374:59	374:59	8	XC_fleur
FIELD	374:59	374:59	9	XC_fleur
LEAF_NODE	374:59	374:59	10	XC_fleur
LEAF_NODE	374:67	374:67	8	)
LEAF_NODE	374:68	374:68	4	;
EXPR_STATEMENT	375:4	376:37	3	XChangeWindowAttributes ( xDisplay , XtWindow ( imageWidget ) , CWCursor , & window_attributes ) ;
EXPR	375:4	375:4	4	XChangeWindowAttributes ( xDisplay , XtWindow ( imageWidget ) , CWCursor , & window_attributes )
FUNCTION_CALL	375:4	376:36	5	XChangeWindowAttributes ( xDisplay , XtWindow ( imageWidget ) , CWCursor , & window_attributes )
CALLEE	375:4	375:4	6	XChangeWindowAttributes
LEAF_NODE	375:4	375:4	7	XChangeWindowAttributes
LEAF_NODE	375:27	375:27	6	(
ARGUMENT	375:28	375:28	6	xDisplay
FIELD	375:28	375:28	7	xDisplay
LEAF_NODE	375:28	375:28	8	xDisplay
LEAF_NODE	375:36	375:36	6	,
ARGUMENT	375:38	375:38	6	XtWindow ( imageWidget )
FUNCTION_CALL	375:38	375:58	7	XtWindow ( imageWidget )
CALLEE	375:38	375:38	8	XtWindow
LEAF_NODE	375:38	375:38	9	XtWindow
LEAF_NODE	375:46	375:46	8	(
ARGUMENT	375:47	375:47	8	imageWidget
FIELD	375:47	375:47	9	imageWidget
LEAF_NODE	375:47	375:47	10	imageWidget
LEAF_NODE	375:58	375:58	8	)
LEAF_NODE	375:59	375:59	6	,
ARGUMENT	376:8	376:8	6	CWCursor
FIELD	376:8	376:8	7	CWCursor
LEAF_NODE	376:8	376:8	8	CWCursor
LEAF_NODE	376:16	376:16	6	,
ARGUMENT	376:18	376:18	6	& window_attributes
UNARY_EXPR	376:18	376:19	7	& window_attributes
UNARY_OPERATOR	376:18	376:18	8	&
LEAF_NODE	376:18	376:18	9	&
FIELD	376:19	376:19	8	window_attributes
LEAF_NODE	376:19	376:19	9	window_attributes
LEAF_NODE	376:36	376:36	6	)
LEAF_NODE	376:37	376:37	4	;
EXPR_STATEMENT	378:4	378:18	3	CreateXImage ( ) ;
EXPR	378:4	378:4	4	CreateXImage ( )
FUNCTION_CALL	378:4	378:17	5	CreateXImage ( )
CALLEE	378:4	378:4	6	CreateXImage
LEAF_NODE	378:4	378:4	7	CreateXImage
LEAF_NODE	378:16	378:16	6	(
LEAF_NODE	378:17	378:17	6	)
LEAF_NODE	378:18	378:18	4	;
EXPR_STATEMENT	380:4	380:16	3	XtMainLoop ( ) ;
EXPR	380:4	380:4	4	XtMainLoop ( )
FUNCTION_CALL	380:4	380:15	5	XtMainLoop ( )
CALLEE	380:4	380:4	6	XtMainLoop
LEAF_NODE	380:4	380:4	7	XtMainLoop
LEAF_NODE	380:14	380:14	6	(
LEAF_NODE	380:15	380:15	6	)
LEAF_NODE	380:16	380:16	4	;
JUMP_STATEMENT	382:4	382:12	3	return 0 ;
KEYWORD	382:4	382:4	4	return
LEAF_NODE	382:4	382:4	5	return
DESTINATION	382:11	382:11	4	0
EXPR	382:11	382:11	5	0
FIELD	382:11	382:11	6	0
LEAF_NODE	382:11	382:11	7	0
LEAF_NODE	382:12	382:12	4	;
LEAF_NODE	383:0	383:0	2	}
FUNCTION_DEF	385:0	398:0	1	
RETURN_TYPE	385:0	385:0	2	void
TYPE_NAME	385:0	385:0	3	void
LEAF_NODE	385:0	385:0	4	void
FUNCTION_NAME	386:0	386:0	2	OpenTIFFFile
LEAF_NODE	386:0	386:0	3	OpenTIFFFile
PARAMETER_LIST	386:12	386:13	2	( )
LEAF_NODE	386:12	386:12	3	(
LEAF_NODE	386:13	386:13	3	)
LEAF_NODE	387:0	387:0	2	{
STATEMENTS	388:4	397:4	2	
SELECTION	388:4	389:8	3	
KEYWORD	388:4	388:4	4	if
LEAF_NODE	388:4	388:4	5	if
LEAF_NODE	388:7	388:7	4	(
CONDITION	388:8	388:8	4	tfFile != NULL
EXPR	388:8	388:18	5	tfFile != NULL
FIELD	388:8	388:8	6	tfFile
LEAF_NODE	388:8	388:8	7	tfFile
EQ_OPERATOR	388:15	388:15	6	!=
LEAF_NODE	388:15	388:15	7	!=
FIELD	388:18	388:18	6	NULL
LEAF_NODE	388:18	388:18	7	NULL
LEAF_NODE	388:22	388:22	4	)
STATEMENTS	389:8	389:8	4	
EXPR_STATEMENT	389:8	389:25	5	TIFFClose ( tfFile ) ;
EXPR	389:8	389:8	6	TIFFClose ( tfFile )
FUNCTION_CALL	389:8	389:24	7	TIFFClose ( tfFile )
CALLEE	389:8	389:8	8	TIFFClose
LEAF_NODE	389:8	389:8	9	TIFFClose
LEAF_NODE	389:17	389:17	8	(
ARGUMENT	389:18	389:18	8	tfFile
FIELD	389:18	389:18	9	tfFile
LEAF_NODE	389:18	389:18	10	tfFile
LEAF_NODE	389:24	389:24	8	)
LEAF_NODE	389:25	389:25	6	;
SELECTION	391:4	391:52	3	
KEYWORD	391:4	391:4	4	if
LEAF_NODE	391:4	391:4	5	if
LEAF_NODE	391:7	391:7	4	(
CONDITION	391:8	391:8	4	( tfFile = TIFFOpen ( fileName , "r" ) ) == NULL
EXPR	391:8	391:46	5	( tfFile = TIFFOpen ( fileName , "r" ) ) == NULL
LEAF_NODE	391:8	391:8	6	(
ASSIGN	391:9	391:18	6	tfFile = TIFFOpen ( fileName , "r" )
LVAL	391:9	391:9	7	tfFile
FIELD	391:9	391:9	8	tfFile
LEAF_NODE	391:9	391:9	9	tfFile
ASSIGN_OP	391:16	391:16	7	=
LEAF_NODE	391:16	391:16	8	=
RVAL	391:18	391:18	7	TIFFOpen ( fileName , "r" )
FUNCTION_CALL	391:18	391:40	8	TIFFOpen ( fileName , "r" )
CALLEE	391:18	391:18	9	TIFFOpen
LEAF_NODE	391:18	391:18	10	TIFFOpen
LEAF_NODE	391:26	391:26	9	(
ARGUMENT	391:27	391:27	9	fileName
FIELD	391:27	391:27	10	fileName
LEAF_NODE	391:27	391:27	11	fileName
LEAF_NODE	391:35	391:35	9	,
ARGUMENT	391:37	391:37	9	"r"
FIELD	391:37	391:37	10	"r"
LEAF_NODE	391:37	391:37	11	"r"
LEAF_NODE	391:40	391:40	9	)
LEAF_NODE	391:41	391:41	6	)
EQ_OPERATOR	391:43	391:43	6	==
LEAF_NODE	391:43	391:43	7	==
FIELD	391:46	391:46	6	NULL
LEAF_NODE	391:46	391:46	7	NULL
LEAF_NODE	391:50	391:50	4	)
STATEMENTS	391:52	395:4	4	
LEAF_NODE	391:52	391:52	5	{
STATEMENTS	392:1	394:8	5	
EXPR_STATEMENT	392:1	393:55	6	fprintf ( appData . verbose ? stderr : stdout , "xtiff: can't open %s as a TIFF file\n" , fileName ) ;
EXPR	392:1	392:1	7	fprintf ( appData . verbose ? stderr : stdout , "xtiff: can't open %s as a TIFF file\n" , fileName )
FUNCTION_CALL	392:1	393:54	8	fprintf ( appData . verbose ? stderr : stdout , "xtiff: can't open %s as a TIFF file\n" , fileName )
CALLEE	392:1	392:1	9	fprintf
LEAF_NODE	392:1	392:1	10	fprintf
LEAF_NODE	392:8	392:8	9	(
ARGUMENT	392:9	392:9	9	appData . verbose ? stderr : stdout
COND_EXPR	392:9	392:36	10	appData . verbose ? stderr : stdout
CONDITION	392:9	392:9	11	appData . verbose
FIELD	392:9	392:17	12	appData . verbose
LEAF_NODE	392:9	392:9	13	appData
LEAF_NODE	392:16	392:16	13	.
LEAF_NODE	392:17	392:17	13	verbose
LEAF_NODE	392:25	392:25	11	?
EXPR	392:27	392:27	11	stderr
FIELD	392:27	392:27	12	stderr
LEAF_NODE	392:27	392:27	13	stderr
LEAF_NODE	392:34	392:34	11	:
FIELD	392:36	392:36	11	stdout
LEAF_NODE	392:36	392:36	12	stdout
LEAF_NODE	392:42	392:42	9	,
ARGUMENT	393:5	393:5	9	"xtiff: can't open %s as a TIFF file\n"
FIELD	393:5	393:5	10	"xtiff: can't open %s as a TIFF file\n"
LEAF_NODE	393:5	393:5	11	"xtiff: can't open %s as a TIFF file\n"
LEAF_NODE	393:44	393:44	9	,
ARGUMENT	393:46	393:46	9	fileName
FIELD	393:46	393:46	10	fileName
LEAF_NODE	393:46	393:46	11	fileName
LEAF_NODE	393:54	393:54	9	)
LEAF_NODE	393:55	393:55	7	;
EXPR_STATEMENT	394:8	394:15	6	exit ( 0 ) ;
EXPR	394:8	394:8	7	exit ( 0 )
FUNCTION_CALL	394:8	394:14	8	exit ( 0 )
CALLEE	394:8	394:8	9	exit
LEAF_NODE	394:8	394:8	10	exit
LEAF_NODE	394:12	394:12	9	(
ARGUMENT	394:13	394:13	9	0
FIELD	394:13	394:13	10	0
LEAF_NODE	394:13	394:13	11	0
LEAF_NODE	394:14	394:14	9	)
LEAF_NODE	394:15	394:15	7	;
LEAF_NODE	395:4	395:4	5	}
EXPR_STATEMENT	397:4	397:60	3	tfMultiPage = ( TIFFLastDirectory ( tfFile ) ? False : True ) ;
EXPR	397:4	397:4	4	tfMultiPage = ( TIFFLastDirectory ( tfFile ) ? False : True )
ASSIGN	397:4	397:18	5	tfMultiPage = ( TIFFLastDirectory ( tfFile ) ? False : True )
LVAL	397:4	397:4	6	tfMultiPage
FIELD	397:4	397:4	7	tfMultiPage
LEAF_NODE	397:4	397:4	8	tfMultiPage
ASSIGN_OP	397:16	397:16	6	=
LEAF_NODE	397:16	397:16	7	=
RVAL	397:18	397:59	6	( TIFFLastDirectory ( tfFile ) ? False : True )
LEAF_NODE	397:18	397:18	7	(
COND_EXPR	397:19	397:55	7	TIFFLastDirectory ( tfFile ) ? False : True
CONDITION	397:19	397:19	8	TIFFLastDirectory ( tfFile )
FUNCTION_CALL	397:19	397:43	9	TIFFLastDirectory ( tfFile )
CALLEE	397:19	397:19	10	TIFFLastDirectory
LEAF_NODE	397:19	397:19	11	TIFFLastDirectory
LEAF_NODE	397:36	397:36	10	(
ARGUMENT	397:37	397:37	10	tfFile
FIELD	397:37	397:37	11	tfFile
LEAF_NODE	397:37	397:37	12	tfFile
LEAF_NODE	397:43	397:43	10	)
LEAF_NODE	397:45	397:45	8	?
EXPR	397:47	397:47	8	False
FIELD	397:47	397:47	9	False
LEAF_NODE	397:47	397:47	10	False
LEAF_NODE	397:53	397:53	8	:
FIELD	397:55	397:55	8	True
LEAF_NODE	397:55	397:55	9	True
LEAF_NODE	397:59	397:59	7	)
LEAF_NODE	397:60	397:60	4	;
LEAF_NODE	398:0	398:0	2	}
FUNCTION_DEF	400:0	504:0	1	
RETURN_TYPE	400:0	400:0	2	void
TYPE_NAME	400:0	400:0	3	void
LEAF_NODE	400:0	400:0	4	void
FUNCTION_NAME	401:0	401:0	2	GetTIFFHeader
LEAF_NODE	401:0	401:0	3	GetTIFFHeader
PARAMETER_LIST	401:13	401:14	2	( )
LEAF_NODE	401:13	401:13	3	(
LEAF_NODE	401:14	401:14	3	)
LEAF_NODE	402:0	402:0	2	{
STATEMENTS	403:4	452:4	2	
LEAF_NODE	403:4	403:4	3	register
SIMPLE_DECL	403:13	403:18	3	int i ;
VAR_DECL	403:13	403:17	4	int i
TYPE	403:13	403:13	5	int
TYPE_NAME	403:13	403:13	6	int
LEAF_NODE	403:13	403:13	7	int
NAME	403:17	403:17	5	i
LEAF_NODE	403:17	403:17	6	i
LEAF_NODE	403:18	403:18	4	;
SELECTION	405:4	405:48	3	
KEYWORD	405:4	405:4	4	if
LEAF_NODE	405:4	405:4	5	if
LEAF_NODE	405:7	405:7	4	(
CONDITION	405:8	405:8	4	! TIFFSetDirectory ( tfFile , tfDirectory )
EXPR	405:8	405:8	5	! TIFFSetDirectory ( tfFile , tfDirectory )
UNARY_EXPR	405:8	405:9	6	! TIFFSetDirectory ( tfFile , tfDirectory )
UNARY_OPERATOR	405:8	405:8	7	!
LEAF_NODE	405:8	405:8	8	!
FUNCTION_CALL	405:9	405:45	7	TIFFSetDirectory ( tfFile , tfDirectory )
CALLEE	405:9	405:9	8	TIFFSetDirectory
LEAF_NODE	405:9	405:9	9	TIFFSetDirectory
LEAF_NODE	405:25	405:25	8	(
ARGUMENT	405:26	405:26	8	tfFile
FIELD	405:26	405:26	9	tfFile
LEAF_NODE	405:26	405:26	10	tfFile
LEAF_NODE	405:32	405:32	8	,
ARGUMENT	405:34	405:34	8	tfDirectory
FIELD	405:34	405:34	9	tfDirectory
LEAF_NODE	405:34	405:34	10	tfDirectory
LEAF_NODE	405:45	405:45	8	)
LEAF_NODE	405:46	405:46	4	)
STATEMENTS	405:48	409:4	4	
LEAF_NODE	405:48	405:48	5	{
STATEMENTS	406:8	408:8	5	
EXPR_STATEMENT	406:8	407:34	6	fprintf ( stderr , "xtiff: can't seek to directory %d in %s\n" , tfDirectory , fileName ) ;
EXPR	406:8	406:8	7	fprintf ( stderr , "xtiff: can't seek to directory %d in %s\n" , tfDirectory , fileName )
FUNCTION_CALL	406:8	407:33	8	fprintf ( stderr , "xtiff: can't seek to directory %d in %s\n" , tfDirectory , fileName )
CALLEE	406:8	406:8	9	fprintf
LEAF_NODE	406:8	406:8	10	fprintf
LEAF_NODE	406:15	406:15	9	(
ARGUMENT	406:16	406:16	9	stderr
FIELD	406:16	406:16	10	stderr
LEAF_NODE	406:16	406:16	11	stderr
LEAF_NODE	406:22	406:22	9	,
ARGUMENT	406:24	406:24	9	"xtiff: can't seek to directory %d in %s\n"
FIELD	406:24	406:24	10	"xtiff: can't seek to directory %d in %s\n"
LEAF_NODE	406:24	406:24	11	"xtiff: can't seek to directory %d in %s\n"
LEAF_NODE	406:67	406:67	9	,
ARGUMENT	407:12	407:12	9	tfDirectory
FIELD	407:12	407:12	10	tfDirectory
LEAF_NODE	407:12	407:12	11	tfDirectory
LEAF_NODE	407:23	407:23	9	,
ARGUMENT	407:25	407:25	9	fileName
FIELD	407:25	407:25	10	fileName
LEAF_NODE	407:25	407:25	11	fileName
LEAF_NODE	407:33	407:33	9	)
LEAF_NODE	407:34	407:34	7	;
EXPR_STATEMENT	408:8	408:15	6	exit ( 0 ) ;
EXPR	408:8	408:8	7	exit ( 0 )
FUNCTION_CALL	408:8	408:14	8	exit ( 0 )
CALLEE	408:8	408:8	9	exit
LEAF_NODE	408:8	408:8	10	exit
LEAF_NODE	408:12	408:12	9	(
ARGUMENT	408:13	408:13	9	0
FIELD	408:13	408:13	10	0
LEAF_NODE	408:13	408:13	11	0
LEAF_NODE	408:14	408:14	9	)
LEAF_NODE	408:15	408:15	7	;
LEAF_NODE	409:4	409:4	5	}
EXPR_STATEMENT	411:4	411:59	3	TIFFGetField ( tfFile , TIFFTAG_IMAGEWIDTH , & tfImageWidth ) ;
EXPR	411:4	411:4	4	TIFFGetField ( tfFile , TIFFTAG_IMAGEWIDTH , & tfImageWidth )
FUNCTION_CALL	411:4	411:58	5	TIFFGetField ( tfFile , TIFFTAG_IMAGEWIDTH , & tfImageWidth )
CALLEE	411:4	411:4	6	TIFFGetField
LEAF_NODE	411:4	411:4	7	TIFFGetField
LEAF_NODE	411:16	411:16	6	(
ARGUMENT	411:17	411:17	6	tfFile
FIELD	411:17	411:17	7	tfFile
LEAF_NODE	411:17	411:17	8	tfFile
LEAF_NODE	411:23	411:23	6	,
ARGUMENT	411:25	411:25	6	TIFFTAG_IMAGEWIDTH
FIELD	411:25	411:25	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	411:25	411:25	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	411:43	411:43	6	,
ARGUMENT	411:45	411:45	6	& tfImageWidth
UNARY_EXPR	411:45	411:46	7	& tfImageWidth
UNARY_OPERATOR	411:45	411:45	8	&
LEAF_NODE	411:45	411:45	9	&
FIELD	411:46	411:46	8	tfImageWidth
LEAF_NODE	411:46	411:46	9	tfImageWidth
LEAF_NODE	411:58	411:58	6	)
LEAF_NODE	411:59	411:59	4	;
EXPR_STATEMENT	412:4	412:61	3	TIFFGetField ( tfFile , TIFFTAG_IMAGELENGTH , & tfImageHeight ) ;
EXPR	412:4	412:4	4	TIFFGetField ( tfFile , TIFFTAG_IMAGELENGTH , & tfImageHeight )
FUNCTION_CALL	412:4	412:60	5	TIFFGetField ( tfFile , TIFFTAG_IMAGELENGTH , & tfImageHeight )
CALLEE	412:4	412:4	6	TIFFGetField
LEAF_NODE	412:4	412:4	7	TIFFGetField
LEAF_NODE	412:16	412:16	6	(
ARGUMENT	412:17	412:17	6	tfFile
FIELD	412:17	412:17	7	tfFile
LEAF_NODE	412:17	412:17	8	tfFile
LEAF_NODE	412:23	412:23	6	,
ARGUMENT	412:25	412:25	6	TIFFTAG_IMAGELENGTH
FIELD	412:25	412:25	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	412:25	412:25	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	412:44	412:44	6	,
ARGUMENT	412:46	412:46	6	& tfImageHeight
UNARY_EXPR	412:46	412:47	7	& tfImageHeight
UNARY_OPERATOR	412:46	412:46	8	&
LEAF_NODE	412:46	412:46	9	&
FIELD	412:47	412:47	8	tfImageHeight
LEAF_NODE	412:47	412:47	9	tfImageHeight
LEAF_NODE	412:60	412:60	6	)
LEAF_NODE	412:61	412:61	4	;
EXPR_STATEMENT	417:4	417:74	3	TIFFGetFieldDefaulted ( tfFile , TIFFTAG_BITSPERSAMPLE , & tfBitsPerSample ) ;
EXPR	417:4	417:4	4	TIFFGetFieldDefaulted ( tfFile , TIFFTAG_BITSPERSAMPLE , & tfBitsPerSample )
FUNCTION_CALL	417:4	417:73	5	TIFFGetFieldDefaulted ( tfFile , TIFFTAG_BITSPERSAMPLE , & tfBitsPerSample )
CALLEE	417:4	417:4	6	TIFFGetFieldDefaulted
LEAF_NODE	417:4	417:4	7	TIFFGetFieldDefaulted
LEAF_NODE	417:25	417:25	6	(
ARGUMENT	417:26	417:26	6	tfFile
FIELD	417:26	417:26	7	tfFile
LEAF_NODE	417:26	417:26	8	tfFile
LEAF_NODE	417:32	417:32	6	,
ARGUMENT	417:34	417:34	6	TIFFTAG_BITSPERSAMPLE
FIELD	417:34	417:34	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	417:34	417:34	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	417:55	417:55	6	,
ARGUMENT	417:57	417:57	6	& tfBitsPerSample
UNARY_EXPR	417:57	417:58	7	& tfBitsPerSample
UNARY_OPERATOR	417:57	417:57	8	&
LEAF_NODE	417:57	417:57	9	&
FIELD	417:58	417:58	8	tfBitsPerSample
LEAF_NODE	417:58	417:58	9	tfBitsPerSample
LEAF_NODE	417:73	417:73	6	)
LEAF_NODE	417:74	417:74	4	;
EXPR_STATEMENT	418:4	418:78	3	TIFFGetFieldDefaulted ( tfFile , TIFFTAG_SAMPLESPERPIXEL , & tfSamplesPerPixel ) ;
EXPR	418:4	418:4	4	TIFFGetFieldDefaulted ( tfFile , TIFFTAG_SAMPLESPERPIXEL , & tfSamplesPerPixel )
FUNCTION_CALL	418:4	418:77	5	TIFFGetFieldDefaulted ( tfFile , TIFFTAG_SAMPLESPERPIXEL , & tfSamplesPerPixel )
CALLEE	418:4	418:4	6	TIFFGetFieldDefaulted
LEAF_NODE	418:4	418:4	7	TIFFGetFieldDefaulted
LEAF_NODE	418:25	418:25	6	(
ARGUMENT	418:26	418:26	6	tfFile
FIELD	418:26	418:26	7	tfFile
LEAF_NODE	418:26	418:26	8	tfFile
LEAF_NODE	418:32	418:32	6	,
ARGUMENT	418:34	418:34	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	418:34	418:34	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	418:34	418:34	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	418:57	418:57	6	,
ARGUMENT	418:59	418:59	6	& tfSamplesPerPixel
UNARY_EXPR	418:59	418:60	7	& tfSamplesPerPixel
UNARY_OPERATOR	418:59	418:59	8	&
LEAF_NODE	418:59	418:59	9	&
FIELD	418:60	418:60	8	tfSamplesPerPixel
LEAF_NODE	418:60	418:60	9	tfSamplesPerPixel
LEAF_NODE	418:77	418:77	6	)
LEAF_NODE	418:78	418:78	4	;
EXPR_STATEMENT	419:4	419:79	3	TIFFGetFieldDefaulted ( tfFile , TIFFTAG_PLANARCONFIG , & tfPlanarConfiguration ) ;
EXPR	419:4	419:4	4	TIFFGetFieldDefaulted ( tfFile , TIFFTAG_PLANARCONFIG , & tfPlanarConfiguration )
FUNCTION_CALL	419:4	419:78	5	TIFFGetFieldDefaulted ( tfFile , TIFFTAG_PLANARCONFIG , & tfPlanarConfiguration )
CALLEE	419:4	419:4	6	TIFFGetFieldDefaulted
LEAF_NODE	419:4	419:4	7	TIFFGetFieldDefaulted
LEAF_NODE	419:25	419:25	6	(
ARGUMENT	419:26	419:26	6	tfFile
FIELD	419:26	419:26	7	tfFile
LEAF_NODE	419:26	419:26	8	tfFile
LEAF_NODE	419:32	419:32	6	,
ARGUMENT	419:34	419:34	6	TIFFTAG_PLANARCONFIG
FIELD	419:34	419:34	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	419:34	419:34	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	419:54	419:54	6	,
ARGUMENT	419:56	419:56	6	& tfPlanarConfiguration
UNARY_EXPR	419:56	419:57	7	& tfPlanarConfiguration
UNARY_OPERATOR	419:56	419:56	8	&
LEAF_NODE	419:56	419:56	9	&
FIELD	419:57	419:57	8	tfPlanarConfiguration
LEAF_NODE	419:57	419:57	9	tfPlanarConfiguration
LEAF_NODE	419:78	419:78	6	)
LEAF_NODE	419:79	419:79	4	;
EXPR_STATEMENT	420:4	420:80	3	TIFFGetFieldDefaulted ( tfFile , TIFFTAG_GRAYRESPONSEUNIT , & tfGrayResponseUnit ) ;
EXPR	420:4	420:4	4	TIFFGetFieldDefaulted ( tfFile , TIFFTAG_GRAYRESPONSEUNIT , & tfGrayResponseUnit )
FUNCTION_CALL	420:4	420:79	5	TIFFGetFieldDefaulted ( tfFile , TIFFTAG_GRAYRESPONSEUNIT , & tfGrayResponseUnit )
CALLEE	420:4	420:4	6	TIFFGetFieldDefaulted
LEAF_NODE	420:4	420:4	7	TIFFGetFieldDefaulted
LEAF_NODE	420:25	420:25	6	(
ARGUMENT	420:26	420:26	6	tfFile
FIELD	420:26	420:26	7	tfFile
LEAF_NODE	420:26	420:26	8	tfFile
LEAF_NODE	420:32	420:32	6	,
ARGUMENT	420:34	420:34	6	TIFFTAG_GRAYRESPONSEUNIT
FIELD	420:34	420:34	7	TIFFTAG_GRAYRESPONSEUNIT
LEAF_NODE	420:34	420:34	8	TIFFTAG_GRAYRESPONSEUNIT
LEAF_NODE	420:58	420:58	6	,
ARGUMENT	420:60	420:60	6	& tfGrayResponseUnit
UNARY_EXPR	420:60	420:61	7	& tfGrayResponseUnit
UNARY_OPERATOR	420:60	420:60	8	&
LEAF_NODE	420:60	420:60	9	&
FIELD	420:61	420:61	8	tfGrayResponseUnit
LEAF_NODE	420:61	420:61	9	tfGrayResponseUnit
LEAF_NODE	420:79	420:79	6	)
LEAF_NODE	420:80	420:80	4	;
EXPR_STATEMENT	422:4	422:57	3	tfUnitMap = tfGrayResponseUnitMap [ tfGrayResponseUnit ] ;
EXPR	422:4	422:4	4	tfUnitMap = tfGrayResponseUnitMap [ tfGrayResponseUnit ]
ASSIGN	422:4	422:16	5	tfUnitMap = tfGrayResponseUnitMap [ tfGrayResponseUnit ]
LVAL	422:4	422:4	6	tfUnitMap
FIELD	422:4	422:4	7	tfUnitMap
LEAF_NODE	422:4	422:4	8	tfUnitMap
ASSIGN_OP	422:14	422:14	6	=
LEAF_NODE	422:14	422:14	7	=
RVAL	422:16	422:16	6	tfGrayResponseUnitMap [ tfGrayResponseUnit ]
FIELD	422:16	422:56	7	tfGrayResponseUnitMap [ tfGrayResponseUnit ]
LEAF_NODE	422:16	422:16	8	tfGrayResponseUnitMap
LEAF_NODE	422:37	422:37	8	[
EXPR	422:38	422:38	8	tfGrayResponseUnit
FIELD	422:38	422:38	9	tfGrayResponseUnit
LEAF_NODE	422:38	422:38	10	tfGrayResponseUnit
LEAF_NODE	422:56	422:56	8	]
LEAF_NODE	422:57	422:57	4	;
EXPR_STATEMENT	423:4	423:39	3	colormapSize = 1 << tfBitsPerSample ;
EXPR	423:4	423:4	4	colormapSize = 1 << tfBitsPerSample
ASSIGN	423:4	423:19	5	colormapSize = 1 << tfBitsPerSample
LVAL	423:4	423:4	6	colormapSize
FIELD	423:4	423:4	7	colormapSize
LEAF_NODE	423:4	423:4	8	colormapSize
ASSIGN_OP	423:17	423:17	6	=
LEAF_NODE	423:17	423:17	7	=
RVAL	423:19	423:24	6	1 << tfBitsPerSample
FIELD	423:19	423:19	7	1
LEAF_NODE	423:19	423:19	8	1
LEAF_NODE	423:21	423:21	7	<<
FIELD	423:24	423:24	7	tfBitsPerSample
LEAF_NODE	423:24	423:24	8	tfBitsPerSample
LEAF_NODE	423:39	423:39	4	;
EXPR_STATEMENT	424:4	424:54	3	tfImageDepth = tfBitsPerSample * tfSamplesPerPixel ;
EXPR	424:4	424:4	4	tfImageDepth = tfBitsPerSample * tfSamplesPerPixel
ASSIGN	424:4	424:19	5	tfImageDepth = tfBitsPerSample * tfSamplesPerPixel
LVAL	424:4	424:4	6	tfImageDepth
FIELD	424:4	424:4	7	tfImageDepth
LEAF_NODE	424:4	424:4	8	tfImageDepth
ASSIGN_OP	424:17	424:17	6	=
LEAF_NODE	424:17	424:17	7	=
RVAL	424:19	424:37	6	tfBitsPerSample * tfSamplesPerPixel
FIELD	424:19	424:19	7	tfBitsPerSample
LEAF_NODE	424:19	424:19	8	tfBitsPerSample
LEAF_NODE	424:35	424:35	7	*
FIELD	424:37	424:37	7	tfSamplesPerPixel
LEAF_NODE	424:37	424:37	8	tfSamplesPerPixel
LEAF_NODE	424:54	424:54	4	;
EXPR_STATEMENT	426:4	426:59	3	dRed = ( double * ) malloc ( colormapSize * sizeof ( double ) ) ;
EXPR	426:4	426:4	4	dRed = ( double * ) malloc ( colormapSize * sizeof ( double ) )
ASSIGN	426:4	426:11	5	dRed = ( double * ) malloc ( colormapSize * sizeof ( double ) )
LVAL	426:4	426:4	6	dRed
FIELD	426:4	426:4	7	dRed
LEAF_NODE	426:4	426:4	8	dRed
ASSIGN_OP	426:9	426:9	6	=
LEAF_NODE	426:9	426:9	7	=
RVAL	426:11	426:22	6	( double * ) malloc ( colormapSize * sizeof ( double ) )
LEAF_NODE	426:11	426:11	7	(
TYPE_NAME	426:12	426:12	7	double
LEAF_NODE	426:12	426:12	8	double
LEAF_NODE	426:19	426:19	7	*
LEAF_NODE	426:20	426:20	7	)
FUNCTION_CALL	426:22	426:58	7	malloc ( colormapSize * sizeof ( double ) )
CALLEE	426:22	426:22	8	malloc
LEAF_NODE	426:22	426:22	9	malloc
LEAF_NODE	426:28	426:28	8	(
ARGUMENT	426:29	426:44	8	colormapSize * sizeof ( double )
FIELD	426:29	426:29	9	colormapSize
LEAF_NODE	426:29	426:29	10	colormapSize
LEAF_NODE	426:42	426:42	9	*
FUNCTION_CALL	426:44	426:57	9	sizeof ( double )
CALLEE	426:44	426:44	10	sizeof
LEAF_NODE	426:44	426:44	11	sizeof
LEAF_NODE	426:50	426:50	10	(
ARGUMENT	426:51	426:51	10	double
FIELD	426:51	426:51	11	double
LEAF_NODE	426:51	426:51	12	double
LEAF_NODE	426:57	426:57	10	)
LEAF_NODE	426:58	426:58	8	)
LEAF_NODE	426:59	426:59	4	;
EXPR_STATEMENT	427:4	427:61	3	dGreen = ( double * ) malloc ( colormapSize * sizeof ( double ) ) ;
EXPR	427:4	427:4	4	dGreen = ( double * ) malloc ( colormapSize * sizeof ( double ) )
ASSIGN	427:4	427:13	5	dGreen = ( double * ) malloc ( colormapSize * sizeof ( double ) )
LVAL	427:4	427:4	6	dGreen
FIELD	427:4	427:4	7	dGreen
LEAF_NODE	427:4	427:4	8	dGreen
ASSIGN_OP	427:11	427:11	6	=
LEAF_NODE	427:11	427:11	7	=
RVAL	427:13	427:24	6	( double * ) malloc ( colormapSize * sizeof ( double ) )
LEAF_NODE	427:13	427:13	7	(
TYPE_NAME	427:14	427:14	7	double
LEAF_NODE	427:14	427:14	8	double
LEAF_NODE	427:21	427:21	7	*
LEAF_NODE	427:22	427:22	7	)
FUNCTION_CALL	427:24	427:60	7	malloc ( colormapSize * sizeof ( double ) )
CALLEE	427:24	427:24	8	malloc
LEAF_NODE	427:24	427:24	9	malloc
LEAF_NODE	427:30	427:30	8	(
ARGUMENT	427:31	427:46	8	colormapSize * sizeof ( double )
FIELD	427:31	427:31	9	colormapSize
LEAF_NODE	427:31	427:31	10	colormapSize
LEAF_NODE	427:44	427:44	9	*
FUNCTION_CALL	427:46	427:59	9	sizeof ( double )
CALLEE	427:46	427:46	10	sizeof
LEAF_NODE	427:46	427:46	11	sizeof
LEAF_NODE	427:52	427:52	10	(
ARGUMENT	427:53	427:53	10	double
FIELD	427:53	427:53	11	double
LEAF_NODE	427:53	427:53	12	double
LEAF_NODE	427:59	427:59	10	)
LEAF_NODE	427:60	427:60	8	)
LEAF_NODE	427:61	427:61	4	;
EXPR_STATEMENT	428:4	428:60	3	dBlue = ( double * ) malloc ( colormapSize * sizeof ( double ) ) ;
EXPR	428:4	428:4	4	dBlue = ( double * ) malloc ( colormapSize * sizeof ( double ) )
ASSIGN	428:4	428:12	5	dBlue = ( double * ) malloc ( colormapSize * sizeof ( double ) )
LVAL	428:4	428:4	6	dBlue
FIELD	428:4	428:4	7	dBlue
LEAF_NODE	428:4	428:4	8	dBlue
ASSIGN_OP	428:10	428:10	6	=
LEAF_NODE	428:10	428:10	7	=
RVAL	428:12	428:23	6	( double * ) malloc ( colormapSize * sizeof ( double ) )
LEAF_NODE	428:12	428:12	7	(
TYPE_NAME	428:13	428:13	7	double
LEAF_NODE	428:13	428:13	8	double
LEAF_NODE	428:20	428:20	7	*
LEAF_NODE	428:21	428:21	7	)
FUNCTION_CALL	428:23	428:59	7	malloc ( colormapSize * sizeof ( double ) )
CALLEE	428:23	428:23	8	malloc
LEAF_NODE	428:23	428:23	9	malloc
LEAF_NODE	428:29	428:29	8	(
ARGUMENT	428:30	428:45	8	colormapSize * sizeof ( double )
FIELD	428:30	428:30	9	colormapSize
LEAF_NODE	428:30	428:30	10	colormapSize
LEAF_NODE	428:43	428:43	9	*
FUNCTION_CALL	428:45	428:58	9	sizeof ( double )
CALLEE	428:45	428:45	10	sizeof
LEAF_NODE	428:45	428:45	11	sizeof
LEAF_NODE	428:51	428:51	10	(
ARGUMENT	428:52	428:52	10	double
FIELD	428:52	428:52	11	double
LEAF_NODE	428:52	428:52	12	double
LEAF_NODE	428:58	428:58	10	)
LEAF_NODE	428:59	428:59	8	)
LEAF_NODE	428:60	428:60	4	;
EXPR_STATEMENT	429:4	429:16	3	MCHECK ( dRed ) ;
EXPR	429:4	429:4	4	MCHECK ( dRed )
FUNCTION_CALL	429:4	429:15	5	MCHECK ( dRed )
CALLEE	429:4	429:4	6	MCHECK
LEAF_NODE	429:4	429:4	7	MCHECK
LEAF_NODE	429:10	429:10	6	(
ARGUMENT	429:11	429:11	6	dRed
FIELD	429:11	429:11	7	dRed
LEAF_NODE	429:11	429:11	8	dRed
LEAF_NODE	429:15	429:15	6	)
LEAF_NODE	429:16	429:16	4	;
EXPR_STATEMENT	429:18	429:32	3	MCHECK ( dGreen ) ;
EXPR	429:18	429:18	4	MCHECK ( dGreen )
FUNCTION_CALL	429:18	429:31	5	MCHECK ( dGreen )
CALLEE	429:18	429:18	6	MCHECK
LEAF_NODE	429:18	429:18	7	MCHECK
LEAF_NODE	429:24	429:24	6	(
ARGUMENT	429:25	429:25	6	dGreen
FIELD	429:25	429:25	7	dGreen
LEAF_NODE	429:25	429:25	8	dGreen
LEAF_NODE	429:31	429:31	6	)
LEAF_NODE	429:32	429:32	4	;
EXPR_STATEMENT	429:34	429:47	3	MCHECK ( dBlue ) ;
EXPR	429:34	429:34	4	MCHECK ( dBlue )
FUNCTION_CALL	429:34	429:46	5	MCHECK ( dBlue )
CALLEE	429:34	429:34	6	MCHECK
LEAF_NODE	429:34	429:34	7	MCHECK
LEAF_NODE	429:40	429:40	6	(
ARGUMENT	429:41	429:41	6	dBlue
FIELD	429:41	429:41	7	dBlue
LEAF_NODE	429:41	429:41	8	dBlue
LEAF_NODE	429:46	429:46	6	)
LEAF_NODE	429:47	429:47	4	;
SELECTION	435:4	436:43	3	
KEYWORD	435:4	435:4	4	if
LEAF_NODE	435:4	435:4	5	if
LEAF_NODE	435:7	435:7	4	(
CONDITION	435:8	435:8	4	! TIFFGetField ( tfFile , TIFFTAG_PHOTOMETRIC , & tfPhotometricInterpretation )
EXPR	435:8	435:8	5	! TIFFGetField ( tfFile , TIFFTAG_PHOTOMETRIC , & tfPhotometricInterpretation )
UNARY_EXPR	435:8	435:9	6	! TIFFGetField ( tfFile , TIFFTAG_PHOTOMETRIC , & tfPhotometricInterpretation )
UNARY_OPERATOR	435:8	435:8	7	!
LEAF_NODE	435:8	435:8	8	!
FUNCTION_CALL	435:9	436:40	7	TIFFGetField ( tfFile , TIFFTAG_PHOTOMETRIC , & tfPhotometricInterpretation )
CALLEE	435:9	435:9	8	TIFFGetField
LEAF_NODE	435:9	435:9	9	TIFFGetField
LEAF_NODE	435:21	435:21	8	(
ARGUMENT	435:22	435:22	8	tfFile
FIELD	435:22	435:22	9	tfFile
LEAF_NODE	435:22	435:22	10	tfFile
LEAF_NODE	435:28	435:28	8	,
ARGUMENT	435:30	435:30	8	TIFFTAG_PHOTOMETRIC
FIELD	435:30	435:30	9	TIFFTAG_PHOTOMETRIC
LEAF_NODE	435:30	435:30	10	TIFFTAG_PHOTOMETRIC
LEAF_NODE	435:49	435:49	8	,
ARGUMENT	436:12	436:12	8	& tfPhotometricInterpretation
UNARY_EXPR	436:12	436:13	9	& tfPhotometricInterpretation
UNARY_OPERATOR	436:12	436:12	10	&
LEAF_NODE	436:12	436:12	11	&
FIELD	436:13	436:13	10	tfPhotometricInterpretation
LEAF_NODE	436:13	436:13	11	tfPhotometricInterpretation
LEAF_NODE	436:40	436:40	8	)
LEAF_NODE	436:41	436:41	4	)
STATEMENTS	436:43	447:4	4	
LEAF_NODE	436:43	436:43	5	{
STATEMENTS	437:8	445:10	5	
SELECTION	437:8	438:12	6	
KEYWORD	437:8	437:8	7	if
LEAF_NODE	437:8	437:8	8	if
LEAF_NODE	437:11	437:11	7	(
CONDITION	437:12	437:12	7	tfSamplesPerPixel != 1
EXPR	437:12	437:33	8	tfSamplesPerPixel != 1
FIELD	437:12	437:12	9	tfSamplesPerPixel
LEAF_NODE	437:12	437:12	10	tfSamplesPerPixel
EQ_OPERATOR	437:30	437:30	9	!=
LEAF_NODE	437:30	437:30	10	!=
FIELD	437:33	437:33	9	1
LEAF_NODE	437:33	437:33	10	1
LEAF_NODE	437:34	437:34	7	)
STATEMENTS	438:12	438:12	7	
EXPR_STATEMENT	438:12	438:57	8	tfPhotometricInterpretation = PHOTOMETRIC_RGB ;
EXPR	438:12	438:12	9	tfPhotometricInterpretation = PHOTOMETRIC_RGB
ASSIGN	438:12	438:42	10	tfPhotometricInterpretation = PHOTOMETRIC_RGB
LVAL	438:12	438:12	11	tfPhotometricInterpretation
FIELD	438:12	438:12	12	tfPhotometricInterpretation
LEAF_NODE	438:12	438:12	13	tfPhotometricInterpretation
ASSIGN_OP	438:40	438:40	11	=
LEAF_NODE	438:40	438:40	12	=
RVAL	438:42	438:42	11	PHOTOMETRIC_RGB
FIELD	438:42	438:42	12	PHOTOMETRIC_RGB
LEAF_NODE	438:42	438:42	13	PHOTOMETRIC_RGB
LEAF_NODE	438:57	438:57	9	;
SELECTION	439:8	439:13	6	
KEYWORD	439:8	439:8	7	else
LEAF_NODE	439:8	439:8	8	else
STATEMENTS	439:13	439:13	7	
SELECTION	439:13	440:12	8	
KEYWORD	439:13	439:13	9	if
LEAF_NODE	439:13	439:13	10	if
LEAF_NODE	439:16	439:16	9	(
CONDITION	439:17	439:17	9	tfBitsPerSample == 1
EXPR	439:17	439:36	10	tfBitsPerSample == 1
FIELD	439:17	439:17	11	tfBitsPerSample
LEAF_NODE	439:17	439:17	12	tfBitsPerSample
EQ_OPERATOR	439:33	439:33	11	==
LEAF_NODE	439:33	439:33	12	==
FIELD	439:36	439:36	11	1
LEAF_NODE	439:36	439:36	12	1
LEAF_NODE	439:37	439:37	9	)
STATEMENTS	440:12	440:12	9	
EXPR_STATEMENT	440:12	440:64	10	tfPhotometricInterpretation = PHOTOMETRIC_MINISBLACK ;
EXPR	440:12	440:12	11	tfPhotometricInterpretation = PHOTOMETRIC_MINISBLACK
ASSIGN	440:12	440:42	12	tfPhotometricInterpretation = PHOTOMETRIC_MINISBLACK
LVAL	440:12	440:12	13	tfPhotometricInterpretation
FIELD	440:12	440:12	14	tfPhotometricInterpretation
LEAF_NODE	440:12	440:12	15	tfPhotometricInterpretation
ASSIGN_OP	440:40	440:40	13	=
LEAF_NODE	440:40	440:40	14	=
RVAL	440:42	440:42	13	PHOTOMETRIC_MINISBLACK
FIELD	440:42	440:42	14	PHOTOMETRIC_MINISBLACK
LEAF_NODE	440:42	440:42	15	PHOTOMETRIC_MINISBLACK
LEAF_NODE	440:64	440:64	11	;
SELECTION	441:8	441:13	6	
KEYWORD	441:8	441:8	7	else
LEAF_NODE	441:8	441:8	8	else
STATEMENTS	441:13	441:13	7	
SELECTION	441:13	442:47	8	
KEYWORD	441:13	441:13	9	if
LEAF_NODE	441:13	441:13	10	if
LEAF_NODE	441:16	441:16	9	(
CONDITION	441:17	441:17	9	TIFFGetField ( tfFile , TIFFTAG_COLORMAP , & redMap , & greenMap , & blueMap )
EXPR	441:17	441:17	10	TIFFGetField ( tfFile , TIFFTAG_COLORMAP , & redMap , & greenMap , & blueMap )
FUNCTION_CALL	441:17	442:44	11	TIFFGetField ( tfFile , TIFFTAG_COLORMAP , & redMap , & greenMap , & blueMap )
CALLEE	441:17	441:17	12	TIFFGetField
LEAF_NODE	441:17	441:17	13	TIFFGetField
LEAF_NODE	441:29	441:29	12	(
ARGUMENT	441:30	441:30	12	tfFile
FIELD	441:30	441:30	13	tfFile
LEAF_NODE	441:30	441:30	14	tfFile
LEAF_NODE	441:36	441:36	12	,
ARGUMENT	441:38	441:38	12	TIFFTAG_COLORMAP
FIELD	441:38	441:38	13	TIFFTAG_COLORMAP
LEAF_NODE	441:38	441:38	14	TIFFTAG_COLORMAP
LEAF_NODE	441:54	441:54	12	,
ARGUMENT	442:16	442:16	12	& redMap
UNARY_EXPR	442:16	442:17	13	& redMap
UNARY_OPERATOR	442:16	442:16	14	&
LEAF_NODE	442:16	442:16	15	&
FIELD	442:17	442:17	14	redMap
LEAF_NODE	442:17	442:17	15	redMap
LEAF_NODE	442:23	442:23	12	,
ARGUMENT	442:25	442:25	12	& greenMap
UNARY_EXPR	442:25	442:26	13	& greenMap
UNARY_OPERATOR	442:25	442:25	14	&
LEAF_NODE	442:25	442:25	15	&
FIELD	442:26	442:26	14	greenMap
LEAF_NODE	442:26	442:26	15	greenMap
LEAF_NODE	442:34	442:34	12	,
ARGUMENT	442:36	442:36	12	& blueMap
UNARY_EXPR	442:36	442:37	13	& blueMap
UNARY_OPERATOR	442:36	442:36	14	&
LEAF_NODE	442:36	442:36	15	&
FIELD	442:37	442:37	14	blueMap
LEAF_NODE	442:37	442:37	15	blueMap
LEAF_NODE	442:44	442:44	12	)
LEAF_NODE	442:45	442:45	9	)
STATEMENTS	442:47	445:8	9	
LEAF_NODE	442:47	442:47	10	{
STATEMENTS	443:12	444:12	10	
EXPR_STATEMENT	443:12	443:61	11	tfPhotometricInterpretation = PHOTOMETRIC_PALETTE ;
EXPR	443:12	443:12	12	tfPhotometricInterpretation = PHOTOMETRIC_PALETTE
ASSIGN	443:12	443:42	13	tfPhotometricInterpretation = PHOTOMETRIC_PALETTE
LVAL	443:12	443:12	14	tfPhotometricInterpretation
FIELD	443:12	443:12	15	tfPhotometricInterpretation
LEAF_NODE	443:12	443:12	16	tfPhotometricInterpretation
ASSIGN_OP	443:40	443:40	14	=
LEAF_NODE	443:40	443:40	15	=
RVAL	443:42	443:42	14	PHOTOMETRIC_PALETTE
FIELD	443:42	443:42	15	PHOTOMETRIC_PALETTE
LEAF_NODE	443:42	443:42	16	PHOTOMETRIC_PALETTE
LEAF_NODE	443:61	443:61	12	;
EXPR_STATEMENT	444:12	444:46	11	redMap = greenMap = blueMap = NULL ;
EXPR	444:12	444:12	12	redMap = greenMap = blueMap = NULL
ASSIGN	444:12	444:21	13	redMap = greenMap = blueMap = NULL
LVAL	444:12	444:12	14	redMap
FIELD	444:12	444:12	15	redMap
LEAF_NODE	444:12	444:12	16	redMap
ASSIGN_OP	444:19	444:19	14	=
LEAF_NODE	444:19	444:19	15	=
RVAL	444:21	444:21	14	greenMap = blueMap = NULL
ASSIGN	444:21	444:32	15	greenMap = blueMap = NULL
LVAL	444:21	444:21	16	greenMap
FIELD	444:21	444:21	17	greenMap
LEAF_NODE	444:21	444:21	18	greenMap
ASSIGN_OP	444:30	444:30	16	=
LEAF_NODE	444:30	444:30	17	=
RVAL	444:32	444:32	16	blueMap = NULL
ASSIGN	444:32	444:42	17	blueMap = NULL
LVAL	444:32	444:32	18	blueMap
FIELD	444:32	444:32	19	blueMap
LEAF_NODE	444:32	444:32	20	blueMap
ASSIGN_OP	444:40	444:40	18	=
LEAF_NODE	444:40	444:40	19	=
RVAL	444:42	444:42	18	NULL
FIELD	444:42	444:42	19	NULL
LEAF_NODE	444:42	444:42	20	NULL
LEAF_NODE	444:46	444:46	12	;
LEAF_NODE	445:8	445:8	10	}
SELECTION	445:10	446:12	6	
KEYWORD	445:10	445:10	7	else
LEAF_NODE	445:10	445:10	8	else
STATEMENTS	446:12	446:12	7	
EXPR_STATEMENT	446:12	446:64	8	tfPhotometricInterpretation = PHOTOMETRIC_MINISBLACK ;
EXPR	446:12	446:12	9	tfPhotometricInterpretation = PHOTOMETRIC_MINISBLACK
ASSIGN	446:12	446:42	10	tfPhotometricInterpretation = PHOTOMETRIC_MINISBLACK
LVAL	446:12	446:12	11	tfPhotometricInterpretation
FIELD	446:12	446:12	12	tfPhotometricInterpretation
LEAF_NODE	446:12	446:12	13	tfPhotometricInterpretation
ASSIGN_OP	446:40	446:40	11	=
LEAF_NODE	446:40	446:40	12	=
RVAL	446:42	446:42	11	PHOTOMETRIC_MINISBLACK
FIELD	446:42	446:42	12	PHOTOMETRIC_MINISBLACK
LEAF_NODE	446:42	446:42	13	PHOTOMETRIC_MINISBLACK
LEAF_NODE	446:64	446:64	9	;
LEAF_NODE	447:4	447:4	5	}
SELECTION	452:4	452:41	3	
KEYWORD	452:4	452:4	4	switch
LEAF_NODE	452:4	452:4	5	switch
LEAF_NODE	452:11	452:11	4	(
CONDITION	452:12	452:12	4	tfPhotometricInterpretation
EXPR	452:12	452:12	5	tfPhotometricInterpretation
FIELD	452:12	452:12	6	tfPhotometricInterpretation
LEAF_NODE	452:12	452:12	7	tfPhotometricInterpretation
LEAF_NODE	452:39	452:39	4	)
STATEMENTS	452:41	503:4	4	
LEAF_NODE	452:41	452:41	5	{
STATEMENTS	453:4	502:8	5	
LABEL	453:4	453:24	6	case PHOTOMETRIC_RGB :
LEAF_NODE	453:4	453:4	7	case
LEAF_NODE	453:9	453:9	7	PHOTOMETRIC_RGB
LEAF_NODE	453:24	453:24	7	:
EXPR_STATEMENT	454:1	454:58	6	redMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) ) ;
EXPR	454:1	454:1	7	redMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
ASSIGN	454:1	454:10	8	redMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LVAL	454:1	454:1	9	redMap
FIELD	454:1	454:1	10	redMap
LEAF_NODE	454:1	454:1	11	redMap
ASSIGN_OP	454:8	454:8	9	=
LEAF_NODE	454:8	454:8	10	=
RVAL	454:10	454:21	9	( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LEAF_NODE	454:10	454:10	10	(
TYPE_NAME	454:11	454:11	10	uint16
LEAF_NODE	454:11	454:11	11	uint16
LEAF_NODE	454:18	454:18	10	*
LEAF_NODE	454:19	454:19	10	)
FUNCTION_CALL	454:21	454:57	10	malloc ( colormapSize * sizeof ( uint16 ) )
CALLEE	454:21	454:21	11	malloc
LEAF_NODE	454:21	454:21	12	malloc
LEAF_NODE	454:27	454:27	11	(
ARGUMENT	454:28	454:43	11	colormapSize * sizeof ( uint16 )
FIELD	454:28	454:28	12	colormapSize
LEAF_NODE	454:28	454:28	13	colormapSize
LEAF_NODE	454:41	454:41	12	*
FUNCTION_CALL	454:43	454:56	12	sizeof ( uint16 )
CALLEE	454:43	454:43	13	sizeof
LEAF_NODE	454:43	454:43	14	sizeof
LEAF_NODE	454:49	454:49	13	(
ARGUMENT	454:50	454:50	13	uint16
FIELD	454:50	454:50	14	uint16
LEAF_NODE	454:50	454:50	15	uint16
LEAF_NODE	454:56	454:56	13	)
LEAF_NODE	454:57	454:57	11	)
LEAF_NODE	454:58	454:58	7	;
EXPR_STATEMENT	455:1	455:60	6	greenMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) ) ;
EXPR	455:1	455:1	7	greenMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
ASSIGN	455:1	455:12	8	greenMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LVAL	455:1	455:1	9	greenMap
FIELD	455:1	455:1	10	greenMap
LEAF_NODE	455:1	455:1	11	greenMap
ASSIGN_OP	455:10	455:10	9	=
LEAF_NODE	455:10	455:10	10	=
RVAL	455:12	455:23	9	( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LEAF_NODE	455:12	455:12	10	(
TYPE_NAME	455:13	455:13	10	uint16
LEAF_NODE	455:13	455:13	11	uint16
LEAF_NODE	455:20	455:20	10	*
LEAF_NODE	455:21	455:21	10	)
FUNCTION_CALL	455:23	455:59	10	malloc ( colormapSize * sizeof ( uint16 ) )
CALLEE	455:23	455:23	11	malloc
LEAF_NODE	455:23	455:23	12	malloc
LEAF_NODE	455:29	455:29	11	(
ARGUMENT	455:30	455:45	11	colormapSize * sizeof ( uint16 )
FIELD	455:30	455:30	12	colormapSize
LEAF_NODE	455:30	455:30	13	colormapSize
LEAF_NODE	455:43	455:43	12	*
FUNCTION_CALL	455:45	455:58	12	sizeof ( uint16 )
CALLEE	455:45	455:45	13	sizeof
LEAF_NODE	455:45	455:45	14	sizeof
LEAF_NODE	455:51	455:51	13	(
ARGUMENT	455:52	455:52	13	uint16
FIELD	455:52	455:52	14	uint16
LEAF_NODE	455:52	455:52	15	uint16
LEAF_NODE	455:58	455:58	13	)
LEAF_NODE	455:59	455:59	11	)
LEAF_NODE	455:60	455:60	7	;
EXPR_STATEMENT	456:1	456:59	6	blueMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) ) ;
EXPR	456:1	456:1	7	blueMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
ASSIGN	456:1	456:11	8	blueMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LVAL	456:1	456:1	9	blueMap
FIELD	456:1	456:1	10	blueMap
LEAF_NODE	456:1	456:1	11	blueMap
ASSIGN_OP	456:9	456:9	9	=
LEAF_NODE	456:9	456:9	10	=
RVAL	456:11	456:22	9	( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LEAF_NODE	456:11	456:11	10	(
TYPE_NAME	456:12	456:12	10	uint16
LEAF_NODE	456:12	456:12	11	uint16
LEAF_NODE	456:19	456:19	10	*
LEAF_NODE	456:20	456:20	10	)
FUNCTION_CALL	456:22	456:58	10	malloc ( colormapSize * sizeof ( uint16 ) )
CALLEE	456:22	456:22	11	malloc
LEAF_NODE	456:22	456:22	12	malloc
LEAF_NODE	456:28	456:28	11	(
ARGUMENT	456:29	456:44	11	colormapSize * sizeof ( uint16 )
FIELD	456:29	456:29	12	colormapSize
LEAF_NODE	456:29	456:29	13	colormapSize
LEAF_NODE	456:42	456:42	12	*
FUNCTION_CALL	456:44	456:57	12	sizeof ( uint16 )
CALLEE	456:44	456:44	13	sizeof
LEAF_NODE	456:44	456:44	14	sizeof
LEAF_NODE	456:50	456:50	13	(
ARGUMENT	456:51	456:51	13	uint16
FIELD	456:51	456:51	14	uint16
LEAF_NODE	456:51	456:51	15	uint16
LEAF_NODE	456:57	456:57	13	)
LEAF_NODE	456:58	456:58	11	)
LEAF_NODE	456:59	456:59	7	;
EXPR_STATEMENT	457:1	457:15	6	MCHECK ( redMap ) ;
EXPR	457:1	457:1	7	MCHECK ( redMap )
FUNCTION_CALL	457:1	457:14	8	MCHECK ( redMap )
CALLEE	457:1	457:1	9	MCHECK
LEAF_NODE	457:1	457:1	10	MCHECK
LEAF_NODE	457:7	457:7	9	(
ARGUMENT	457:8	457:8	9	redMap
FIELD	457:8	457:8	10	redMap
LEAF_NODE	457:8	457:8	11	redMap
LEAF_NODE	457:14	457:14	9	)
LEAF_NODE	457:15	457:15	7	;
EXPR_STATEMENT	457:17	457:33	6	MCHECK ( greenMap ) ;
EXPR	457:17	457:17	7	MCHECK ( greenMap )
FUNCTION_CALL	457:17	457:32	8	MCHECK ( greenMap )
CALLEE	457:17	457:17	9	MCHECK
LEAF_NODE	457:17	457:17	10	MCHECK
LEAF_NODE	457:23	457:23	9	(
ARGUMENT	457:24	457:24	9	greenMap
FIELD	457:24	457:24	10	greenMap
LEAF_NODE	457:24	457:24	11	greenMap
LEAF_NODE	457:32	457:32	9	)
LEAF_NODE	457:33	457:33	7	;
EXPR_STATEMENT	457:35	457:50	6	MCHECK ( blueMap ) ;
EXPR	457:35	457:35	7	MCHECK ( blueMap )
FUNCTION_CALL	457:35	457:49	8	MCHECK ( blueMap )
CALLEE	457:35	457:35	9	MCHECK
LEAF_NODE	457:35	457:35	10	MCHECK
LEAF_NODE	457:41	457:41	9	(
ARGUMENT	457:42	457:42	9	blueMap
FIELD	457:42	457:42	10	blueMap
LEAF_NODE	457:42	457:42	11	blueMap
LEAF_NODE	457:49	457:49	9	)
LEAF_NODE	457:50	457:50	7	;
ITERATION	458:1	459:5	6	
KEYWORD	458:1	458:1	7	for
LEAF_NODE	458:1	458:1	8	for
LEAF_NODE	458:5	458:5	7	(
FOR_INIT	458:6	458:11	7	i = 0 ;
EXPR	458:6	458:6	8	i = 0
ASSIGN	458:6	458:10	9	i = 0
LVAL	458:6	458:6	10	i
FIELD	458:6	458:6	11	i
LEAF_NODE	458:6	458:6	12	i
ASSIGN_OP	458:8	458:8	10	=
LEAF_NODE	458:8	458:8	11	=
RVAL	458:10	458:10	10	0
FIELD	458:10	458:10	11	0
LEAF_NODE	458:10	458:10	12	0
LEAF_NODE	458:11	458:11	8	;
CONDITION	458:13	458:13	7	i < colormapSize
EXPR	458:13	458:17	8	i < colormapSize
FIELD	458:13	458:13	9	i
LEAF_NODE	458:13	458:13	10	i
REL_OPERATOR	458:15	458:15	9	<
LEAF_NODE	458:15	458:15	10	<
FIELD	458:17	458:17	9	colormapSize
LEAF_NODE	458:17	458:17	10	colormapSize
LEAF_NODE	458:29	458:29	7	;
FOR_EXPR	458:31	458:31	7	i ++
EXPR	458:31	458:31	8	i ++
FIELD	458:31	458:32	9	i ++
LEAF_NODE	458:31	458:31	10	i
LEAF_NODE	458:32	458:32	10	++
LEAF_NODE	458:34	458:34	7	)
STATEMENTS	459:5	459:5	7	
EXPR_STATEMENT	459:5	460:39	8	dRed [ i ] = dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 ) ;
EXPR	459:5	459:5	9	dRed [ i ] = dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
ASSIGN	459:5	459:15	10	dRed [ i ] = dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
LVAL	459:5	459:5	11	dRed [ i ]
FIELD	459:5	459:11	12	dRed [ i ]
LEAF_NODE	459:5	459:5	13	dRed
LEAF_NODE	459:9	459:9	13	[
EXPR	459:10	459:10	13	i
FIELD	459:10	459:10	14	i
LEAF_NODE	459:10	459:10	15	i
LEAF_NODE	459:11	459:11	13	]
ASSIGN_OP	459:13	459:13	11	=
LEAF_NODE	459:13	459:13	12	=
RVAL	459:15	459:15	11	dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
ASSIGN	459:15	459:27	12	dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
LVAL	459:15	459:15	13	dGreen [ i ]
FIELD	459:15	459:23	14	dGreen [ i ]
LEAF_NODE	459:15	459:15	15	dGreen
LEAF_NODE	459:21	459:21	15	[
EXPR	459:22	459:22	15	i
FIELD	459:22	459:22	16	i
LEAF_NODE	459:22	459:22	17	i
LEAF_NODE	459:23	459:23	15	]
ASSIGN_OP	459:25	459:25	13	=
LEAF_NODE	459:25	459:25	14	=
RVAL	459:27	459:27	13	dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
ASSIGN	459:27	460:4	14	dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
LVAL	459:27	459:27	15	dBlue [ i ]
FIELD	459:27	459:34	16	dBlue [ i ]
LEAF_NODE	459:27	459:27	17	dBlue
LEAF_NODE	459:32	459:32	17	[
EXPR	459:33	459:33	17	i
FIELD	459:33	459:33	18	i
LEAF_NODE	459:33	459:33	19	i
LEAF_NODE	459:34	459:34	17	]
ASSIGN_OP	460:2	460:2	15	=
LEAF_NODE	460:2	460:2	16	=
RVAL	460:4	460:13	15	( double ) SCALE ( i , colormapSize - 1 )
LEAF_NODE	460:4	460:4	16	(
TYPE_NAME	460:5	460:5	16	double
LEAF_NODE	460:5	460:5	17	double
LEAF_NODE	460:11	460:11	16	)
FUNCTION_CALL	460:13	460:38	16	SCALE ( i , colormapSize - 1 )
CALLEE	460:13	460:13	17	SCALE
LEAF_NODE	460:13	460:13	18	SCALE
LEAF_NODE	460:18	460:18	17	(
ARGUMENT	460:19	460:19	17	i
FIELD	460:19	460:19	18	i
LEAF_NODE	460:19	460:19	19	i
LEAF_NODE	460:20	460:20	17	,
ARGUMENT	460:22	460:37	17	colormapSize - 1
FIELD	460:22	460:22	18	colormapSize
LEAF_NODE	460:22	460:22	19	colormapSize
LEAF_NODE	460:35	460:35	18	-
FIELD	460:37	460:37	18	1
LEAF_NODE	460:37	460:37	19	1
LEAF_NODE	460:38	460:38	17	)
LEAF_NODE	460:39	460:39	9	;
JUMP_STATEMENT	461:8	461:13	6	break DESTINATION ;
KEYWORD	461:8	461:8	7	break
LEAF_NODE	461:8	461:8	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	461:13	461:13	7	;
LABEL	462:4	462:28	6	case PHOTOMETRIC_PALETTE :
LEAF_NODE	462:4	462:4	7	case
LEAF_NODE	462:9	462:9	7	PHOTOMETRIC_PALETTE
LEAF_NODE	462:28	462:28	7	:
SELECTION	463:8	464:47	6	
KEYWORD	463:8	463:8	7	if
LEAF_NODE	463:8	463:8	8	if
LEAF_NODE	463:11	463:11	7	(
CONDITION	463:12	463:12	7	! TIFFGetField ( tfFile , TIFFTAG_COLORMAP , & redMap , & greenMap , & blueMap )
EXPR	463:12	463:12	8	! TIFFGetField ( tfFile , TIFFTAG_COLORMAP , & redMap , & greenMap , & blueMap )
UNARY_EXPR	463:12	463:13	9	! TIFFGetField ( tfFile , TIFFTAG_COLORMAP , & redMap , & greenMap , & blueMap )
UNARY_OPERATOR	463:12	463:12	10	!
LEAF_NODE	463:12	463:12	11	!
FUNCTION_CALL	463:13	464:44	10	TIFFGetField ( tfFile , TIFFTAG_COLORMAP , & redMap , & greenMap , & blueMap )
CALLEE	463:13	463:13	11	TIFFGetField
LEAF_NODE	463:13	463:13	12	TIFFGetField
LEAF_NODE	463:25	463:25	11	(
ARGUMENT	463:26	463:26	11	tfFile
FIELD	463:26	463:26	12	tfFile
LEAF_NODE	463:26	463:26	13	tfFile
LEAF_NODE	463:32	463:32	11	,
ARGUMENT	463:34	463:34	11	TIFFTAG_COLORMAP
FIELD	463:34	463:34	12	TIFFTAG_COLORMAP
LEAF_NODE	463:34	463:34	13	TIFFTAG_COLORMAP
LEAF_NODE	463:50	463:50	11	,
ARGUMENT	464:16	464:16	11	& redMap
UNARY_EXPR	464:16	464:17	12	& redMap
UNARY_OPERATOR	464:16	464:16	13	&
LEAF_NODE	464:16	464:16	14	&
FIELD	464:17	464:17	13	redMap
LEAF_NODE	464:17	464:17	14	redMap
LEAF_NODE	464:23	464:23	11	,
ARGUMENT	464:25	464:25	11	& greenMap
UNARY_EXPR	464:25	464:26	12	& greenMap
UNARY_OPERATOR	464:25	464:25	13	&
LEAF_NODE	464:25	464:25	14	&
FIELD	464:26	464:26	13	greenMap
LEAF_NODE	464:26	464:26	14	greenMap
LEAF_NODE	464:34	464:34	11	,
ARGUMENT	464:36	464:36	11	& blueMap
UNARY_EXPR	464:36	464:37	12	& blueMap
UNARY_OPERATOR	464:36	464:36	13	&
LEAF_NODE	464:36	464:36	14	&
FIELD	464:37	464:37	13	blueMap
LEAF_NODE	464:37	464:37	14	blueMap
LEAF_NODE	464:44	464:44	11	)
LEAF_NODE	464:45	464:45	7	)
STATEMENTS	464:47	472:8	7	
LEAF_NODE	464:47	464:47	8	{
STATEMENTS	465:12	469:12	8	
EXPR_STATEMENT	465:12	465:69	9	redMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) ) ;
EXPR	465:12	465:12	10	redMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
ASSIGN	465:12	465:21	11	redMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LVAL	465:12	465:12	12	redMap
FIELD	465:12	465:12	13	redMap
LEAF_NODE	465:12	465:12	14	redMap
ASSIGN_OP	465:19	465:19	12	=
LEAF_NODE	465:19	465:19	13	=
RVAL	465:21	465:32	12	( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LEAF_NODE	465:21	465:21	13	(
TYPE_NAME	465:22	465:22	13	uint16
LEAF_NODE	465:22	465:22	14	uint16
LEAF_NODE	465:29	465:29	13	*
LEAF_NODE	465:30	465:30	13	)
FUNCTION_CALL	465:32	465:68	13	malloc ( colormapSize * sizeof ( uint16 ) )
CALLEE	465:32	465:32	14	malloc
LEAF_NODE	465:32	465:32	15	malloc
LEAF_NODE	465:38	465:38	14	(
ARGUMENT	465:39	465:54	14	colormapSize * sizeof ( uint16 )
FIELD	465:39	465:39	15	colormapSize
LEAF_NODE	465:39	465:39	16	colormapSize
LEAF_NODE	465:52	465:52	15	*
FUNCTION_CALL	465:54	465:67	15	sizeof ( uint16 )
CALLEE	465:54	465:54	16	sizeof
LEAF_NODE	465:54	465:54	17	sizeof
LEAF_NODE	465:60	465:60	16	(
ARGUMENT	465:61	465:61	16	uint16
FIELD	465:61	465:61	17	uint16
LEAF_NODE	465:61	465:61	18	uint16
LEAF_NODE	465:67	465:67	16	)
LEAF_NODE	465:68	465:68	14	)
LEAF_NODE	465:69	465:69	10	;
EXPR_STATEMENT	466:12	466:71	9	greenMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) ) ;
EXPR	466:12	466:12	10	greenMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
ASSIGN	466:12	466:23	11	greenMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LVAL	466:12	466:12	12	greenMap
FIELD	466:12	466:12	13	greenMap
LEAF_NODE	466:12	466:12	14	greenMap
ASSIGN_OP	466:21	466:21	12	=
LEAF_NODE	466:21	466:21	13	=
RVAL	466:23	466:34	12	( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LEAF_NODE	466:23	466:23	13	(
TYPE_NAME	466:24	466:24	13	uint16
LEAF_NODE	466:24	466:24	14	uint16
LEAF_NODE	466:31	466:31	13	*
LEAF_NODE	466:32	466:32	13	)
FUNCTION_CALL	466:34	466:70	13	malloc ( colormapSize * sizeof ( uint16 ) )
CALLEE	466:34	466:34	14	malloc
LEAF_NODE	466:34	466:34	15	malloc
LEAF_NODE	466:40	466:40	14	(
ARGUMENT	466:41	466:56	14	colormapSize * sizeof ( uint16 )
FIELD	466:41	466:41	15	colormapSize
LEAF_NODE	466:41	466:41	16	colormapSize
LEAF_NODE	466:54	466:54	15	*
FUNCTION_CALL	466:56	466:69	15	sizeof ( uint16 )
CALLEE	466:56	466:56	16	sizeof
LEAF_NODE	466:56	466:56	17	sizeof
LEAF_NODE	466:62	466:62	16	(
ARGUMENT	466:63	466:63	16	uint16
FIELD	466:63	466:63	17	uint16
LEAF_NODE	466:63	466:63	18	uint16
LEAF_NODE	466:69	466:69	16	)
LEAF_NODE	466:70	466:70	14	)
LEAF_NODE	466:71	466:71	10	;
EXPR_STATEMENT	467:12	467:70	9	blueMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) ) ;
EXPR	467:12	467:12	10	blueMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
ASSIGN	467:12	467:22	11	blueMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LVAL	467:12	467:12	12	blueMap
FIELD	467:12	467:12	13	blueMap
LEAF_NODE	467:12	467:12	14	blueMap
ASSIGN_OP	467:20	467:20	12	=
LEAF_NODE	467:20	467:20	13	=
RVAL	467:22	467:33	12	( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LEAF_NODE	467:22	467:22	13	(
TYPE_NAME	467:23	467:23	13	uint16
LEAF_NODE	467:23	467:23	14	uint16
LEAF_NODE	467:30	467:30	13	*
LEAF_NODE	467:31	467:31	13	)
FUNCTION_CALL	467:33	467:69	13	malloc ( colormapSize * sizeof ( uint16 ) )
CALLEE	467:33	467:33	14	malloc
LEAF_NODE	467:33	467:33	15	malloc
LEAF_NODE	467:39	467:39	14	(
ARGUMENT	467:40	467:55	14	colormapSize * sizeof ( uint16 )
FIELD	467:40	467:40	15	colormapSize
LEAF_NODE	467:40	467:40	16	colormapSize
LEAF_NODE	467:53	467:53	15	*
FUNCTION_CALL	467:55	467:68	15	sizeof ( uint16 )
CALLEE	467:55	467:55	16	sizeof
LEAF_NODE	467:55	467:55	17	sizeof
LEAF_NODE	467:61	467:61	16	(
ARGUMENT	467:62	467:62	16	uint16
FIELD	467:62	467:62	17	uint16
LEAF_NODE	467:62	467:62	18	uint16
LEAF_NODE	467:68	467:68	16	)
LEAF_NODE	467:69	467:69	14	)
LEAF_NODE	467:70	467:70	10	;
EXPR_STATEMENT	468:12	468:26	9	MCHECK ( redMap ) ;
EXPR	468:12	468:12	10	MCHECK ( redMap )
FUNCTION_CALL	468:12	468:25	11	MCHECK ( redMap )
CALLEE	468:12	468:12	12	MCHECK
LEAF_NODE	468:12	468:12	13	MCHECK
LEAF_NODE	468:18	468:18	12	(
ARGUMENT	468:19	468:19	12	redMap
FIELD	468:19	468:19	13	redMap
LEAF_NODE	468:19	468:19	14	redMap
LEAF_NODE	468:25	468:25	12	)
LEAF_NODE	468:26	468:26	10	;
EXPR_STATEMENT	468:28	468:44	9	MCHECK ( greenMap ) ;
EXPR	468:28	468:28	10	MCHECK ( greenMap )
FUNCTION_CALL	468:28	468:43	11	MCHECK ( greenMap )
CALLEE	468:28	468:28	12	MCHECK
LEAF_NODE	468:28	468:28	13	MCHECK
LEAF_NODE	468:34	468:34	12	(
ARGUMENT	468:35	468:35	12	greenMap
FIELD	468:35	468:35	13	greenMap
LEAF_NODE	468:35	468:35	14	greenMap
LEAF_NODE	468:43	468:43	12	)
LEAF_NODE	468:44	468:44	10	;
EXPR_STATEMENT	468:46	468:61	9	MCHECK ( blueMap ) ;
EXPR	468:46	468:46	10	MCHECK ( blueMap )
FUNCTION_CALL	468:46	468:60	11	MCHECK ( blueMap )
CALLEE	468:46	468:46	12	MCHECK
LEAF_NODE	468:46	468:46	13	MCHECK
LEAF_NODE	468:52	468:52	12	(
ARGUMENT	468:53	468:53	12	blueMap
FIELD	468:53	468:53	13	blueMap
LEAF_NODE	468:53	468:53	14	blueMap
LEAF_NODE	468:60	468:60	12	)
LEAF_NODE	468:61	468:61	10	;
ITERATION	469:12	470:16	9	
KEYWORD	469:12	469:12	10	for
LEAF_NODE	469:12	469:12	11	for
LEAF_NODE	469:16	469:16	10	(
FOR_INIT	469:17	469:22	10	i = 0 ;
EXPR	469:17	469:17	11	i = 0
ASSIGN	469:17	469:21	12	i = 0
LVAL	469:17	469:17	13	i
FIELD	469:17	469:17	14	i
LEAF_NODE	469:17	469:17	15	i
ASSIGN_OP	469:19	469:19	13	=
LEAF_NODE	469:19	469:19	14	=
RVAL	469:21	469:21	13	0
FIELD	469:21	469:21	14	0
LEAF_NODE	469:21	469:21	15	0
LEAF_NODE	469:22	469:22	11	;
CONDITION	469:24	469:24	10	i < colormapSize
EXPR	469:24	469:28	11	i < colormapSize
FIELD	469:24	469:24	12	i
LEAF_NODE	469:24	469:24	13	i
REL_OPERATOR	469:26	469:26	12	<
LEAF_NODE	469:26	469:26	13	<
FIELD	469:28	469:28	12	colormapSize
LEAF_NODE	469:28	469:28	13	colormapSize
LEAF_NODE	469:40	469:40	10	;
FOR_EXPR	469:42	469:42	10	i ++
EXPR	469:42	469:42	11	i ++
FIELD	469:42	469:43	12	i ++
LEAF_NODE	469:42	469:42	13	i
LEAF_NODE	469:43	469:43	13	++
LEAF_NODE	469:45	469:45	10	)
STATEMENTS	470:16	470:16	10	
EXPR_STATEMENT	470:16	471:57	11	dRed [ i ] = dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 ) ;
EXPR	470:16	470:16	12	dRed [ i ] = dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
ASSIGN	470:16	470:26	13	dRed [ i ] = dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
LVAL	470:16	470:16	14	dRed [ i ]
FIELD	470:16	470:22	15	dRed [ i ]
LEAF_NODE	470:16	470:16	16	dRed
LEAF_NODE	470:20	470:20	16	[
EXPR	470:21	470:21	16	i
FIELD	470:21	470:21	17	i
LEAF_NODE	470:21	470:21	18	i
LEAF_NODE	470:22	470:22	16	]
ASSIGN_OP	470:24	470:24	14	=
LEAF_NODE	470:24	470:24	15	=
RVAL	470:26	470:26	14	dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
ASSIGN	470:26	470:38	15	dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
LVAL	470:26	470:26	16	dGreen [ i ]
FIELD	470:26	470:34	17	dGreen [ i ]
LEAF_NODE	470:26	470:26	18	dGreen
LEAF_NODE	470:32	470:32	18	[
EXPR	470:33	470:33	18	i
FIELD	470:33	470:33	19	i
LEAF_NODE	470:33	470:33	20	i
LEAF_NODE	470:34	470:34	18	]
ASSIGN_OP	470:36	470:36	16	=
LEAF_NODE	470:36	470:36	17	=
RVAL	470:38	470:38	16	dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
ASSIGN	470:38	471:22	17	dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
LVAL	470:38	470:38	18	dBlue [ i ]
FIELD	470:38	470:45	19	dBlue [ i ]
LEAF_NODE	470:38	470:38	20	dBlue
LEAF_NODE	470:43	470:43	20	[
EXPR	470:44	470:44	20	i
FIELD	470:44	470:44	21	i
LEAF_NODE	470:44	470:44	22	i
LEAF_NODE	470:45	470:45	20	]
ASSIGN_OP	471:20	471:20	18	=
LEAF_NODE	471:20	471:20	19	=
RVAL	471:22	471:31	18	( double ) SCALE ( i , colormapSize - 1 )
LEAF_NODE	471:22	471:22	19	(
TYPE_NAME	471:23	471:23	19	double
LEAF_NODE	471:23	471:23	20	double
LEAF_NODE	471:29	471:29	19	)
FUNCTION_CALL	471:31	471:56	19	SCALE ( i , colormapSize - 1 )
CALLEE	471:31	471:31	20	SCALE
LEAF_NODE	471:31	471:31	21	SCALE
LEAF_NODE	471:36	471:36	20	(
ARGUMENT	471:37	471:37	20	i
FIELD	471:37	471:37	21	i
LEAF_NODE	471:37	471:37	22	i
LEAF_NODE	471:38	471:38	20	,
ARGUMENT	471:40	471:55	20	colormapSize - 1
FIELD	471:40	471:40	21	colormapSize
LEAF_NODE	471:40	471:40	22	colormapSize
LEAF_NODE	471:53	471:53	21	-
FIELD	471:55	471:55	21	1
LEAF_NODE	471:55	471:55	22	1
LEAF_NODE	471:56	471:56	20	)
LEAF_NODE	471:57	471:57	12	;
LEAF_NODE	472:8	472:8	8	}
SELECTION	472:10	472:15	6	
KEYWORD	472:10	472:10	7	else
LEAF_NODE	472:10	472:10	8	else
STATEMENTS	472:15	479:8	7	
LEAF_NODE	472:15	472:15	8	{
STATEMENTS	473:12	474:12	8	
EXPR_STATEMENT	473:12	473:37	9	CheckAndCorrectColormap ( ) ;
EXPR	473:12	473:12	10	CheckAndCorrectColormap ( )
FUNCTION_CALL	473:12	473:36	11	CheckAndCorrectColormap ( )
CALLEE	473:12	473:12	12	CheckAndCorrectColormap
LEAF_NODE	473:12	473:12	13	CheckAndCorrectColormap
LEAF_NODE	473:35	473:35	12	(
LEAF_NODE	473:36	473:36	12	)
LEAF_NODE	473:37	473:37	10	;
ITERATION	474:12	474:47	9	
KEYWORD	474:12	474:12	10	for
LEAF_NODE	474:12	474:12	11	for
LEAF_NODE	474:16	474:16	10	(
FOR_INIT	474:17	474:22	10	i = 0 ;
EXPR	474:17	474:17	11	i = 0
ASSIGN	474:17	474:21	12	i = 0
LVAL	474:17	474:17	13	i
FIELD	474:17	474:17	14	i
LEAF_NODE	474:17	474:17	15	i
ASSIGN_OP	474:19	474:19	13	=
LEAF_NODE	474:19	474:19	14	=
RVAL	474:21	474:21	13	0
FIELD	474:21	474:21	14	0
LEAF_NODE	474:21	474:21	15	0
LEAF_NODE	474:22	474:22	11	;
CONDITION	474:24	474:24	10	i < colormapSize
EXPR	474:24	474:28	11	i < colormapSize
FIELD	474:24	474:24	12	i
LEAF_NODE	474:24	474:24	13	i
REL_OPERATOR	474:26	474:26	12	<
LEAF_NODE	474:26	474:26	13	<
FIELD	474:28	474:28	12	colormapSize
LEAF_NODE	474:28	474:28	13	colormapSize
LEAF_NODE	474:40	474:40	10	;
FOR_EXPR	474:42	474:42	10	i ++
EXPR	474:42	474:42	11	i ++
FIELD	474:42	474:43	12	i ++
LEAF_NODE	474:42	474:42	13	i
LEAF_NODE	474:43	474:43	13	++
LEAF_NODE	474:45	474:45	10	)
STATEMENTS	474:47	478:12	10	
LEAF_NODE	474:47	474:47	11	{
STATEMENTS	475:16	477:16	11	
EXPR_STATEMENT	475:16	475:44	12	dRed [ i ] = ( double ) redMap [ i ] ;
EXPR	475:16	475:16	13	dRed [ i ] = ( double ) redMap [ i ]
ASSIGN	475:16	475:26	14	dRed [ i ] = ( double ) redMap [ i ]
LVAL	475:16	475:16	15	dRed [ i ]
FIELD	475:16	475:22	16	dRed [ i ]
LEAF_NODE	475:16	475:16	17	dRed
LEAF_NODE	475:20	475:20	17	[
EXPR	475:21	475:21	17	i
FIELD	475:21	475:21	18	i
LEAF_NODE	475:21	475:21	19	i
LEAF_NODE	475:22	475:22	17	]
ASSIGN_OP	475:24	475:24	15	=
LEAF_NODE	475:24	475:24	16	=
RVAL	475:26	475:35	15	( double ) redMap [ i ]
LEAF_NODE	475:26	475:26	16	(
TYPE_NAME	475:27	475:27	16	double
LEAF_NODE	475:27	475:27	17	double
LEAF_NODE	475:33	475:33	16	)
FIELD	475:35	475:43	16	redMap [ i ]
LEAF_NODE	475:35	475:35	17	redMap
LEAF_NODE	475:41	475:41	17	[
EXPR	475:42	475:42	17	i
FIELD	475:42	475:42	18	i
LEAF_NODE	475:42	475:42	19	i
LEAF_NODE	475:43	475:43	17	]
LEAF_NODE	475:44	475:44	13	;
EXPR_STATEMENT	476:16	476:48	12	dGreen [ i ] = ( double ) greenMap [ i ] ;
EXPR	476:16	476:16	13	dGreen [ i ] = ( double ) greenMap [ i ]
ASSIGN	476:16	476:28	14	dGreen [ i ] = ( double ) greenMap [ i ]
LVAL	476:16	476:16	15	dGreen [ i ]
FIELD	476:16	476:24	16	dGreen [ i ]
LEAF_NODE	476:16	476:16	17	dGreen
LEAF_NODE	476:22	476:22	17	[
EXPR	476:23	476:23	17	i
FIELD	476:23	476:23	18	i
LEAF_NODE	476:23	476:23	19	i
LEAF_NODE	476:24	476:24	17	]
ASSIGN_OP	476:26	476:26	15	=
LEAF_NODE	476:26	476:26	16	=
RVAL	476:28	476:37	15	( double ) greenMap [ i ]
LEAF_NODE	476:28	476:28	16	(
TYPE_NAME	476:29	476:29	16	double
LEAF_NODE	476:29	476:29	17	double
LEAF_NODE	476:35	476:35	16	)
FIELD	476:37	476:47	16	greenMap [ i ]
LEAF_NODE	476:37	476:37	17	greenMap
LEAF_NODE	476:45	476:45	17	[
EXPR	476:46	476:46	17	i
FIELD	476:46	476:46	18	i
LEAF_NODE	476:46	476:46	19	i
LEAF_NODE	476:47	476:47	17	]
LEAF_NODE	476:48	476:48	13	;
EXPR_STATEMENT	477:16	477:46	12	dBlue [ i ] = ( double ) blueMap [ i ] ;
EXPR	477:16	477:16	13	dBlue [ i ] = ( double ) blueMap [ i ]
ASSIGN	477:16	477:27	14	dBlue [ i ] = ( double ) blueMap [ i ]
LVAL	477:16	477:16	15	dBlue [ i ]
FIELD	477:16	477:23	16	dBlue [ i ]
LEAF_NODE	477:16	477:16	17	dBlue
LEAF_NODE	477:21	477:21	17	[
EXPR	477:22	477:22	17	i
FIELD	477:22	477:22	18	i
LEAF_NODE	477:22	477:22	19	i
LEAF_NODE	477:23	477:23	17	]
ASSIGN_OP	477:25	477:25	15	=
LEAF_NODE	477:25	477:25	16	=
RVAL	477:27	477:36	15	( double ) blueMap [ i ]
LEAF_NODE	477:27	477:27	16	(
TYPE_NAME	477:28	477:28	16	double
LEAF_NODE	477:28	477:28	17	double
LEAF_NODE	477:34	477:34	16	)
FIELD	477:36	477:45	16	blueMap [ i ]
LEAF_NODE	477:36	477:36	17	blueMap
LEAF_NODE	477:43	477:43	17	[
EXPR	477:44	477:44	17	i
FIELD	477:44	477:44	18	i
LEAF_NODE	477:44	477:44	19	i
LEAF_NODE	477:45	477:45	17	]
LEAF_NODE	477:46	477:46	13	;
LEAF_NODE	478:12	478:12	11	}
LEAF_NODE	479:8	479:8	8	}
JUMP_STATEMENT	480:8	480:13	6	break DESTINATION ;
KEYWORD	480:8	480:8	7	break
LEAF_NODE	480:8	480:8	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	480:13	480:13	7	;
LABEL	481:4	481:31	6	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	481:4	481:4	7	case
LEAF_NODE	481:9	481:9	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	481:31	481:31	7	:
EXPR_STATEMENT	482:8	482:65	6	redMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) ) ;
EXPR	482:8	482:8	7	redMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
ASSIGN	482:8	482:17	8	redMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LVAL	482:8	482:8	9	redMap
FIELD	482:8	482:8	10	redMap
LEAF_NODE	482:8	482:8	11	redMap
ASSIGN_OP	482:15	482:15	9	=
LEAF_NODE	482:15	482:15	10	=
RVAL	482:17	482:28	9	( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LEAF_NODE	482:17	482:17	10	(
TYPE_NAME	482:18	482:18	10	uint16
LEAF_NODE	482:18	482:18	11	uint16
LEAF_NODE	482:25	482:25	10	*
LEAF_NODE	482:26	482:26	10	)
FUNCTION_CALL	482:28	482:64	10	malloc ( colormapSize * sizeof ( uint16 ) )
CALLEE	482:28	482:28	11	malloc
LEAF_NODE	482:28	482:28	12	malloc
LEAF_NODE	482:34	482:34	11	(
ARGUMENT	482:35	482:50	11	colormapSize * sizeof ( uint16 )
FIELD	482:35	482:35	12	colormapSize
LEAF_NODE	482:35	482:35	13	colormapSize
LEAF_NODE	482:48	482:48	12	*
FUNCTION_CALL	482:50	482:63	12	sizeof ( uint16 )
CALLEE	482:50	482:50	13	sizeof
LEAF_NODE	482:50	482:50	14	sizeof
LEAF_NODE	482:56	482:56	13	(
ARGUMENT	482:57	482:57	13	uint16
FIELD	482:57	482:57	14	uint16
LEAF_NODE	482:57	482:57	15	uint16
LEAF_NODE	482:63	482:63	13	)
LEAF_NODE	482:64	482:64	11	)
LEAF_NODE	482:65	482:65	7	;
EXPR_STATEMENT	483:8	483:67	6	greenMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) ) ;
EXPR	483:8	483:8	7	greenMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
ASSIGN	483:8	483:19	8	greenMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LVAL	483:8	483:8	9	greenMap
FIELD	483:8	483:8	10	greenMap
LEAF_NODE	483:8	483:8	11	greenMap
ASSIGN_OP	483:17	483:17	9	=
LEAF_NODE	483:17	483:17	10	=
RVAL	483:19	483:30	9	( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LEAF_NODE	483:19	483:19	10	(
TYPE_NAME	483:20	483:20	10	uint16
LEAF_NODE	483:20	483:20	11	uint16
LEAF_NODE	483:27	483:27	10	*
LEAF_NODE	483:28	483:28	10	)
FUNCTION_CALL	483:30	483:66	10	malloc ( colormapSize * sizeof ( uint16 ) )
CALLEE	483:30	483:30	11	malloc
LEAF_NODE	483:30	483:30	12	malloc
LEAF_NODE	483:36	483:36	11	(
ARGUMENT	483:37	483:52	11	colormapSize * sizeof ( uint16 )
FIELD	483:37	483:37	12	colormapSize
LEAF_NODE	483:37	483:37	13	colormapSize
LEAF_NODE	483:50	483:50	12	*
FUNCTION_CALL	483:52	483:65	12	sizeof ( uint16 )
CALLEE	483:52	483:52	13	sizeof
LEAF_NODE	483:52	483:52	14	sizeof
LEAF_NODE	483:58	483:58	13	(
ARGUMENT	483:59	483:59	13	uint16
FIELD	483:59	483:59	14	uint16
LEAF_NODE	483:59	483:59	15	uint16
LEAF_NODE	483:65	483:65	13	)
LEAF_NODE	483:66	483:66	11	)
LEAF_NODE	483:67	483:67	7	;
EXPR_STATEMENT	484:8	484:66	6	blueMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) ) ;
EXPR	484:8	484:8	7	blueMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
ASSIGN	484:8	484:18	8	blueMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LVAL	484:8	484:8	9	blueMap
FIELD	484:8	484:8	10	blueMap
LEAF_NODE	484:8	484:8	11	blueMap
ASSIGN_OP	484:16	484:16	9	=
LEAF_NODE	484:16	484:16	10	=
RVAL	484:18	484:29	9	( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LEAF_NODE	484:18	484:18	10	(
TYPE_NAME	484:19	484:19	10	uint16
LEAF_NODE	484:19	484:19	11	uint16
LEAF_NODE	484:26	484:26	10	*
LEAF_NODE	484:27	484:27	10	)
FUNCTION_CALL	484:29	484:65	10	malloc ( colormapSize * sizeof ( uint16 ) )
CALLEE	484:29	484:29	11	malloc
LEAF_NODE	484:29	484:29	12	malloc
LEAF_NODE	484:35	484:35	11	(
ARGUMENT	484:36	484:51	11	colormapSize * sizeof ( uint16 )
FIELD	484:36	484:36	12	colormapSize
LEAF_NODE	484:36	484:36	13	colormapSize
LEAF_NODE	484:49	484:49	12	*
FUNCTION_CALL	484:51	484:64	12	sizeof ( uint16 )
CALLEE	484:51	484:51	13	sizeof
LEAF_NODE	484:51	484:51	14	sizeof
LEAF_NODE	484:57	484:57	13	(
ARGUMENT	484:58	484:58	13	uint16
FIELD	484:58	484:58	14	uint16
LEAF_NODE	484:58	484:58	15	uint16
LEAF_NODE	484:64	484:64	13	)
LEAF_NODE	484:65	484:65	11	)
LEAF_NODE	484:66	484:66	7	;
EXPR_STATEMENT	485:8	485:22	6	MCHECK ( redMap ) ;
EXPR	485:8	485:8	7	MCHECK ( redMap )
FUNCTION_CALL	485:8	485:21	8	MCHECK ( redMap )
CALLEE	485:8	485:8	9	MCHECK
LEAF_NODE	485:8	485:8	10	MCHECK
LEAF_NODE	485:14	485:14	9	(
ARGUMENT	485:15	485:15	9	redMap
FIELD	485:15	485:15	10	redMap
LEAF_NODE	485:15	485:15	11	redMap
LEAF_NODE	485:21	485:21	9	)
LEAF_NODE	485:22	485:22	7	;
EXPR_STATEMENT	485:24	485:40	6	MCHECK ( greenMap ) ;
EXPR	485:24	485:24	7	MCHECK ( greenMap )
FUNCTION_CALL	485:24	485:39	8	MCHECK ( greenMap )
CALLEE	485:24	485:24	9	MCHECK
LEAF_NODE	485:24	485:24	10	MCHECK
LEAF_NODE	485:30	485:30	9	(
ARGUMENT	485:31	485:31	9	greenMap
FIELD	485:31	485:31	10	greenMap
LEAF_NODE	485:31	485:31	11	greenMap
LEAF_NODE	485:39	485:39	9	)
LEAF_NODE	485:40	485:40	7	;
EXPR_STATEMENT	485:42	485:57	6	MCHECK ( blueMap ) ;
EXPR	485:42	485:42	7	MCHECK ( blueMap )
FUNCTION_CALL	485:42	485:56	8	MCHECK ( blueMap )
CALLEE	485:42	485:42	9	MCHECK
LEAF_NODE	485:42	485:42	10	MCHECK
LEAF_NODE	485:48	485:48	9	(
ARGUMENT	485:49	485:49	9	blueMap
FIELD	485:49	485:49	10	blueMap
LEAF_NODE	485:49	485:49	11	blueMap
LEAF_NODE	485:56	485:56	9	)
LEAF_NODE	485:57	485:57	7	;
ITERATION	486:1	487:5	6	
KEYWORD	486:1	486:1	7	for
LEAF_NODE	486:1	486:1	8	for
LEAF_NODE	486:5	486:5	7	(
FOR_INIT	486:6	486:11	7	i = 0 ;
EXPR	486:6	486:6	8	i = 0
ASSIGN	486:6	486:10	9	i = 0
LVAL	486:6	486:6	10	i
FIELD	486:6	486:6	11	i
LEAF_NODE	486:6	486:6	12	i
ASSIGN_OP	486:8	486:8	10	=
LEAF_NODE	486:8	486:8	11	=
RVAL	486:10	486:10	10	0
FIELD	486:10	486:10	11	0
LEAF_NODE	486:10	486:10	12	0
LEAF_NODE	486:11	486:11	8	;
CONDITION	486:13	486:13	7	i < colormapSize
EXPR	486:13	486:17	8	i < colormapSize
FIELD	486:13	486:13	9	i
LEAF_NODE	486:13	486:13	10	i
REL_OPERATOR	486:15	486:15	9	<
LEAF_NODE	486:15	486:15	10	<
FIELD	486:17	486:17	9	colormapSize
LEAF_NODE	486:17	486:17	10	colormapSize
LEAF_NODE	486:29	486:29	7	;
FOR_EXPR	486:31	486:31	7	i ++
EXPR	486:31	486:31	8	i ++
FIELD	486:31	486:32	9	i ++
LEAF_NODE	486:31	486:31	10	i
LEAF_NODE	486:32	486:32	10	++
LEAF_NODE	486:34	486:34	7	)
STATEMENTS	487:5	487:5	7	
EXPR_STATEMENT	487:5	488:42	8	dRed [ i ] = dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( colormapSize - 1 - i , colormapSize - 1 ) ;
EXPR	487:5	487:5	9	dRed [ i ] = dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( colormapSize - 1 - i , colormapSize - 1 )
ASSIGN	487:5	487:15	10	dRed [ i ] = dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( colormapSize - 1 - i , colormapSize - 1 )
LVAL	487:5	487:5	11	dRed [ i ]
FIELD	487:5	487:11	12	dRed [ i ]
LEAF_NODE	487:5	487:5	13	dRed
LEAF_NODE	487:9	487:9	13	[
EXPR	487:10	487:10	13	i
FIELD	487:10	487:10	14	i
LEAF_NODE	487:10	487:10	15	i
LEAF_NODE	487:11	487:11	13	]
ASSIGN_OP	487:13	487:13	11	=
LEAF_NODE	487:13	487:13	12	=
RVAL	487:15	487:15	11	dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( colormapSize - 1 - i , colormapSize - 1 )
ASSIGN	487:15	487:27	12	dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( colormapSize - 1 - i , colormapSize - 1 )
LVAL	487:15	487:15	13	dGreen [ i ]
FIELD	487:15	487:23	14	dGreen [ i ]
LEAF_NODE	487:15	487:15	15	dGreen
LEAF_NODE	487:21	487:21	15	[
EXPR	487:22	487:22	15	i
FIELD	487:22	487:22	16	i
LEAF_NODE	487:22	487:22	17	i
LEAF_NODE	487:23	487:23	15	]
ASSIGN_OP	487:25	487:25	13	=
LEAF_NODE	487:25	487:25	14	=
RVAL	487:27	487:27	13	dBlue [ i ] = ( double ) SCALE ( colormapSize - 1 - i , colormapSize - 1 )
ASSIGN	487:27	487:38	14	dBlue [ i ] = ( double ) SCALE ( colormapSize - 1 - i , colormapSize - 1 )
LVAL	487:27	487:27	15	dBlue [ i ]
FIELD	487:27	487:34	16	dBlue [ i ]
LEAF_NODE	487:27	487:27	17	dBlue
LEAF_NODE	487:32	487:32	17	[
EXPR	487:33	487:33	17	i
FIELD	487:33	487:33	18	i
LEAF_NODE	487:33	487:33	19	i
LEAF_NODE	487:34	487:34	17	]
ASSIGN_OP	487:36	487:36	15	=
LEAF_NODE	487:36	487:36	16	=
RVAL	487:38	488:3	15	( double ) SCALE ( colormapSize - 1 - i , colormapSize - 1 )
LEAF_NODE	487:38	487:38	16	(
TYPE_NAME	487:39	487:39	16	double
LEAF_NODE	487:39	487:39	17	double
LEAF_NODE	487:45	487:45	16	)
FUNCTION_CALL	488:3	488:41	16	SCALE ( colormapSize - 1 - i , colormapSize - 1 )
CALLEE	488:3	488:3	17	SCALE
LEAF_NODE	488:3	488:3	18	SCALE
LEAF_NODE	488:8	488:8	17	(
ARGUMENT	488:9	488:24	17	colormapSize - 1 - i
FIELD	488:9	488:9	18	colormapSize
LEAF_NODE	488:9	488:9	19	colormapSize
LEAF_NODE	488:21	488:21	18	-
FIELD	488:22	488:22	18	1
LEAF_NODE	488:22	488:22	19	1
LEAF_NODE	488:23	488:23	18	-
FIELD	488:24	488:24	18	i
LEAF_NODE	488:24	488:24	19	i
LEAF_NODE	488:25	488:25	17	,
ARGUMENT	488:27	488:40	17	colormapSize - 1
FIELD	488:27	488:27	18	colormapSize
LEAF_NODE	488:27	488:27	19	colormapSize
LEAF_NODE	488:39	488:39	18	-
FIELD	488:40	488:40	18	1
LEAF_NODE	488:40	488:40	19	1
LEAF_NODE	488:41	488:41	17	)
LEAF_NODE	488:42	488:42	9	;
JUMP_STATEMENT	489:8	489:13	6	break DESTINATION ;
KEYWORD	489:8	489:8	7	break
LEAF_NODE	489:8	489:8	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	489:13	489:13	7	;
LABEL	490:4	490:31	6	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	490:4	490:4	7	case
LEAF_NODE	490:9	490:9	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	490:31	490:31	7	:
EXPR_STATEMENT	491:8	491:65	6	redMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) ) ;
EXPR	491:8	491:8	7	redMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
ASSIGN	491:8	491:17	8	redMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LVAL	491:8	491:8	9	redMap
FIELD	491:8	491:8	10	redMap
LEAF_NODE	491:8	491:8	11	redMap
ASSIGN_OP	491:15	491:15	9	=
LEAF_NODE	491:15	491:15	10	=
RVAL	491:17	491:28	9	( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LEAF_NODE	491:17	491:17	10	(
TYPE_NAME	491:18	491:18	10	uint16
LEAF_NODE	491:18	491:18	11	uint16
LEAF_NODE	491:25	491:25	10	*
LEAF_NODE	491:26	491:26	10	)
FUNCTION_CALL	491:28	491:64	10	malloc ( colormapSize * sizeof ( uint16 ) )
CALLEE	491:28	491:28	11	malloc
LEAF_NODE	491:28	491:28	12	malloc
LEAF_NODE	491:34	491:34	11	(
ARGUMENT	491:35	491:50	11	colormapSize * sizeof ( uint16 )
FIELD	491:35	491:35	12	colormapSize
LEAF_NODE	491:35	491:35	13	colormapSize
LEAF_NODE	491:48	491:48	12	*
FUNCTION_CALL	491:50	491:63	12	sizeof ( uint16 )
CALLEE	491:50	491:50	13	sizeof
LEAF_NODE	491:50	491:50	14	sizeof
LEAF_NODE	491:56	491:56	13	(
ARGUMENT	491:57	491:57	13	uint16
FIELD	491:57	491:57	14	uint16
LEAF_NODE	491:57	491:57	15	uint16
LEAF_NODE	491:63	491:63	13	)
LEAF_NODE	491:64	491:64	11	)
LEAF_NODE	491:65	491:65	7	;
EXPR_STATEMENT	492:8	492:67	6	greenMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) ) ;
EXPR	492:8	492:8	7	greenMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
ASSIGN	492:8	492:19	8	greenMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LVAL	492:8	492:8	9	greenMap
FIELD	492:8	492:8	10	greenMap
LEAF_NODE	492:8	492:8	11	greenMap
ASSIGN_OP	492:17	492:17	9	=
LEAF_NODE	492:17	492:17	10	=
RVAL	492:19	492:30	9	( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LEAF_NODE	492:19	492:19	10	(
TYPE_NAME	492:20	492:20	10	uint16
LEAF_NODE	492:20	492:20	11	uint16
LEAF_NODE	492:27	492:27	10	*
LEAF_NODE	492:28	492:28	10	)
FUNCTION_CALL	492:30	492:66	10	malloc ( colormapSize * sizeof ( uint16 ) )
CALLEE	492:30	492:30	11	malloc
LEAF_NODE	492:30	492:30	12	malloc
LEAF_NODE	492:36	492:36	11	(
ARGUMENT	492:37	492:52	11	colormapSize * sizeof ( uint16 )
FIELD	492:37	492:37	12	colormapSize
LEAF_NODE	492:37	492:37	13	colormapSize
LEAF_NODE	492:50	492:50	12	*
FUNCTION_CALL	492:52	492:65	12	sizeof ( uint16 )
CALLEE	492:52	492:52	13	sizeof
LEAF_NODE	492:52	492:52	14	sizeof
LEAF_NODE	492:58	492:58	13	(
ARGUMENT	492:59	492:59	13	uint16
FIELD	492:59	492:59	14	uint16
LEAF_NODE	492:59	492:59	15	uint16
LEAF_NODE	492:65	492:65	13	)
LEAF_NODE	492:66	492:66	11	)
LEAF_NODE	492:67	492:67	7	;
EXPR_STATEMENT	493:8	493:66	6	blueMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) ) ;
EXPR	493:8	493:8	7	blueMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
ASSIGN	493:8	493:18	8	blueMap = ( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LVAL	493:8	493:8	9	blueMap
FIELD	493:8	493:8	10	blueMap
LEAF_NODE	493:8	493:8	11	blueMap
ASSIGN_OP	493:16	493:16	9	=
LEAF_NODE	493:16	493:16	10	=
RVAL	493:18	493:29	9	( uint16 * ) malloc ( colormapSize * sizeof ( uint16 ) )
LEAF_NODE	493:18	493:18	10	(
TYPE_NAME	493:19	493:19	10	uint16
LEAF_NODE	493:19	493:19	11	uint16
LEAF_NODE	493:26	493:26	10	*
LEAF_NODE	493:27	493:27	10	)
FUNCTION_CALL	493:29	493:65	10	malloc ( colormapSize * sizeof ( uint16 ) )
CALLEE	493:29	493:29	11	malloc
LEAF_NODE	493:29	493:29	12	malloc
LEAF_NODE	493:35	493:35	11	(
ARGUMENT	493:36	493:51	11	colormapSize * sizeof ( uint16 )
FIELD	493:36	493:36	12	colormapSize
LEAF_NODE	493:36	493:36	13	colormapSize
LEAF_NODE	493:49	493:49	12	*
FUNCTION_CALL	493:51	493:64	12	sizeof ( uint16 )
CALLEE	493:51	493:51	13	sizeof
LEAF_NODE	493:51	493:51	14	sizeof
LEAF_NODE	493:57	493:57	13	(
ARGUMENT	493:58	493:58	13	uint16
FIELD	493:58	493:58	14	uint16
LEAF_NODE	493:58	493:58	15	uint16
LEAF_NODE	493:64	493:64	13	)
LEAF_NODE	493:65	493:65	11	)
LEAF_NODE	493:66	493:66	7	;
EXPR_STATEMENT	494:8	494:22	6	MCHECK ( redMap ) ;
EXPR	494:8	494:8	7	MCHECK ( redMap )
FUNCTION_CALL	494:8	494:21	8	MCHECK ( redMap )
CALLEE	494:8	494:8	9	MCHECK
LEAF_NODE	494:8	494:8	10	MCHECK
LEAF_NODE	494:14	494:14	9	(
ARGUMENT	494:15	494:15	9	redMap
FIELD	494:15	494:15	10	redMap
LEAF_NODE	494:15	494:15	11	redMap
LEAF_NODE	494:21	494:21	9	)
LEAF_NODE	494:22	494:22	7	;
EXPR_STATEMENT	494:24	494:40	6	MCHECK ( greenMap ) ;
EXPR	494:24	494:24	7	MCHECK ( greenMap )
FUNCTION_CALL	494:24	494:39	8	MCHECK ( greenMap )
CALLEE	494:24	494:24	9	MCHECK
LEAF_NODE	494:24	494:24	10	MCHECK
LEAF_NODE	494:30	494:30	9	(
ARGUMENT	494:31	494:31	9	greenMap
FIELD	494:31	494:31	10	greenMap
LEAF_NODE	494:31	494:31	11	greenMap
LEAF_NODE	494:39	494:39	9	)
LEAF_NODE	494:40	494:40	7	;
EXPR_STATEMENT	494:42	494:57	6	MCHECK ( blueMap ) ;
EXPR	494:42	494:42	7	MCHECK ( blueMap )
FUNCTION_CALL	494:42	494:56	8	MCHECK ( blueMap )
CALLEE	494:42	494:42	9	MCHECK
LEAF_NODE	494:42	494:42	10	MCHECK
LEAF_NODE	494:48	494:48	9	(
ARGUMENT	494:49	494:49	9	blueMap
FIELD	494:49	494:49	10	blueMap
LEAF_NODE	494:49	494:49	11	blueMap
LEAF_NODE	494:56	494:56	9	)
LEAF_NODE	494:57	494:57	7	;
ITERATION	495:1	496:5	6	
KEYWORD	495:1	495:1	7	for
LEAF_NODE	495:1	495:1	8	for
LEAF_NODE	495:5	495:5	7	(
FOR_INIT	495:6	495:11	7	i = 0 ;
EXPR	495:6	495:6	8	i = 0
ASSIGN	495:6	495:10	9	i = 0
LVAL	495:6	495:6	10	i
FIELD	495:6	495:6	11	i
LEAF_NODE	495:6	495:6	12	i
ASSIGN_OP	495:8	495:8	10	=
LEAF_NODE	495:8	495:8	11	=
RVAL	495:10	495:10	10	0
FIELD	495:10	495:10	11	0
LEAF_NODE	495:10	495:10	12	0
LEAF_NODE	495:11	495:11	8	;
CONDITION	495:13	495:13	7	i < colormapSize
EXPR	495:13	495:17	8	i < colormapSize
FIELD	495:13	495:13	9	i
LEAF_NODE	495:13	495:13	10	i
REL_OPERATOR	495:15	495:15	9	<
LEAF_NODE	495:15	495:15	10	<
FIELD	495:17	495:17	9	colormapSize
LEAF_NODE	495:17	495:17	10	colormapSize
LEAF_NODE	495:29	495:29	7	;
FOR_EXPR	495:31	495:31	7	i ++
EXPR	495:31	495:31	8	i ++
FIELD	495:31	495:32	9	i ++
LEAF_NODE	495:31	495:31	10	i
LEAF_NODE	495:32	495:32	10	++
LEAF_NODE	495:34	495:34	7	)
STATEMENTS	496:5	496:5	7	
EXPR_STATEMENT	496:5	496:71	8	dRed [ i ] = dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 ) ;
EXPR	496:5	496:5	9	dRed [ i ] = dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
ASSIGN	496:5	496:15	10	dRed [ i ] = dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
LVAL	496:5	496:5	11	dRed [ i ]
FIELD	496:5	496:11	12	dRed [ i ]
LEAF_NODE	496:5	496:5	13	dRed
LEAF_NODE	496:9	496:9	13	[
EXPR	496:10	496:10	13	i
FIELD	496:10	496:10	14	i
LEAF_NODE	496:10	496:10	15	i
LEAF_NODE	496:11	496:11	13	]
ASSIGN_OP	496:13	496:13	11	=
LEAF_NODE	496:13	496:13	12	=
RVAL	496:15	496:15	11	dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
ASSIGN	496:15	496:27	12	dGreen [ i ] = dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
LVAL	496:15	496:15	13	dGreen [ i ]
FIELD	496:15	496:23	14	dGreen [ i ]
LEAF_NODE	496:15	496:15	15	dGreen
LEAF_NODE	496:21	496:21	15	[
EXPR	496:22	496:22	15	i
FIELD	496:22	496:22	16	i
LEAF_NODE	496:22	496:22	17	i
LEAF_NODE	496:23	496:23	15	]
ASSIGN_OP	496:25	496:25	13	=
LEAF_NODE	496:25	496:25	14	=
RVAL	496:27	496:27	13	dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
ASSIGN	496:27	496:38	14	dBlue [ i ] = ( double ) SCALE ( i , colormapSize - 1 )
LVAL	496:27	496:27	15	dBlue [ i ]
FIELD	496:27	496:34	16	dBlue [ i ]
LEAF_NODE	496:27	496:27	17	dBlue
LEAF_NODE	496:32	496:32	17	[
EXPR	496:33	496:33	17	i
FIELD	496:33	496:33	18	i
LEAF_NODE	496:33	496:33	19	i
LEAF_NODE	496:34	496:34	17	]
ASSIGN_OP	496:36	496:36	15	=
LEAF_NODE	496:36	496:36	16	=
RVAL	496:38	496:47	15	( double ) SCALE ( i , colormapSize - 1 )
LEAF_NODE	496:38	496:38	16	(
TYPE_NAME	496:39	496:39	16	double
LEAF_NODE	496:39	496:39	17	double
LEAF_NODE	496:45	496:45	16	)
FUNCTION_CALL	496:47	496:70	16	SCALE ( i , colormapSize - 1 )
CALLEE	496:47	496:47	17	SCALE
LEAF_NODE	496:47	496:47	18	SCALE
LEAF_NODE	496:52	496:52	17	(
ARGUMENT	496:53	496:53	17	i
FIELD	496:53	496:53	18	i
LEAF_NODE	496:53	496:53	19	i
LEAF_NODE	496:54	496:54	17	,
ARGUMENT	496:56	496:69	17	colormapSize - 1
FIELD	496:56	496:56	18	colormapSize
LEAF_NODE	496:56	496:56	19	colormapSize
LEAF_NODE	496:68	496:68	18	-
FIELD	496:69	496:69	18	1
LEAF_NODE	496:69	496:69	19	1
LEAF_NODE	496:70	496:70	17	)
LEAF_NODE	496:71	496:71	9	;
JUMP_STATEMENT	497:8	497:13	6	break DESTINATION ;
KEYWORD	497:8	497:8	7	break
LEAF_NODE	497:8	497:8	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	497:13	497:13	7	;
LABEL	498:4	498:11	6	default :
LEAF_NODE	498:4	498:4	7	default
LEAF_NODE	498:11	498:11	7	:
EXPR_STATEMENT	499:8	501:40	6	fprintf ( stderr , "xtiff: can't display photometric interpretation type %d\n" , tfPhotometricInterpretation ) ;
EXPR	499:8	499:8	7	fprintf ( stderr , "xtiff: can't display photometric interpretation type %d\n" , tfPhotometricInterpretation )
FUNCTION_CALL	499:8	501:39	8	fprintf ( stderr , "xtiff: can't display photometric interpretation type %d\n" , tfPhotometricInterpretation )
CALLEE	499:8	499:8	9	fprintf
LEAF_NODE	499:8	499:8	10	fprintf
LEAF_NODE	499:15	499:15	9	(
ARGUMENT	499:16	499:16	9	stderr
FIELD	499:16	499:16	10	stderr
LEAF_NODE	499:16	499:16	11	stderr
LEAF_NODE	499:22	499:22	9	,
ARGUMENT	500:12	500:12	9	"xtiff: can't display photometric interpretation type %d\n"
FIELD	500:12	500:12	10	"xtiff: can't display photometric interpretation type %d\n"
LEAF_NODE	500:12	500:12	11	"xtiff: can't display photometric interpretation type %d\n"
LEAF_NODE	500:71	500:71	9	,
ARGUMENT	501:12	501:12	9	tfPhotometricInterpretation
FIELD	501:12	501:12	10	tfPhotometricInterpretation
LEAF_NODE	501:12	501:12	11	tfPhotometricInterpretation
LEAF_NODE	501:39	501:39	9	)
LEAF_NODE	501:40	501:40	7	;
EXPR_STATEMENT	502:8	502:15	6	exit ( 0 ) ;
EXPR	502:8	502:8	7	exit ( 0 )
FUNCTION_CALL	502:8	502:14	8	exit ( 0 )
CALLEE	502:8	502:8	9	exit
LEAF_NODE	502:8	502:8	10	exit
LEAF_NODE	502:12	502:12	9	(
ARGUMENT	502:13	502:13	9	0
FIELD	502:13	502:13	10	0
LEAF_NODE	502:13	502:13	11	0
LEAF_NODE	502:14	502:14	9	)
LEAF_NODE	502:15	502:15	7	;
LEAF_NODE	503:4	503:4	5	}
LEAF_NODE	504:0	504:0	2	}
FUNCTION_DEF	506:0	518:0	1	
RETURN_TYPE	506:0	506:0	2	void
TYPE_NAME	506:0	506:0	3	void
LEAF_NODE	506:0	506:0	4	void
FUNCTION_NAME	507:0	507:0	2	SetNameLabel
LEAF_NODE	507:0	507:0	3	SetNameLabel
PARAMETER_LIST	507:12	507:13	2	( )
LEAF_NODE	507:12	507:12	3	(
LEAF_NODE	507:13	507:13	3	)
LEAF_NODE	508:0	508:0	2	{
STATEMENTS	509:4	517:4	2	
SIMPLE_DECL	509:4	509:23	3	char [ BUFSIZ ] buffer ;
VAR_DECL	509:4	509:9	4	char [ BUFSIZ ] buffer
TYPE	509:4	509:15	5	char [ BUFSIZ ]
TYPE_NAME	509:4	509:4	6	char
LEAF_NODE	509:4	509:4	7	char
TYPE_SUFFIX	509:15	509:22	6	[ BUFSIZ ]
LEAF_NODE	509:15	509:15	7	[
FIELD	509:16	509:16	7	BUFSIZ
LEAF_NODE	509:16	509:16	8	BUFSIZ
LEAF_NODE	509:22	509:22	7	]
NAME	509:9	509:9	5	buffer
LEAF_NODE	509:9	509:9	6	buffer
LEAF_NODE	509:23	509:23	4	;
SIMPLE_DECL	510:4	510:15	3	Arg [ 1 ] args ;
VAR_DECL	510:4	510:8	4	Arg [ 1 ] args
TYPE	510:4	510:12	5	Arg [ 1 ]
TYPE_NAME	510:4	510:4	6	Arg
LEAF_NODE	510:4	510:4	7	Arg
TYPE_SUFFIX	510:12	510:14	6	[ 1 ]
LEAF_NODE	510:12	510:12	7	[
FIELD	510:13	510:13	7	1
LEAF_NODE	510:13	510:13	8	1
LEAF_NODE	510:14	510:14	7	]
NAME	510:8	510:8	5	args
LEAF_NODE	510:8	510:8	6	args
LEAF_NODE	510:15	510:15	4	;
SELECTION	512:4	513:8	3	
KEYWORD	512:4	512:4	4	if
LEAF_NODE	512:4	512:4	5	if
LEAF_NODE	512:7	512:7	4	(
CONDITION	512:8	512:8	4	tfMultiPage
EXPR	512:8	512:8	5	tfMultiPage
FIELD	512:8	512:8	6	tfMultiPage
LEAF_NODE	512:8	512:8	7	tfMultiPage
LEAF_NODE	512:19	512:19	4	)
STATEMENTS	513:8	513:8	4	
EXPR_STATEMENT	513:8	513:79	5	snprintf ( buffer , sizeof ( buffer ) , "%s - page %d" , fileName , tfDirectory ) ;
EXPR	513:8	513:8	6	snprintf ( buffer , sizeof ( buffer ) , "%s - page %d" , fileName , tfDirectory )
FUNCTION_CALL	513:8	513:78	7	snprintf ( buffer , sizeof ( buffer ) , "%s - page %d" , fileName , tfDirectory )
CALLEE	513:8	513:8	8	snprintf
LEAF_NODE	513:8	513:8	9	snprintf
LEAF_NODE	513:16	513:16	8	(
ARGUMENT	513:17	513:17	8	buffer
FIELD	513:17	513:17	9	buffer
LEAF_NODE	513:17	513:17	10	buffer
LEAF_NODE	513:23	513:23	8	,
ARGUMENT	513:25	513:25	8	sizeof ( buffer )
FUNCTION_CALL	513:25	513:38	9	sizeof ( buffer )
CALLEE	513:25	513:25	10	sizeof
LEAF_NODE	513:25	513:25	11	sizeof
LEAF_NODE	513:31	513:31	10	(
ARGUMENT	513:32	513:32	10	buffer
FIELD	513:32	513:32	11	buffer
LEAF_NODE	513:32	513:32	12	buffer
LEAF_NODE	513:38	513:38	10	)
LEAF_NODE	513:39	513:39	8	,
ARGUMENT	513:41	513:41	8	"%s - page %d"
FIELD	513:41	513:41	9	"%s - page %d"
LEAF_NODE	513:41	513:41	10	"%s - page %d"
LEAF_NODE	513:55	513:55	8	,
ARGUMENT	513:57	513:57	8	fileName
FIELD	513:57	513:57	9	fileName
LEAF_NODE	513:57	513:57	10	fileName
LEAF_NODE	513:65	513:65	8	,
ARGUMENT	513:67	513:67	8	tfDirectory
FIELD	513:67	513:67	9	tfDirectory
LEAF_NODE	513:67	513:67	10	tfDirectory
LEAF_NODE	513:78	513:78	8	)
LEAF_NODE	513:79	513:79	6	;
SELECTION	514:4	515:8	3	
KEYWORD	514:4	514:4	4	else
LEAF_NODE	514:4	514:4	5	else
STATEMENTS	515:8	515:8	4	
EXPR_STATEMENT	515:8	515:56	5	snprintf ( buffer , sizeof ( buffer ) , "%s" , fileName ) ;
EXPR	515:8	515:8	6	snprintf ( buffer , sizeof ( buffer ) , "%s" , fileName )
FUNCTION_CALL	515:8	515:55	7	snprintf ( buffer , sizeof ( buffer ) , "%s" , fileName )
CALLEE	515:8	515:8	8	snprintf
LEAF_NODE	515:8	515:8	9	snprintf
LEAF_NODE	515:16	515:16	8	(
ARGUMENT	515:17	515:17	8	buffer
FIELD	515:17	515:17	9	buffer
LEAF_NODE	515:17	515:17	10	buffer
LEAF_NODE	515:23	515:23	8	,
ARGUMENT	515:25	515:25	8	sizeof ( buffer )
FUNCTION_CALL	515:25	515:38	9	sizeof ( buffer )
CALLEE	515:25	515:25	10	sizeof
LEAF_NODE	515:25	515:25	11	sizeof
LEAF_NODE	515:31	515:31	10	(
ARGUMENT	515:32	515:32	10	buffer
FIELD	515:32	515:32	11	buffer
LEAF_NODE	515:32	515:32	12	buffer
LEAF_NODE	515:38	515:38	10	)
LEAF_NODE	515:39	515:39	8	,
ARGUMENT	515:41	515:41	8	"%s"
FIELD	515:41	515:41	9	"%s"
LEAF_NODE	515:41	515:41	10	"%s"
LEAF_NODE	515:45	515:45	8	,
ARGUMENT	515:47	515:47	8	fileName
FIELD	515:47	515:47	9	fileName
LEAF_NODE	515:47	515:47	10	fileName
LEAF_NODE	515:55	515:55	8	)
LEAF_NODE	515:56	515:56	6	;
EXPR_STATEMENT	516:4	516:39	3	XtSetArg ( args [ 0 ] , XtNlabel , buffer ) ;
EXPR	516:4	516:4	4	XtSetArg ( args [ 0 ] , XtNlabel , buffer )
FUNCTION_CALL	516:4	516:38	5	XtSetArg ( args [ 0 ] , XtNlabel , buffer )
CALLEE	516:4	516:4	6	XtSetArg
LEAF_NODE	516:4	516:4	7	XtSetArg
LEAF_NODE	516:12	516:12	6	(
ARGUMENT	516:13	516:13	6	args [ 0 ]
FIELD	516:13	516:19	7	args [ 0 ]
LEAF_NODE	516:13	516:13	8	args
LEAF_NODE	516:17	516:17	8	[
EXPR	516:18	516:18	8	0
FIELD	516:18	516:18	9	0
LEAF_NODE	516:18	516:18	10	0
LEAF_NODE	516:19	516:19	8	]
LEAF_NODE	516:20	516:20	6	,
ARGUMENT	516:22	516:22	6	XtNlabel
FIELD	516:22	516:22	7	XtNlabel
LEAF_NODE	516:22	516:22	8	XtNlabel
LEAF_NODE	516:30	516:30	6	,
ARGUMENT	516:32	516:32	6	buffer
FIELD	516:32	516:32	7	buffer
LEAF_NODE	516:32	516:32	8	buffer
LEAF_NODE	516:38	516:38	6	)
LEAF_NODE	516:39	516:39	4	;
EXPR_STATEMENT	517:4	517:37	3	XtSetValues ( labelWidget , args , 1 ) ;
EXPR	517:4	517:4	4	XtSetValues ( labelWidget , args , 1 )
FUNCTION_CALL	517:4	517:36	5	XtSetValues ( labelWidget , args , 1 )
CALLEE	517:4	517:4	6	XtSetValues
LEAF_NODE	517:4	517:4	7	XtSetValues
LEAF_NODE	517:15	517:15	6	(
ARGUMENT	517:16	517:16	6	labelWidget
FIELD	517:16	517:16	7	labelWidget
LEAF_NODE	517:16	517:16	8	labelWidget
LEAF_NODE	517:27	517:27	6	,
ARGUMENT	517:29	517:29	6	args
FIELD	517:29	517:29	7	args
LEAF_NODE	517:29	517:29	8	args
LEAF_NODE	517:33	517:33	6	,
ARGUMENT	517:35	517:35	6	1
FIELD	517:35	517:35	7	1
LEAF_NODE	517:35	517:35	8	1
LEAF_NODE	517:36	517:36	6	)
LEAF_NODE	517:37	517:37	4	;
LEAF_NODE	518:0	518:0	2	}
FUNCTION_DEF	524:0	539:0	1	
RETURN_TYPE	524:0	524:0	2	void
TYPE_NAME	524:0	524:0	3	void
LEAF_NODE	524:0	524:0	4	void
FUNCTION_NAME	525:0	525:0	2	CheckAndCorrectColormap
LEAF_NODE	525:0	525:0	3	CheckAndCorrectColormap
PARAMETER_LIST	525:23	525:24	2	( )
LEAF_NODE	525:23	525:23	3	(
LEAF_NODE	525:24	525:24	3	)
LEAF_NODE	526:0	526:0	2	{
STATEMENTS	527:4	538:4	2	
LEAF_NODE	527:4	527:4	3	register
SIMPLE_DECL	527:13	527:18	3	int i ;
VAR_DECL	527:13	527:17	4	int i
TYPE	527:13	527:13	5	int
TYPE_NAME	527:13	527:13	6	int
LEAF_NODE	527:13	527:13	7	int
NAME	527:17	527:17	5	i
LEAF_NODE	527:17	527:17	6	i
LEAF_NODE	527:18	527:18	4	;
ITERATION	529:4	530:8	3	
KEYWORD	529:4	529:4	4	for
LEAF_NODE	529:4	529:4	5	for
LEAF_NODE	529:8	529:8	4	(
FOR_INIT	529:9	529:14	4	i = 0 ;
EXPR	529:9	529:9	5	i = 0
ASSIGN	529:9	529:13	6	i = 0
LVAL	529:9	529:9	7	i
FIELD	529:9	529:9	8	i
LEAF_NODE	529:9	529:9	9	i
ASSIGN_OP	529:11	529:11	7	=
LEAF_NODE	529:11	529:11	8	=
RVAL	529:13	529:13	7	0
FIELD	529:13	529:13	8	0
LEAF_NODE	529:13	529:13	9	0
LEAF_NODE	529:14	529:14	5	;
CONDITION	529:16	529:16	4	i < colormapSize
EXPR	529:16	529:20	5	i < colormapSize
FIELD	529:16	529:16	6	i
LEAF_NODE	529:16	529:16	7	i
REL_OPERATOR	529:18	529:18	6	<
LEAF_NODE	529:18	529:18	7	<
FIELD	529:20	529:20	6	colormapSize
LEAF_NODE	529:20	529:20	7	colormapSize
LEAF_NODE	529:32	529:32	4	;
FOR_EXPR	529:34	529:34	4	i ++
EXPR	529:34	529:34	5	i ++
FIELD	529:34	529:35	6	i ++
LEAF_NODE	529:34	529:34	7	i
LEAF_NODE	529:35	529:35	7	++
LEAF_NODE	529:37	529:37	4	)
STATEMENTS	530:8	530:8	4	
SELECTION	530:8	531:12	5	
KEYWORD	530:8	530:8	6	if
LEAF_NODE	530:8	530:8	7	if
LEAF_NODE	530:11	530:11	6	(
CONDITION	530:12	530:12	6	( redMap [ i ] > 255 ) || ( greenMap [ i ] > 255 ) || ( blueMap [ i ] > 255 )
EXPR	530:12	530:12	7	( redMap [ i ] > 255 ) || ( greenMap [ i ] > 255 ) || ( blueMap [ i ] > 255 )
OR	530:12	530:33	8	( redMap [ i ] > 255 ) || ( greenMap [ i ] > 255 ) || ( blueMap [ i ] > 255 )
EXPR	530:12	530:28	9	( redMap [ i ] > 255 )
LEAF_NODE	530:12	530:12	10	(
FIELD	530:13	530:21	10	redMap [ i ]
LEAF_NODE	530:13	530:13	11	redMap
LEAF_NODE	530:19	530:19	11	[
EXPR	530:20	530:20	11	i
FIELD	530:20	530:20	12	i
LEAF_NODE	530:20	530:20	13	i
LEAF_NODE	530:21	530:21	11	]
REL_OPERATOR	530:23	530:23	10	>
LEAF_NODE	530:23	530:23	11	>
FIELD	530:25	530:25	10	255
LEAF_NODE	530:25	530:25	11	255
LEAF_NODE	530:28	530:28	10	)
LEAF_NODE	530:30	530:30	9	||
EXPR	530:33	530:33	9	( greenMap [ i ] > 255 ) || ( blueMap [ i ] > 255 )
OR	530:33	530:56	10	( greenMap [ i ] > 255 ) || ( blueMap [ i ] > 255 )
EXPR	530:33	530:51	11	( greenMap [ i ] > 255 )
LEAF_NODE	530:33	530:33	12	(
FIELD	530:34	530:44	12	greenMap [ i ]
LEAF_NODE	530:34	530:34	13	greenMap
LEAF_NODE	530:42	530:42	13	[
EXPR	530:43	530:43	13	i
FIELD	530:43	530:43	14	i
LEAF_NODE	530:43	530:43	15	i
LEAF_NODE	530:44	530:44	13	]
REL_OPERATOR	530:46	530:46	12	>
LEAF_NODE	530:46	530:46	13	>
FIELD	530:48	530:48	12	255
LEAF_NODE	530:48	530:48	13	255
LEAF_NODE	530:51	530:51	12	)
LEAF_NODE	530:53	530:53	11	||
EXPR	530:56	530:73	11	( blueMap [ i ] > 255 )
LEAF_NODE	530:56	530:56	12	(
FIELD	530:57	530:66	12	blueMap [ i ]
LEAF_NODE	530:57	530:57	13	blueMap
LEAF_NODE	530:64	530:64	13	[
EXPR	530:65	530:65	13	i
FIELD	530:65	530:65	14	i
LEAF_NODE	530:65	530:65	15	i
LEAF_NODE	530:66	530:66	13	]
REL_OPERATOR	530:68	530:68	12	>
LEAF_NODE	530:68	530:68	13	>
FIELD	530:70	530:70	12	255
LEAF_NODE	530:70	530:70	13	255
LEAF_NODE	530:73	530:73	12	)
LEAF_NODE	530:74	530:74	6	)
STATEMENTS	531:12	531:12	6	
JUMP_STATEMENT	531:12	531:18	7	return DESTINATION ;
KEYWORD	531:12	531:12	8	return
LEAF_NODE	531:12	531:12	9	return
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	531:18	531:18	8	;
ITERATION	533:4	533:39	3	
KEYWORD	533:4	533:4	4	for
LEAF_NODE	533:4	533:4	5	for
LEAF_NODE	533:8	533:8	4	(
FOR_INIT	533:9	533:14	4	i = 0 ;
EXPR	533:9	533:9	5	i = 0
ASSIGN	533:9	533:13	6	i = 0
LVAL	533:9	533:9	7	i
FIELD	533:9	533:9	8	i
LEAF_NODE	533:9	533:9	9	i
ASSIGN_OP	533:11	533:11	7	=
LEAF_NODE	533:11	533:11	8	=
RVAL	533:13	533:13	7	0
FIELD	533:13	533:13	8	0
LEAF_NODE	533:13	533:13	9	0
LEAF_NODE	533:14	533:14	5	;
CONDITION	533:16	533:16	4	i < colormapSize
EXPR	533:16	533:20	5	i < colormapSize
FIELD	533:16	533:16	6	i
LEAF_NODE	533:16	533:16	7	i
REL_OPERATOR	533:18	533:18	6	<
LEAF_NODE	533:18	533:18	7	<
FIELD	533:20	533:20	6	colormapSize
LEAF_NODE	533:20	533:20	7	colormapSize
LEAF_NODE	533:32	533:32	4	;
FOR_EXPR	533:34	533:34	4	i ++
EXPR	533:34	533:34	5	i ++
FIELD	533:34	533:35	6	i ++
LEAF_NODE	533:34	533:34	7	i
LEAF_NODE	533:35	533:35	7	++
LEAF_NODE	533:37	533:37	4	)
STATEMENTS	533:39	537:4	4	
LEAF_NODE	533:39	533:39	5	{
STATEMENTS	534:8	536:8	5	
EXPR_STATEMENT	534:8	534:41	6	redMap [ i ] = SCALE ( redMap [ i ] , 255 ) ;
EXPR	534:8	534:8	7	redMap [ i ] = SCALE ( redMap [ i ] , 255 )
ASSIGN	534:8	534:20	8	redMap [ i ] = SCALE ( redMap [ i ] , 255 )
LVAL	534:8	534:8	9	redMap [ i ]
FIELD	534:8	534:16	10	redMap [ i ]
LEAF_NODE	534:8	534:8	11	redMap
LEAF_NODE	534:14	534:14	11	[
EXPR	534:15	534:15	11	i
FIELD	534:15	534:15	12	i
LEAF_NODE	534:15	534:15	13	i
LEAF_NODE	534:16	534:16	11	]
ASSIGN_OP	534:18	534:18	9	=
LEAF_NODE	534:18	534:18	10	=
RVAL	534:20	534:20	9	SCALE ( redMap [ i ] , 255 )
FUNCTION_CALL	534:20	534:40	10	SCALE ( redMap [ i ] , 255 )
CALLEE	534:20	534:20	11	SCALE
LEAF_NODE	534:20	534:20	12	SCALE
LEAF_NODE	534:25	534:25	11	(
ARGUMENT	534:26	534:26	11	redMap [ i ]
FIELD	534:26	534:34	12	redMap [ i ]
LEAF_NODE	534:26	534:26	13	redMap
LEAF_NODE	534:32	534:32	13	[
EXPR	534:33	534:33	13	i
FIELD	534:33	534:33	14	i
LEAF_NODE	534:33	534:33	15	i
LEAF_NODE	534:34	534:34	13	]
LEAF_NODE	534:35	534:35	11	,
ARGUMENT	534:37	534:37	11	255
FIELD	534:37	534:37	12	255
LEAF_NODE	534:37	534:37	13	255
LEAF_NODE	534:40	534:40	11	)
LEAF_NODE	534:41	534:41	7	;
EXPR_STATEMENT	535:8	535:45	6	greenMap [ i ] = SCALE ( greenMap [ i ] , 255 ) ;
EXPR	535:8	535:8	7	greenMap [ i ] = SCALE ( greenMap [ i ] , 255 )
ASSIGN	535:8	535:22	8	greenMap [ i ] = SCALE ( greenMap [ i ] , 255 )
LVAL	535:8	535:8	9	greenMap [ i ]
FIELD	535:8	535:18	10	greenMap [ i ]
LEAF_NODE	535:8	535:8	11	greenMap
LEAF_NODE	535:16	535:16	11	[
EXPR	535:17	535:17	11	i
FIELD	535:17	535:17	12	i
LEAF_NODE	535:17	535:17	13	i
LEAF_NODE	535:18	535:18	11	]
ASSIGN_OP	535:20	535:20	9	=
LEAF_NODE	535:20	535:20	10	=
RVAL	535:22	535:22	9	SCALE ( greenMap [ i ] , 255 )
FUNCTION_CALL	535:22	535:44	10	SCALE ( greenMap [ i ] , 255 )
CALLEE	535:22	535:22	11	SCALE
LEAF_NODE	535:22	535:22	12	SCALE
LEAF_NODE	535:27	535:27	11	(
ARGUMENT	535:28	535:28	11	greenMap [ i ]
FIELD	535:28	535:38	12	greenMap [ i ]
LEAF_NODE	535:28	535:28	13	greenMap
LEAF_NODE	535:36	535:36	13	[
EXPR	535:37	535:37	13	i
FIELD	535:37	535:37	14	i
LEAF_NODE	535:37	535:37	15	i
LEAF_NODE	535:38	535:38	13	]
LEAF_NODE	535:39	535:39	11	,
ARGUMENT	535:41	535:41	11	255
FIELD	535:41	535:41	12	255
LEAF_NODE	535:41	535:41	13	255
LEAF_NODE	535:44	535:44	11	)
LEAF_NODE	535:45	535:45	7	;
EXPR_STATEMENT	536:8	536:43	6	blueMap [ i ] = SCALE ( blueMap [ i ] , 255 ) ;
EXPR	536:8	536:8	7	blueMap [ i ] = SCALE ( blueMap [ i ] , 255 )
ASSIGN	536:8	536:21	8	blueMap [ i ] = SCALE ( blueMap [ i ] , 255 )
LVAL	536:8	536:8	9	blueMap [ i ]
FIELD	536:8	536:17	10	blueMap [ i ]
LEAF_NODE	536:8	536:8	11	blueMap
LEAF_NODE	536:15	536:15	11	[
EXPR	536:16	536:16	11	i
FIELD	536:16	536:16	12	i
LEAF_NODE	536:16	536:16	13	i
LEAF_NODE	536:17	536:17	11	]
ASSIGN_OP	536:19	536:19	9	=
LEAF_NODE	536:19	536:19	10	=
RVAL	536:21	536:21	9	SCALE ( blueMap [ i ] , 255 )
FUNCTION_CALL	536:21	536:42	10	SCALE ( blueMap [ i ] , 255 )
CALLEE	536:21	536:21	11	SCALE
LEAF_NODE	536:21	536:21	12	SCALE
LEAF_NODE	536:26	536:26	11	(
ARGUMENT	536:27	536:27	11	blueMap [ i ]
FIELD	536:27	536:36	12	blueMap [ i ]
LEAF_NODE	536:27	536:27	13	blueMap
LEAF_NODE	536:34	536:34	13	[
EXPR	536:35	536:35	13	i
FIELD	536:35	536:35	14	i
LEAF_NODE	536:35	536:35	15	i
LEAF_NODE	536:36	536:36	13	]
LEAF_NODE	536:37	536:37	11	,
ARGUMENT	536:39	536:39	11	255
FIELD	536:39	536:39	12	255
LEAF_NODE	536:39	536:39	13	255
LEAF_NODE	536:42	536:42	11	)
LEAF_NODE	536:43	536:43	7	;
LEAF_NODE	537:4	537:4	5	}
EXPR_STATEMENT	538:4	538:52	3	TIFFWarning ( fileName , "Assuming 8-bit colormap" ) ;
EXPR	538:4	538:4	4	TIFFWarning ( fileName , "Assuming 8-bit colormap" )
FUNCTION_CALL	538:4	538:51	5	TIFFWarning ( fileName , "Assuming 8-bit colormap" )
CALLEE	538:4	538:4	6	TIFFWarning
LEAF_NODE	538:4	538:4	7	TIFFWarning
LEAF_NODE	538:15	538:15	6	(
ARGUMENT	538:16	538:16	6	fileName
FIELD	538:16	538:16	7	fileName
LEAF_NODE	538:16	538:16	8	fileName
LEAF_NODE	538:24	538:24	6	,
ARGUMENT	538:26	538:26	6	"Assuming 8-bit colormap"
FIELD	538:26	538:26	7	"Assuming 8-bit colormap"
LEAF_NODE	538:26	538:26	8	"Assuming 8-bit colormap"
LEAF_NODE	538:51	538:51	6	)
LEAF_NODE	538:52	538:52	4	;
LEAF_NODE	539:0	539:0	2	}
FUNCTION_DEF	541:0	561:0	1	
RETURN_TYPE	541:0	541:0	2	void
TYPE_NAME	541:0	541:0	3	void
LEAF_NODE	541:0	541:0	4	void
FUNCTION_NAME	542:0	542:0	2	SimpleGammaCorrection
LEAF_NODE	542:0	542:0	3	SimpleGammaCorrection
PARAMETER_LIST	542:21	542:22	2	( )
LEAF_NODE	542:21	542:21	3	(
LEAF_NODE	542:22	542:22	3	)
LEAF_NODE	543:0	543:0	2	{
STATEMENTS	544:4	560:30	2	
LEAF_NODE	544:4	544:4	3	register
SIMPLE_DECL	544:13	544:18	3	int i ;
VAR_DECL	544:13	544:17	4	int i
TYPE	544:13	544:13	5	int
TYPE_NAME	544:13	544:13	6	int
LEAF_NODE	544:13	544:13	7	int
NAME	544:17	544:17	5	i
LEAF_NODE	544:17	544:17	6	i
LEAF_NODE	544:18	544:18	4	;
LEAF_NODE	545:4	545:4	3	register
SIMPLE_DECL	545:13	545:49	3	double i_gamma ; i_gamma = 1.0 / appData . gamma ;
VAR_DECL	545:13	545:20	4	double i_gamma ; i_gamma = 1.0 / appData . gamma
TYPE	545:13	545:13	5	double
TYPE_NAME	545:13	545:13	6	double
LEAF_NODE	545:13	545:13	7	double
NAME	545:20	545:20	5	i_gamma
LEAF_NODE	545:20	545:20	6	i_gamma
LEAF_NODE	0:0	0:0	5	;
INIT	545:20	545:20	5	i_gamma = 1.0 / appData . gamma
ASSIGN	545:20	545:30	6	i_gamma = 1.0 / appData . gamma
LVAL	545:20	545:20	7	i_gamma
NAME	545:20	545:20	8	i_gamma
LEAF_NODE	545:20	545:20	9	i_gamma
ASSIGN_OP	545:28	545:28	7	=
LEAF_NODE	545:28	545:28	8	=
RVAL	545:30	545:36	7	1.0 / appData . gamma
FIELD	545:30	545:30	8	1.0
LEAF_NODE	545:30	545:30	9	1.0
LEAF_NODE	545:34	545:34	8	/
FIELD	545:36	545:44	8	appData . gamma
LEAF_NODE	545:36	545:36	9	appData
LEAF_NODE	545:43	545:43	9	.
LEAF_NODE	545:44	545:44	9	gamma
LEAF_NODE	545:49	545:49	4	;
ITERATION	547:4	547:39	3	
KEYWORD	547:4	547:4	4	for
LEAF_NODE	547:4	547:4	5	for
LEAF_NODE	547:8	547:8	4	(
FOR_INIT	547:9	547:14	4	i = 0 ;
EXPR	547:9	547:9	5	i = 0
ASSIGN	547:9	547:13	6	i = 0
LVAL	547:9	547:9	7	i
FIELD	547:9	547:9	8	i
LEAF_NODE	547:9	547:9	9	i
ASSIGN_OP	547:11	547:11	7	=
LEAF_NODE	547:11	547:11	8	=
RVAL	547:13	547:13	7	0
FIELD	547:13	547:13	8	0
LEAF_NODE	547:13	547:13	9	0
LEAF_NODE	547:14	547:14	5	;
CONDITION	547:16	547:16	4	i < colormapSize
EXPR	547:16	547:20	5	i < colormapSize
FIELD	547:16	547:16	6	i
LEAF_NODE	547:16	547:16	7	i
REL_OPERATOR	547:18	547:18	6	<
LEAF_NODE	547:18	547:18	7	<
FIELD	547:20	547:20	6	colormapSize
LEAF_NODE	547:20	547:20	7	colormapSize
LEAF_NODE	547:32	547:32	4	;
FOR_EXPR	547:34	547:34	4	i ++
EXPR	547:34	547:34	5	i ++
FIELD	547:34	547:35	6	i ++
LEAF_NODE	547:34	547:34	7	i
LEAF_NODE	547:35	547:35	7	++
LEAF_NODE	547:37	547:37	4	)
STATEMENTS	547:39	558:4	4	
LEAF_NODE	547:39	547:39	5	{
STATEMENTS	548:8	553:8	5	
SELECTION	548:8	552:12	6	
KEYWORD	548:8	548:8	7	if
LEAF_NODE	548:8	548:8	8	if
LEAF_NODE	548:11	548:11	7	(
CONDITION	548:12	548:12	7	( ( tfPhotometricInterpretation == PHOTOMETRIC_MINISWHITE ) && ( i == colormapSize - 1 ) ) || ( ( tfPhotometricInterpretation == PHOTOMETRIC_MINISBLACK ) && ( i == 0 ) )
EXPR	548:12	548:12	8	( ( tfPhotometricInterpretation == PHOTOMETRIC_MINISWHITE ) && ( i == colormapSize - 1 ) ) || ( ( tfPhotometricInterpretation == PHOTOMETRIC_MINISBLACK ) && ( i == 0 ) )
OR	548:12	550:15	9	( ( tfPhotometricInterpretation == PHOTOMETRIC_MINISWHITE ) && ( i == colormapSize - 1 ) ) || ( ( tfPhotometricInterpretation == PHOTOMETRIC_MINISBLACK ) && ( i == 0 ) )
EXPR	548:12	549:38	10	( ( tfPhotometricInterpretation == PHOTOMETRIC_MINISWHITE ) && ( i == colormapSize - 1 ) )
LEAF_NODE	548:12	548:12	11	(
AND	548:13	549:15	11	( tfPhotometricInterpretation == PHOTOMETRIC_MINISWHITE ) && ( i == colormapSize - 1 )
EXPR	548:13	548:67	12	( tfPhotometricInterpretation == PHOTOMETRIC_MINISWHITE )
LEAF_NODE	548:13	548:13	13	(
FIELD	548:14	548:14	13	tfPhotometricInterpretation
LEAF_NODE	548:14	548:14	14	tfPhotometricInterpretation
EQ_OPERATOR	548:42	548:42	13	==
LEAF_NODE	548:42	548:42	14	==
FIELD	548:45	548:45	13	PHOTOMETRIC_MINISWHITE
LEAF_NODE	548:45	548:45	14	PHOTOMETRIC_MINISWHITE
LEAF_NODE	548:67	548:67	13	)
LEAF_NODE	549:12	549:12	12	&&
EXPR	549:15	549:37	12	( i == colormapSize - 1 )
LEAF_NODE	549:15	549:15	13	(
FIELD	549:16	549:16	13	i
LEAF_NODE	549:16	549:16	14	i
EQ_OPERATOR	549:18	549:18	13	==
LEAF_NODE	549:18	549:18	14	==
FIELD	549:21	549:21	13	colormapSize
LEAF_NODE	549:21	549:21	14	colormapSize
LEAF_NODE	549:34	549:34	13	-
FIELD	549:36	549:36	13	1
LEAF_NODE	549:36	549:36	14	1
LEAF_NODE	549:37	549:37	13	)
LEAF_NODE	549:38	549:38	11	)
LEAF_NODE	550:12	550:12	10	||
EXPR	550:15	551:23	10	( ( tfPhotometricInterpretation == PHOTOMETRIC_MINISBLACK ) && ( i == 0 ) )
LEAF_NODE	550:15	550:15	11	(
AND	550:16	551:15	11	( tfPhotometricInterpretation == PHOTOMETRIC_MINISBLACK ) && ( i == 0 )
EXPR	550:16	550:70	12	( tfPhotometricInterpretation == PHOTOMETRIC_MINISBLACK )
LEAF_NODE	550:16	550:16	13	(
FIELD	550:17	550:17	13	tfPhotometricInterpretation
LEAF_NODE	550:17	550:17	14	tfPhotometricInterpretation
EQ_OPERATOR	550:45	550:45	13	==
LEAF_NODE	550:45	550:45	14	==
FIELD	550:48	550:48	13	PHOTOMETRIC_MINISBLACK
LEAF_NODE	550:48	550:48	14	PHOTOMETRIC_MINISBLACK
LEAF_NODE	550:70	550:70	13	)
LEAF_NODE	551:12	551:12	12	&&
EXPR	551:15	551:22	12	( i == 0 )
LEAF_NODE	551:15	551:15	13	(
FIELD	551:16	551:16	13	i
LEAF_NODE	551:16	551:16	14	i
EQ_OPERATOR	551:18	551:18	13	==
LEAF_NODE	551:18	551:18	14	==
FIELD	551:21	551:21	13	0
LEAF_NODE	551:21	551:21	14	0
LEAF_NODE	551:22	551:22	13	)
LEAF_NODE	551:23	551:23	11	)
LEAF_NODE	551:24	551:24	7	)
STATEMENTS	552:12	552:12	7	
EXPR_STATEMENT	552:12	552:52	8	redMap [ i ] = greenMap [ i ] = blueMap [ i ] = 0 ;
EXPR	552:12	552:12	9	redMap [ i ] = greenMap [ i ] = blueMap [ i ] = 0
ASSIGN	552:12	552:24	10	redMap [ i ] = greenMap [ i ] = blueMap [ i ] = 0
LVAL	552:12	552:12	11	redMap [ i ]
FIELD	552:12	552:20	12	redMap [ i ]
LEAF_NODE	552:12	552:12	13	redMap
LEAF_NODE	552:18	552:18	13	[
EXPR	552:19	552:19	13	i
FIELD	552:19	552:19	14	i
LEAF_NODE	552:19	552:19	15	i
LEAF_NODE	552:20	552:20	13	]
ASSIGN_OP	552:22	552:22	11	=
LEAF_NODE	552:22	552:22	12	=
RVAL	552:24	552:24	11	greenMap [ i ] = blueMap [ i ] = 0
ASSIGN	552:24	552:38	12	greenMap [ i ] = blueMap [ i ] = 0
LVAL	552:24	552:24	13	greenMap [ i ]
FIELD	552:24	552:34	14	greenMap [ i ]
LEAF_NODE	552:24	552:24	15	greenMap
LEAF_NODE	552:32	552:32	15	[
EXPR	552:33	552:33	15	i
FIELD	552:33	552:33	16	i
LEAF_NODE	552:33	552:33	17	i
LEAF_NODE	552:34	552:34	15	]
ASSIGN_OP	552:36	552:36	13	=
LEAF_NODE	552:36	552:36	14	=
RVAL	552:38	552:38	13	blueMap [ i ] = 0
ASSIGN	552:38	552:51	14	blueMap [ i ] = 0
LVAL	552:38	552:38	15	blueMap [ i ]
FIELD	552:38	552:47	16	blueMap [ i ]
LEAF_NODE	552:38	552:38	17	blueMap
LEAF_NODE	552:45	552:45	17	[
EXPR	552:46	552:46	17	i
FIELD	552:46	552:46	18	i
LEAF_NODE	552:46	552:46	19	i
LEAF_NODE	552:47	552:47	17	]
ASSIGN_OP	552:49	552:49	15	=
LEAF_NODE	552:49	552:49	16	=
RVAL	552:51	552:51	15	0
FIELD	552:51	552:51	16	0
LEAF_NODE	552:51	552:51	17	0
LEAF_NODE	552:52	552:52	9	;
SELECTION	553:8	553:13	6	
KEYWORD	553:8	553:8	7	else
LEAF_NODE	553:8	553:8	8	else
STATEMENTS	553:13	557:8	7	
LEAF_NODE	553:13	553:13	8	{
STATEMENTS	554:12	556:12	8	
EXPR_STATEMENT	554:12	554:74	9	redMap [ i ] = ROUND ( ( pow ( dRed [ i ] / 65535.0 , i_gamma ) * 65535.0 ) ) ;
EXPR	554:12	554:12	10	redMap [ i ] = ROUND ( ( pow ( dRed [ i ] / 65535.0 , i_gamma ) * 65535.0 ) )
ASSIGN	554:12	554:24	11	redMap [ i ] = ROUND ( ( pow ( dRed [ i ] / 65535.0 , i_gamma ) * 65535.0 ) )
LVAL	554:12	554:12	12	redMap [ i ]
FIELD	554:12	554:20	13	redMap [ i ]
LEAF_NODE	554:12	554:12	14	redMap
LEAF_NODE	554:18	554:18	14	[
EXPR	554:19	554:19	14	i
FIELD	554:19	554:19	15	i
LEAF_NODE	554:19	554:19	16	i
LEAF_NODE	554:20	554:20	14	]
ASSIGN_OP	554:22	554:22	12	=
LEAF_NODE	554:22	554:22	13	=
RVAL	554:24	554:24	12	ROUND ( ( pow ( dRed [ i ] / 65535.0 , i_gamma ) * 65535.0 ) )
FUNCTION_CALL	554:24	554:73	13	ROUND ( ( pow ( dRed [ i ] / 65535.0 , i_gamma ) * 65535.0 ) )
CALLEE	554:24	554:24	14	ROUND
LEAF_NODE	554:24	554:24	15	ROUND
LEAF_NODE	554:29	554:29	14	(
ARGUMENT	554:30	554:72	14	( pow ( dRed [ i ] / 65535.0 , i_gamma ) * 65535.0 )
LEAF_NODE	554:30	554:30	15	(
FUNCTION_CALL	554:31	554:61	15	pow ( dRed [ i ] / 65535.0 , i_gamma )
CALLEE	554:31	554:31	16	pow
LEAF_NODE	554:31	554:31	17	pow
LEAF_NODE	554:34	554:34	16	(
ARGUMENT	554:35	554:45	16	dRed [ i ] / 65535.0
FIELD	554:35	554:41	17	dRed [ i ]
LEAF_NODE	554:35	554:35	18	dRed
LEAF_NODE	554:39	554:39	18	[
EXPR	554:40	554:40	18	i
FIELD	554:40	554:40	19	i
LEAF_NODE	554:40	554:40	20	i
LEAF_NODE	554:41	554:41	18	]
LEAF_NODE	554:43	554:43	17	/
FIELD	554:45	554:45	17	65535.0
LEAF_NODE	554:45	554:45	18	65535.0
LEAF_NODE	554:52	554:52	16	,
ARGUMENT	554:54	554:54	16	i_gamma
FIELD	554:54	554:54	17	i_gamma
LEAF_NODE	554:54	554:54	18	i_gamma
LEAF_NODE	554:61	554:61	16	)
LEAF_NODE	554:63	554:63	15	*
FIELD	554:65	554:65	15	65535.0
LEAF_NODE	554:65	554:65	16	65535.0
LEAF_NODE	554:72	554:72	15	)
LEAF_NODE	554:73	554:73	14	)
LEAF_NODE	554:74	554:74	10	;
EXPR_STATEMENT	555:12	555:78	9	greenMap [ i ] = ROUND ( ( pow ( dGreen [ i ] / 65535.0 , i_gamma ) * 65535.0 ) ) ;
EXPR	555:12	555:12	10	greenMap [ i ] = ROUND ( ( pow ( dGreen [ i ] / 65535.0 , i_gamma ) * 65535.0 ) )
ASSIGN	555:12	555:26	11	greenMap [ i ] = ROUND ( ( pow ( dGreen [ i ] / 65535.0 , i_gamma ) * 65535.0 ) )
LVAL	555:12	555:12	12	greenMap [ i ]
FIELD	555:12	555:22	13	greenMap [ i ]
LEAF_NODE	555:12	555:12	14	greenMap
LEAF_NODE	555:20	555:20	14	[
EXPR	555:21	555:21	14	i
FIELD	555:21	555:21	15	i
LEAF_NODE	555:21	555:21	16	i
LEAF_NODE	555:22	555:22	14	]
ASSIGN_OP	555:24	555:24	12	=
LEAF_NODE	555:24	555:24	13	=
RVAL	555:26	555:26	12	ROUND ( ( pow ( dGreen [ i ] / 65535.0 , i_gamma ) * 65535.0 ) )
FUNCTION_CALL	555:26	555:77	13	ROUND ( ( pow ( dGreen [ i ] / 65535.0 , i_gamma ) * 65535.0 ) )
CALLEE	555:26	555:26	14	ROUND
LEAF_NODE	555:26	555:26	15	ROUND
LEAF_NODE	555:31	555:31	14	(
ARGUMENT	555:32	555:76	14	( pow ( dGreen [ i ] / 65535.0 , i_gamma ) * 65535.0 )
LEAF_NODE	555:32	555:32	15	(
FUNCTION_CALL	555:33	555:65	15	pow ( dGreen [ i ] / 65535.0 , i_gamma )
CALLEE	555:33	555:33	16	pow
LEAF_NODE	555:33	555:33	17	pow
LEAF_NODE	555:36	555:36	16	(
ARGUMENT	555:37	555:49	16	dGreen [ i ] / 65535.0
FIELD	555:37	555:45	17	dGreen [ i ]
LEAF_NODE	555:37	555:37	18	dGreen
LEAF_NODE	555:43	555:43	18	[
EXPR	555:44	555:44	18	i
FIELD	555:44	555:44	19	i
LEAF_NODE	555:44	555:44	20	i
LEAF_NODE	555:45	555:45	18	]
LEAF_NODE	555:47	555:47	17	/
FIELD	555:49	555:49	17	65535.0
LEAF_NODE	555:49	555:49	18	65535.0
LEAF_NODE	555:56	555:56	16	,
ARGUMENT	555:58	555:58	16	i_gamma
FIELD	555:58	555:58	17	i_gamma
LEAF_NODE	555:58	555:58	18	i_gamma
LEAF_NODE	555:65	555:65	16	)
LEAF_NODE	555:67	555:67	15	*
FIELD	555:69	555:69	15	65535.0
LEAF_NODE	555:69	555:69	16	65535.0
LEAF_NODE	555:76	555:76	15	)
LEAF_NODE	555:77	555:77	14	)
LEAF_NODE	555:78	555:78	10	;
EXPR_STATEMENT	556:12	556:76	9	blueMap [ i ] = ROUND ( ( pow ( dBlue [ i ] / 65535.0 , i_gamma ) * 65535.0 ) ) ;
EXPR	556:12	556:12	10	blueMap [ i ] = ROUND ( ( pow ( dBlue [ i ] / 65535.0 , i_gamma ) * 65535.0 ) )
ASSIGN	556:12	556:25	11	blueMap [ i ] = ROUND ( ( pow ( dBlue [ i ] / 65535.0 , i_gamma ) * 65535.0 ) )
LVAL	556:12	556:12	12	blueMap [ i ]
FIELD	556:12	556:21	13	blueMap [ i ]
LEAF_NODE	556:12	556:12	14	blueMap
LEAF_NODE	556:19	556:19	14	[
EXPR	556:20	556:20	14	i
FIELD	556:20	556:20	15	i
LEAF_NODE	556:20	556:20	16	i
LEAF_NODE	556:21	556:21	14	]
ASSIGN_OP	556:23	556:23	12	=
LEAF_NODE	556:23	556:23	13	=
RVAL	556:25	556:25	12	ROUND ( ( pow ( dBlue [ i ] / 65535.0 , i_gamma ) * 65535.0 ) )
FUNCTION_CALL	556:25	556:75	13	ROUND ( ( pow ( dBlue [ i ] / 65535.0 , i_gamma ) * 65535.0 ) )
CALLEE	556:25	556:25	14	ROUND
LEAF_NODE	556:25	556:25	15	ROUND
LEAF_NODE	556:30	556:30	14	(
ARGUMENT	556:31	556:74	14	( pow ( dBlue [ i ] / 65535.0 , i_gamma ) * 65535.0 )
LEAF_NODE	556:31	556:31	15	(
FUNCTION_CALL	556:32	556:63	15	pow ( dBlue [ i ] / 65535.0 , i_gamma )
CALLEE	556:32	556:32	16	pow
LEAF_NODE	556:32	556:32	17	pow
LEAF_NODE	556:35	556:35	16	(
ARGUMENT	556:36	556:47	16	dBlue [ i ] / 65535.0
FIELD	556:36	556:43	17	dBlue [ i ]
LEAF_NODE	556:36	556:36	18	dBlue
LEAF_NODE	556:41	556:41	18	[
EXPR	556:42	556:42	18	i
FIELD	556:42	556:42	19	i
LEAF_NODE	556:42	556:42	20	i
LEAF_NODE	556:43	556:43	18	]
LEAF_NODE	556:45	556:45	17	/
FIELD	556:47	556:47	17	65535.0
LEAF_NODE	556:47	556:47	18	65535.0
LEAF_NODE	556:54	556:54	16	,
ARGUMENT	556:56	556:56	16	i_gamma
FIELD	556:56	556:56	17	i_gamma
LEAF_NODE	556:56	556:56	18	i_gamma
LEAF_NODE	556:63	556:63	16	)
LEAF_NODE	556:65	556:65	15	*
FIELD	556:67	556:67	15	65535.0
LEAF_NODE	556:67	556:67	16	65535.0
LEAF_NODE	556:74	556:74	15	)
LEAF_NODE	556:75	556:75	14	)
LEAF_NODE	556:76	556:76	10	;
LEAF_NODE	557:8	557:8	8	}
LEAF_NODE	558:4	558:4	5	}
EXPR_STATEMENT	560:4	560:14	3	free ( dRed ) ;
EXPR	560:4	560:4	4	free ( dRed )
FUNCTION_CALL	560:4	560:13	5	free ( dRed )
CALLEE	560:4	560:4	6	free
LEAF_NODE	560:4	560:4	7	free
LEAF_NODE	560:8	560:8	6	(
ARGUMENT	560:9	560:9	6	dRed
FIELD	560:9	560:9	7	dRed
LEAF_NODE	560:9	560:9	8	dRed
LEAF_NODE	560:13	560:13	6	)
LEAF_NODE	560:14	560:14	4	;
EXPR_STATEMENT	560:16	560:28	3	free ( dGreen ) ;
EXPR	560:16	560:16	4	free ( dGreen )
FUNCTION_CALL	560:16	560:27	5	free ( dGreen )
CALLEE	560:16	560:16	6	free
LEAF_NODE	560:16	560:16	7	free
LEAF_NODE	560:20	560:20	6	(
ARGUMENT	560:21	560:21	6	dGreen
FIELD	560:21	560:21	7	dGreen
LEAF_NODE	560:21	560:21	8	dGreen
LEAF_NODE	560:27	560:27	6	)
LEAF_NODE	560:28	560:28	4	;
EXPR_STATEMENT	560:30	560:41	3	free ( dBlue ) ;
EXPR	560:30	560:30	4	free ( dBlue )
FUNCTION_CALL	560:30	560:40	5	free ( dBlue )
CALLEE	560:30	560:30	6	free
LEAF_NODE	560:30	560:30	7	free
LEAF_NODE	560:34	560:34	6	(
ARGUMENT	560:35	560:35	6	dBlue
FIELD	560:35	560:35	7	dBlue
LEAF_NODE	560:35	560:35	8	dBlue
LEAF_NODE	560:40	560:40	6	)
LEAF_NODE	560:41	560:41	4	;
LEAF_NODE	561:0	561:0	2	}
FUNCTION_DEF	576:0	692:0	1	
RETURN_TYPE	576:0	576:0	2	void
TYPE_NAME	576:0	576:0	3	void
LEAF_NODE	576:0	576:0	4	void
FUNCTION_NAME	577:0	577:0	2	GetVisual
LEAF_NODE	577:0	577:0	3	GetVisual
PARAMETER_LIST	577:9	577:10	2	( )
LEAF_NODE	577:9	577:9	3	(
LEAF_NODE	577:10	577:10	3	)
LEAF_NODE	578:0	578:0	2	{
STATEMENTS	579:4	691:19	2	
SIMPLE_DECL	579:4	579:25	3	XColor * colors ; colors = NULL ;
VAR_DECL	579:4	579:12	4	XColor * colors ; colors = NULL
TYPE	579:4	579:11	5	XColor *
TYPE_NAME	579:4	579:4	6	XColor
LEAF_NODE	579:4	579:4	7	XColor
POINTER	579:11	579:11	6	*
LEAF_NODE	579:11	579:11	7	*
NAME	579:12	579:12	5	colors
LEAF_NODE	579:12	579:12	6	colors
LEAF_NODE	0:0	0:0	5	;
INIT	579:12	579:12	5	colors = NULL
ASSIGN	579:12	579:21	6	colors = NULL
LVAL	579:12	579:12	7	colors
NAME	579:12	579:12	8	colors
LEAF_NODE	579:12	579:12	9	colors
ASSIGN_OP	579:19	579:19	7	=
LEAF_NODE	579:19	579:19	8	=
RVAL	579:21	579:21	7	NULL
FIELD	579:21	579:21	8	NULL
LEAF_NODE	579:21	579:21	9	NULL
LEAF_NODE	579:25	579:25	4	;
SIMPLE_DECL	580:4	580:32	3	unsigned long * pixels ; pixels = NULL ;
VAR_DECL	580:4	580:19	4	unsigned long * pixels ; pixels = NULL
TYPE	580:4	580:18	5	unsigned long *
TYPE_NAME	580:4	580:13	6	unsigned long
LEAF_NODE	580:4	580:4	7	unsigned
LEAF_NODE	580:13	580:13	7	long
POINTER	580:18	580:18	6	*
LEAF_NODE	580:18	580:18	7	*
NAME	580:19	580:19	5	pixels
LEAF_NODE	580:19	580:19	6	pixels
LEAF_NODE	0:0	0:0	5	;
INIT	580:19	580:19	5	pixels = NULL
ASSIGN	580:19	580:28	6	pixels = NULL
LVAL	580:19	580:19	7	pixels
NAME	580:19	580:19	8	pixels
LEAF_NODE	580:19	580:19	9	pixels
ASSIGN_OP	580:26	580:26	7	=
LEAF_NODE	580:26	580:26	8	=
RVAL	580:28	580:28	7	NULL
FIELD	580:28	580:28	8	NULL
LEAF_NODE	580:28	580:28	9	NULL
LEAF_NODE	580:32	580:32	4	;
SIMPLE_DECL	581:4	581:19	3	unsigned long i ;
VAR_DECL	581:4	581:18	4	unsigned long i
TYPE	581:4	581:4	5	unsigned long
TYPE_NAME	581:4	581:13	6	unsigned long
LEAF_NODE	581:4	581:4	7	unsigned
LEAF_NODE	581:13	581:13	7	long
NAME	581:18	581:18	5	i
LEAF_NODE	581:18	581:18	6	i
LEAF_NODE	581:19	581:19	4	;
SELECTION	583:4	583:26	3	
KEYWORD	583:4	583:4	4	switch
LEAF_NODE	583:4	583:4	5	switch
LEAF_NODE	583:11	583:11	4	(
CONDITION	583:12	583:12	4	tfImageDepth
EXPR	583:12	583:12	5	tfImageDepth
FIELD	583:12	583:12	6	tfImageDepth
LEAF_NODE	583:12	583:12	7	tfImageDepth
LEAF_NODE	583:24	583:24	4	)
STATEMENTS	583:26	674:4	4	
LEAF_NODE	583:26	583:26	5	{
STATEMENTS	588:4	673:8	5	
LABEL	588:4	588:11	6	case 32 :
LEAF_NODE	588:4	588:4	7	case
LEAF_NODE	588:9	588:9	7	32
LEAF_NODE	588:11	588:11	7	:
LABEL	589:4	589:11	6	case 24 :
LEAF_NODE	589:4	589:4	7	case
LEAF_NODE	589:9	589:9	7	24
LEAF_NODE	589:11	589:11	7	:
SELECTION	590:8	590:66	6	
KEYWORD	590:8	590:8	7	if
LEAF_NODE	590:8	590:8	8	if
LEAF_NODE	590:11	590:11	7	(
CONDITION	590:12	590:12	7	SearchVisualList ( 24 , DirectColor , & xVisual ) == False
EXPR	590:12	590:59	8	SearchVisualList ( 24 , DirectColor , & xVisual ) == False
FUNCTION_CALL	590:12	590:54	9	SearchVisualList ( 24 , DirectColor , & xVisual )
CALLEE	590:12	590:12	10	SearchVisualList
LEAF_NODE	590:12	590:12	11	SearchVisualList
LEAF_NODE	590:28	590:28	10	(
ARGUMENT	590:29	590:29	10	24
FIELD	590:29	590:29	11	24
LEAF_NODE	590:29	590:29	12	24
LEAF_NODE	590:31	590:31	10	,
ARGUMENT	590:33	590:33	10	DirectColor
FIELD	590:33	590:33	11	DirectColor
LEAF_NODE	590:33	590:33	12	DirectColor
LEAF_NODE	590:44	590:44	10	,
ARGUMENT	590:46	590:46	10	& xVisual
UNARY_EXPR	590:46	590:47	11	& xVisual
UNARY_OPERATOR	590:46	590:46	12	&
LEAF_NODE	590:46	590:46	13	&
FIELD	590:47	590:47	12	xVisual
LEAF_NODE	590:47	590:47	13	xVisual
LEAF_NODE	590:54	590:54	10	)
EQ_OPERATOR	590:56	590:56	9	==
LEAF_NODE	590:56	590:56	10	==
FIELD	590:59	590:59	9	False
LEAF_NODE	590:59	590:59	10	False
LEAF_NODE	590:64	590:64	7	)
STATEMENTS	590:66	593:8	7	
LEAF_NODE	590:66	590:66	8	{
STATEMENTS	591:12	592:12	8	
EXPR_STATEMENT	591:12	591:79	9	fprintf ( stderr , "xtiff: 24-bit DirectColor visual not available\n" ) ;
EXPR	591:12	591:12	10	fprintf ( stderr , "xtiff: 24-bit DirectColor visual not available\n" )
FUNCTION_CALL	591:12	591:78	11	fprintf ( stderr , "xtiff: 24-bit DirectColor visual not available\n" )
CALLEE	591:12	591:12	12	fprintf
LEAF_NODE	591:12	591:12	13	fprintf
LEAF_NODE	591:19	591:19	12	(
ARGUMENT	591:20	591:20	12	stderr
FIELD	591:20	591:20	13	stderr
LEAF_NODE	591:20	591:20	14	stderr
LEAF_NODE	591:26	591:26	12	,
ARGUMENT	591:28	591:28	12	"xtiff: 24-bit DirectColor visual not available\n"
FIELD	591:28	591:28	13	"xtiff: 24-bit DirectColor visual not available\n"
LEAF_NODE	591:28	591:28	14	"xtiff: 24-bit DirectColor visual not available\n"
LEAF_NODE	591:78	591:78	12	)
LEAF_NODE	591:79	591:79	10	;
EXPR_STATEMENT	592:12	592:19	9	exit ( 0 ) ;
EXPR	592:12	592:12	10	exit ( 0 )
FUNCTION_CALL	592:12	592:18	11	exit ( 0 )
CALLEE	592:12	592:12	12	exit
LEAF_NODE	592:12	592:12	13	exit
LEAF_NODE	592:16	592:16	12	(
ARGUMENT	592:17	592:17	12	0
FIELD	592:17	592:17	13	0
LEAF_NODE	592:17	592:17	14	0
LEAF_NODE	592:18	592:18	12	)
LEAF_NODE	592:19	592:19	10	;
LEAF_NODE	593:8	593:8	8	}
LEAF_NODE	595:8	595:8	6	colors
LEAF_NODE	595:15	595:15	6	=
LEAF_NODE	595:17	595:17	6	(
LEAF_NODE	595:18	595:18	6	XColor
LEAF_NODE	595:25	595:25	6	*
LEAF_NODE	595:26	595:26	6	)
LEAF_NODE	595:28	595:28	6	malloc
LEAF_NODE	595:34	595:34	6	(
LEAF_NODE	595:35	595:35	6	3
LEAF_NODE	595:37	595:37	6	*
LEAF_NODE	595:39	595:39	6	colormapSize
LEAF_NODE	595:52	595:52	6	*
LEAF_NODE	595:54	595:54	6	sizeof
LEAF_NODE	595:60	595:60	6	(
LEAF_NODE	595:61	595:61	6	XColor
LEAF_NODE	595:67	595:67	6	)
LEAF_NODE	595:68	595:68	6	)
LEAF_NODE	595:69	595:69	6	;
EXPR_STATEMENT	596:8	596:22	6	MCHECK ( colors ) ;
EXPR	596:8	596:8	7	MCHECK ( colors )
FUNCTION_CALL	596:8	596:21	8	MCHECK ( colors )
CALLEE	596:8	596:8	9	MCHECK
LEAF_NODE	596:8	596:8	10	MCHECK
LEAF_NODE	596:14	596:14	9	(
ARGUMENT	596:15	596:15	9	colors
FIELD	596:15	596:15	10	colors
LEAF_NODE	596:15	596:15	11	colors
LEAF_NODE	596:21	596:21	9	)
LEAF_NODE	596:22	596:22	7	;
ITERATION	598:8	598:43	6	
KEYWORD	598:8	598:8	7	for
LEAF_NODE	598:8	598:8	8	for
LEAF_NODE	598:12	598:12	7	(
FOR_INIT	598:13	598:18	7	i = 0 ;
EXPR	598:13	598:13	8	i = 0
ASSIGN	598:13	598:17	9	i = 0
LVAL	598:13	598:13	10	i
FIELD	598:13	598:13	11	i
LEAF_NODE	598:13	598:13	12	i
ASSIGN_OP	598:15	598:15	10	=
LEAF_NODE	598:15	598:15	11	=
RVAL	598:17	598:17	10	0
FIELD	598:17	598:17	11	0
LEAF_NODE	598:17	598:17	12	0
LEAF_NODE	598:18	598:18	8	;
CONDITION	598:20	598:20	7	i < colormapSize
EXPR	598:20	598:24	8	i < colormapSize
FIELD	598:20	598:20	9	i
LEAF_NODE	598:20	598:20	10	i
REL_OPERATOR	598:22	598:22	9	<
LEAF_NODE	598:22	598:22	10	<
FIELD	598:24	598:24	9	colormapSize
LEAF_NODE	598:24	598:24	10	colormapSize
LEAF_NODE	598:36	598:36	7	;
FOR_EXPR	598:38	598:38	7	i ++
EXPR	598:38	598:38	8	i ++
FIELD	598:38	598:39	9	i ++
LEAF_NODE	598:38	598:38	10	i
LEAF_NODE	598:39	598:39	10	++
LEAF_NODE	598:41	598:41	7	)
STATEMENTS	598:43	604:8	7	
LEAF_NODE	598:43	598:43	8	{
STATEMENTS	599:12	603:12	8	
EXPR_STATEMENT	599:12	599:54	9	colors [ i ] . pixel = ( i << 16 ) + ( i << 8 ) + i ;
EXPR	599:12	599:12	10	colors [ i ] . pixel = ( i << 16 ) + ( i << 8 ) + i
ASSIGN	599:12	599:30	11	colors [ i ] . pixel = ( i << 16 ) + ( i << 8 ) + i
LVAL	599:12	599:12	12	colors [ i ] . pixel
FIELD	599:12	599:22	13	colors [ i ] . pixel
LEAF_NODE	599:12	599:12	14	colors
LEAF_NODE	599:18	599:18	14	[
EXPR	599:19	599:19	14	i
FIELD	599:19	599:19	15	i
LEAF_NODE	599:19	599:19	16	i
LEAF_NODE	599:20	599:20	14	]
LEAF_NODE	599:21	599:21	14	.
LEAF_NODE	599:22	599:22	14	pixel
ASSIGN_OP	599:28	599:28	12	=
LEAF_NODE	599:28	599:28	13	=
RVAL	599:30	599:53	12	( i << 16 ) + ( i << 8 ) + i
LEAF_NODE	599:30	599:30	13	(
FIELD	599:31	599:31	13	i
LEAF_NODE	599:31	599:31	14	i
LEAF_NODE	599:33	599:33	13	<<
FIELD	599:36	599:36	13	16
LEAF_NODE	599:36	599:36	14	16
LEAF_NODE	599:38	599:38	13	)
LEAF_NODE	599:40	599:40	13	+
LEAF_NODE	599:42	599:42	13	(
FIELD	599:43	599:43	13	i
LEAF_NODE	599:43	599:43	14	i
LEAF_NODE	599:45	599:45	13	<<
FIELD	599:48	599:48	13	8
LEAF_NODE	599:48	599:48	14	8
LEAF_NODE	599:49	599:49	13	)
LEAF_NODE	599:51	599:51	13	+
FIELD	599:53	599:53	13	i
LEAF_NODE	599:53	599:53	14	i
LEAF_NODE	599:54	599:54	10	;
EXPR_STATEMENT	600:12	600:37	9	colors [ i ] . red = redMap [ i ] ;
EXPR	600:12	600:12	10	colors [ i ] . red = redMap [ i ]
ASSIGN	600:12	600:28	11	colors [ i ] . red = redMap [ i ]
LVAL	600:12	600:12	12	colors [ i ] . red
FIELD	600:12	600:22	13	colors [ i ] . red
LEAF_NODE	600:12	600:12	14	colors
LEAF_NODE	600:18	600:18	14	[
EXPR	600:19	600:19	14	i
FIELD	600:19	600:19	15	i
LEAF_NODE	600:19	600:19	16	i
LEAF_NODE	600:20	600:20	14	]
LEAF_NODE	600:21	600:21	14	.
LEAF_NODE	600:22	600:22	14	red
ASSIGN_OP	600:26	600:26	12	=
LEAF_NODE	600:26	600:26	13	=
RVAL	600:28	600:28	12	redMap [ i ]
FIELD	600:28	600:36	13	redMap [ i ]
LEAF_NODE	600:28	600:28	14	redMap
LEAF_NODE	600:34	600:34	14	[
EXPR	600:35	600:35	14	i
FIELD	600:35	600:35	15	i
LEAF_NODE	600:35	600:35	16	i
LEAF_NODE	600:36	600:36	14	]
LEAF_NODE	600:37	600:37	10	;
EXPR_STATEMENT	601:12	601:41	9	colors [ i ] . green = greenMap [ i ] ;
EXPR	601:12	601:12	10	colors [ i ] . green = greenMap [ i ]
ASSIGN	601:12	601:30	11	colors [ i ] . green = greenMap [ i ]
LVAL	601:12	601:12	12	colors [ i ] . green
FIELD	601:12	601:22	13	colors [ i ] . green
LEAF_NODE	601:12	601:12	14	colors
LEAF_NODE	601:18	601:18	14	[
EXPR	601:19	601:19	14	i
FIELD	601:19	601:19	15	i
LEAF_NODE	601:19	601:19	16	i
LEAF_NODE	601:20	601:20	14	]
LEAF_NODE	601:21	601:21	14	.
LEAF_NODE	601:22	601:22	14	green
ASSIGN_OP	601:28	601:28	12	=
LEAF_NODE	601:28	601:28	13	=
RVAL	601:30	601:30	12	greenMap [ i ]
FIELD	601:30	601:40	13	greenMap [ i ]
LEAF_NODE	601:30	601:30	14	greenMap
LEAF_NODE	601:38	601:38	14	[
EXPR	601:39	601:39	14	i
FIELD	601:39	601:39	15	i
LEAF_NODE	601:39	601:39	16	i
LEAF_NODE	601:40	601:40	14	]
LEAF_NODE	601:41	601:41	10	;
EXPR_STATEMENT	602:12	602:39	9	colors [ i ] . blue = blueMap [ i ] ;
EXPR	602:12	602:12	10	colors [ i ] . blue = blueMap [ i ]
ASSIGN	602:12	602:29	11	colors [ i ] . blue = blueMap [ i ]
LVAL	602:12	602:12	12	colors [ i ] . blue
FIELD	602:12	602:22	13	colors [ i ] . blue
LEAF_NODE	602:12	602:12	14	colors
LEAF_NODE	602:18	602:18	14	[
EXPR	602:19	602:19	14	i
FIELD	602:19	602:19	15	i
LEAF_NODE	602:19	602:19	16	i
LEAF_NODE	602:20	602:20	14	]
LEAF_NODE	602:21	602:21	14	.
LEAF_NODE	602:22	602:22	14	blue
ASSIGN_OP	602:27	602:27	12	=
LEAF_NODE	602:27	602:27	13	=
RVAL	602:29	602:29	12	blueMap [ i ]
FIELD	602:29	602:38	13	blueMap [ i ]
LEAF_NODE	602:29	602:29	14	blueMap
LEAF_NODE	602:36	602:36	14	[
EXPR	602:37	602:37	14	i
FIELD	602:37	602:37	15	i
LEAF_NODE	602:37	602:37	16	i
LEAF_NODE	602:38	602:38	14	]
LEAF_NODE	602:39	602:39	10	;
EXPR_STATEMENT	603:12	603:54	9	colors [ i ] . flags = DoRed | DoGreen | DoBlue ;
EXPR	603:12	603:12	10	colors [ i ] . flags = DoRed | DoGreen | DoBlue
ASSIGN	603:12	603:30	11	colors [ i ] . flags = DoRed | DoGreen | DoBlue
LVAL	603:12	603:12	12	colors [ i ] . flags
FIELD	603:12	603:22	13	colors [ i ] . flags
LEAF_NODE	603:12	603:12	14	colors
LEAF_NODE	603:18	603:18	14	[
EXPR	603:19	603:19	14	i
FIELD	603:19	603:19	15	i
LEAF_NODE	603:19	603:19	16	i
LEAF_NODE	603:20	603:20	14	]
LEAF_NODE	603:21	603:21	14	.
LEAF_NODE	603:22	603:22	14	flags
ASSIGN_OP	603:28	603:28	12	=
LEAF_NODE	603:28	603:28	13	=
RVAL	603:30	603:30	12	DoRed | DoGreen | DoBlue
BIT_OR	603:30	603:38	13	DoRed | DoGreen | DoBlue
BIT_OR_ELEM	603:30	603:30	14	DoRed
FIELD	603:30	603:30	15	DoRed
LEAF_NODE	603:30	603:30	16	DoRed
LEAF_NODE	603:36	603:36	14	|
BIT_OR_ELEM	603:38	603:38	14	DoGreen | DoBlue
BIT_OR	603:38	603:48	15	DoGreen | DoBlue
BIT_OR_ELEM	603:38	603:38	16	DoGreen
FIELD	603:38	603:38	17	DoGreen
LEAF_NODE	603:38	603:38	18	DoGreen
LEAF_NODE	603:46	603:46	16	|
BIT_OR_ELEM	603:48	603:48	16	DoBlue
FIELD	603:48	603:48	17	DoBlue
LEAF_NODE	603:48	603:48	18	DoBlue
LEAF_NODE	603:54	603:54	10	;
LEAF_NODE	604:8	604:8	8	}
EXPR_STATEMENT	606:8	607:30	6	xColormap = XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocAll ) ;
EXPR	606:8	606:8	7	xColormap = XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocAll )
ASSIGN	606:8	606:20	8	xColormap = XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocAll )
LVAL	606:8	606:8	9	xColormap
FIELD	606:8	606:8	10	xColormap
LEAF_NODE	606:8	606:8	11	xColormap
ASSIGN_OP	606:18	606:18	9	=
LEAF_NODE	606:18	606:18	10	=
RVAL	606:20	606:20	9	XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocAll )
FUNCTION_CALL	606:20	607:29	10	XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocAll )
CALLEE	606:20	606:20	11	XCreateColormap
LEAF_NODE	606:20	606:20	12	XCreateColormap
LEAF_NODE	606:35	606:35	11	(
ARGUMENT	606:36	606:36	11	xDisplay
FIELD	606:36	606:36	12	xDisplay
LEAF_NODE	606:36	606:36	13	xDisplay
LEAF_NODE	606:44	606:44	11	,
ARGUMENT	606:46	606:46	11	RootWindow ( xDisplay , xScreen )
FUNCTION_CALL	606:46	606:74	12	RootWindow ( xDisplay , xScreen )
CALLEE	606:46	606:46	13	RootWindow
LEAF_NODE	606:46	606:46	14	RootWindow
LEAF_NODE	606:56	606:56	13	(
ARGUMENT	606:57	606:57	13	xDisplay
FIELD	606:57	606:57	14	xDisplay
LEAF_NODE	606:57	606:57	15	xDisplay
LEAF_NODE	606:65	606:65	13	,
ARGUMENT	606:67	606:67	13	xScreen
FIELD	606:67	606:67	14	xScreen
LEAF_NODE	606:67	606:67	15	xScreen
LEAF_NODE	606:74	606:74	13	)
LEAF_NODE	606:75	606:75	11	,
ARGUMENT	607:12	607:12	11	xVisual
FIELD	607:12	607:12	12	xVisual
LEAF_NODE	607:12	607:12	13	xVisual
LEAF_NODE	607:19	607:19	11	,
ARGUMENT	607:21	607:21	11	AllocAll
FIELD	607:21	607:21	12	AllocAll
LEAF_NODE	607:21	607:21	13	AllocAll
LEAF_NODE	607:29	607:29	11	)
LEAF_NODE	607:30	607:30	7	;
EXPR_STATEMENT	608:8	608:63	6	XStoreColors ( xDisplay , xColormap , colors , colormapSize ) ;
EXPR	608:8	608:8	7	XStoreColors ( xDisplay , xColormap , colors , colormapSize )
FUNCTION_CALL	608:8	608:62	8	XStoreColors ( xDisplay , xColormap , colors , colormapSize )
CALLEE	608:8	608:8	9	XStoreColors
LEAF_NODE	608:8	608:8	10	XStoreColors
LEAF_NODE	608:20	608:20	9	(
ARGUMENT	608:21	608:21	9	xDisplay
FIELD	608:21	608:21	10	xDisplay
LEAF_NODE	608:21	608:21	11	xDisplay
LEAF_NODE	608:29	608:29	9	,
ARGUMENT	608:31	608:31	9	xColormap
FIELD	608:31	608:31	10	xColormap
LEAF_NODE	608:31	608:31	11	xColormap
LEAF_NODE	608:40	608:40	9	,
ARGUMENT	608:42	608:42	9	colors
FIELD	608:42	608:42	10	colors
LEAF_NODE	608:42	608:42	11	colors
LEAF_NODE	608:48	608:48	9	,
ARGUMENT	608:50	608:50	9	colormapSize
FIELD	608:50	608:50	10	colormapSize
LEAF_NODE	608:50	608:50	11	colormapSize
LEAF_NODE	608:62	608:62	9	)
LEAF_NODE	608:63	608:63	7	;
JUMP_STATEMENT	609:8	609:13	6	break DESTINATION ;
KEYWORD	609:8	609:8	7	break
LEAF_NODE	609:8	609:8	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	609:13	609:13	7	;
LABEL	610:4	610:10	6	case 8 :
LEAF_NODE	610:4	610:4	7	case
LEAF_NODE	610:9	610:9	7	8
LEAF_NODE	610:10	610:10	7	:
LABEL	611:4	611:10	6	case 4 :
LEAF_NODE	611:4	611:4	7	case
LEAF_NODE	611:9	611:9	7	4
LEAF_NODE	611:10	611:10	7	:
LABEL	612:4	612:10	6	case 2 :
LEAF_NODE	612:4	612:4	7	case
LEAF_NODE	612:9	612:9	7	2
LEAF_NODE	612:10	612:10	7	:
SELECTION	617:8	617:45	6	
KEYWORD	617:8	617:8	7	switch
LEAF_NODE	617:8	617:8	8	switch
LEAF_NODE	617:15	617:15	7	(
CONDITION	617:16	617:16	7	tfPhotometricInterpretation
EXPR	617:16	617:16	8	tfPhotometricInterpretation
FIELD	617:16	617:16	9	tfPhotometricInterpretation
LEAF_NODE	617:16	617:16	10	tfPhotometricInterpretation
LEAF_NODE	617:43	617:43	7	)
STATEMENTS	617:45	628:8	7	
LEAF_NODE	617:45	617:45	8	{
STATEMENTS	618:8	627:12	8	
LABEL	618:8	618:35	9	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	618:8	618:8	10	case
LEAF_NODE	618:13	618:13	10	PHOTOMETRIC_MINISWHITE
LEAF_NODE	618:35	618:35	10	:
LABEL	619:8	619:35	9	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	619:8	619:8	10	case
LEAF_NODE	619:13	619:13	10	PHOTOMETRIC_MINISBLACK
LEAF_NODE	619:35	619:35	10	:
SELECTION	620:12	621:16	9	
KEYWORD	620:12	620:12	10	if
LEAF_NODE	620:12	620:12	11	if
LEAF_NODE	620:15	620:15	10	(
CONDITION	620:16	620:16	10	SearchVisualList ( ( int ) tfImageDepth , GrayScale , & xVisual ) == True
EXPR	620:16	620:77	11	SearchVisualList ( ( int ) tfImageDepth , GrayScale , & xVisual ) == True
FUNCTION_CALL	620:16	620:72	12	SearchVisualList ( ( int ) tfImageDepth , GrayScale , & xVisual )
CALLEE	620:16	620:16	13	SearchVisualList
LEAF_NODE	620:16	620:16	14	SearchVisualList
LEAF_NODE	620:32	620:32	13	(
ARGUMENT	620:33	620:39	13	( int ) tfImageDepth
LEAF_NODE	620:33	620:33	14	(
TYPE_NAME	620:34	620:34	14	int
LEAF_NODE	620:34	620:34	15	int
LEAF_NODE	620:37	620:37	14	)
FIELD	620:39	620:39	14	tfImageDepth
LEAF_NODE	620:39	620:39	15	tfImageDepth
LEAF_NODE	620:51	620:51	13	,
ARGUMENT	620:53	620:53	13	GrayScale
FIELD	620:53	620:53	14	GrayScale
LEAF_NODE	620:53	620:53	15	GrayScale
LEAF_NODE	620:62	620:62	13	,
ARGUMENT	620:64	620:64	13	& xVisual
UNARY_EXPR	620:64	620:65	14	& xVisual
UNARY_OPERATOR	620:64	620:64	15	&
LEAF_NODE	620:64	620:64	16	&
FIELD	620:65	620:65	15	xVisual
LEAF_NODE	620:65	620:65	16	xVisual
LEAF_NODE	620:72	620:72	13	)
EQ_OPERATOR	620:74	620:74	12	==
LEAF_NODE	620:74	620:74	13	==
FIELD	620:77	620:77	12	True
LEAF_NODE	620:77	620:77	13	True
LEAF_NODE	620:81	620:81	10	)
STATEMENTS	621:16	621:16	10	
JUMP_STATEMENT	621:16	621:21	11	break DESTINATION ;
KEYWORD	621:16	621:16	12	break
LEAF_NODE	621:16	621:16	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	621:21	621:21	12	;
LABEL	622:8	622:32	9	case PHOTOMETRIC_PALETTE :
LEAF_NODE	622:8	622:8	10	case
LEAF_NODE	622:13	622:13	10	PHOTOMETRIC_PALETTE
LEAF_NODE	622:32	622:32	10	:
SELECTION	623:12	624:16	9	
KEYWORD	623:12	623:12	10	if
LEAF_NODE	623:12	623:12	11	if
LEAF_NODE	623:15	623:15	10	(
CONDITION	623:16	623:16	10	SearchVisualList ( ( int ) tfImageDepth , PseudoColor , & xVisual ) == True
EXPR	623:16	623:79	11	SearchVisualList ( ( int ) tfImageDepth , PseudoColor , & xVisual ) == True
FUNCTION_CALL	623:16	623:74	12	SearchVisualList ( ( int ) tfImageDepth , PseudoColor , & xVisual )
CALLEE	623:16	623:16	13	SearchVisualList
LEAF_NODE	623:16	623:16	14	SearchVisualList
LEAF_NODE	623:32	623:32	13	(
ARGUMENT	623:33	623:39	13	( int ) tfImageDepth
LEAF_NODE	623:33	623:33	14	(
TYPE_NAME	623:34	623:34	14	int
LEAF_NODE	623:34	623:34	15	int
LEAF_NODE	623:37	623:37	14	)
FIELD	623:39	623:39	14	tfImageDepth
LEAF_NODE	623:39	623:39	15	tfImageDepth
LEAF_NODE	623:51	623:51	13	,
ARGUMENT	623:53	623:53	13	PseudoColor
FIELD	623:53	623:53	14	PseudoColor
LEAF_NODE	623:53	623:53	15	PseudoColor
LEAF_NODE	623:64	623:64	13	,
ARGUMENT	623:66	623:66	13	& xVisual
UNARY_EXPR	623:66	623:67	14	& xVisual
UNARY_OPERATOR	623:66	623:66	15	&
LEAF_NODE	623:66	623:66	16	&
FIELD	623:67	623:67	15	xVisual
LEAF_NODE	623:67	623:67	16	xVisual
LEAF_NODE	623:74	623:74	13	)
EQ_OPERATOR	623:76	623:76	12	==
LEAF_NODE	623:76	623:76	13	==
FIELD	623:79	623:79	12	True
LEAF_NODE	623:79	623:79	13	True
LEAF_NODE	623:83	623:83	10	)
STATEMENTS	624:16	624:16	10	
JUMP_STATEMENT	624:16	624:21	11	break DESTINATION ;
KEYWORD	624:16	624:16	12	break
LEAF_NODE	624:16	624:16	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	624:21	624:21	12	;
LABEL	625:8	625:15	9	default :
LEAF_NODE	625:8	625:8	10	default
LEAF_NODE	625:15	625:15	10	:
EXPR_STATEMENT	626:12	626:72	9	fprintf ( stderr , "xtiff: Unsupported TIFF/X configuration\n" ) ;
EXPR	626:12	626:12	10	fprintf ( stderr , "xtiff: Unsupported TIFF/X configuration\n" )
FUNCTION_CALL	626:12	626:71	11	fprintf ( stderr , "xtiff: Unsupported TIFF/X configuration\n" )
CALLEE	626:12	626:12	12	fprintf
LEAF_NODE	626:12	626:12	13	fprintf
LEAF_NODE	626:19	626:19	12	(
ARGUMENT	626:20	626:20	12	stderr
FIELD	626:20	626:20	13	stderr
LEAF_NODE	626:20	626:20	14	stderr
LEAF_NODE	626:26	626:26	12	,
ARGUMENT	626:28	626:28	12	"xtiff: Unsupported TIFF/X configuration\n"
FIELD	626:28	626:28	13	"xtiff: Unsupported TIFF/X configuration\n"
LEAF_NODE	626:28	626:28	14	"xtiff: Unsupported TIFF/X configuration\n"
LEAF_NODE	626:71	626:71	12	)
LEAF_NODE	626:72	626:72	10	;
EXPR_STATEMENT	627:12	627:19	9	exit ( 0 ) ;
EXPR	627:12	627:12	10	exit ( 0 )
FUNCTION_CALL	627:12	627:18	11	exit ( 0 )
CALLEE	627:12	627:12	12	exit
LEAF_NODE	627:12	627:12	13	exit
LEAF_NODE	627:16	627:16	12	(
ARGUMENT	627:17	627:17	12	0
FIELD	627:17	627:17	13	0
LEAF_NODE	627:17	627:17	14	0
LEAF_NODE	627:18	627:18	12	)
LEAF_NODE	627:19	627:19	10	;
LEAF_NODE	628:8	628:8	8	}
EXPR_STATEMENT	630:8	630:65	6	colors = ( XColor * ) malloc ( colormapSize * sizeof ( XColor ) ) ;
EXPR	630:8	630:8	7	colors = ( XColor * ) malloc ( colormapSize * sizeof ( XColor ) )
ASSIGN	630:8	630:17	8	colors = ( XColor * ) malloc ( colormapSize * sizeof ( XColor ) )
LVAL	630:8	630:8	9	colors
FIELD	630:8	630:8	10	colors
LEAF_NODE	630:8	630:8	11	colors
ASSIGN_OP	630:15	630:15	9	=
LEAF_NODE	630:15	630:15	10	=
RVAL	630:17	630:28	9	( XColor * ) malloc ( colormapSize * sizeof ( XColor ) )
LEAF_NODE	630:17	630:17	10	(
TYPE_NAME	630:18	630:18	10	XColor
LEAF_NODE	630:18	630:18	11	XColor
LEAF_NODE	630:25	630:25	10	*
LEAF_NODE	630:26	630:26	10	)
FUNCTION_CALL	630:28	630:64	10	malloc ( colormapSize * sizeof ( XColor ) )
CALLEE	630:28	630:28	11	malloc
LEAF_NODE	630:28	630:28	12	malloc
LEAF_NODE	630:34	630:34	11	(
ARGUMENT	630:35	630:50	11	colormapSize * sizeof ( XColor )
FIELD	630:35	630:35	12	colormapSize
LEAF_NODE	630:35	630:35	13	colormapSize
LEAF_NODE	630:48	630:48	12	*
FUNCTION_CALL	630:50	630:63	12	sizeof ( XColor )
CALLEE	630:50	630:50	13	sizeof
LEAF_NODE	630:50	630:50	14	sizeof
LEAF_NODE	630:56	630:56	13	(
ARGUMENT	630:57	630:57	13	XColor
FIELD	630:57	630:57	14	XColor
LEAF_NODE	630:57	630:57	15	XColor
LEAF_NODE	630:63	630:63	13	)
LEAF_NODE	630:64	630:64	11	)
LEAF_NODE	630:65	630:65	7	;
EXPR_STATEMENT	631:8	631:22	6	MCHECK ( colors ) ;
EXPR	631:8	631:8	7	MCHECK ( colors )
FUNCTION_CALL	631:8	631:21	8	MCHECK ( colors )
CALLEE	631:8	631:8	9	MCHECK
LEAF_NODE	631:8	631:8	10	MCHECK
LEAF_NODE	631:14	631:14	9	(
ARGUMENT	631:15	631:15	9	colors
FIELD	631:15	631:15	10	colors
LEAF_NODE	631:15	631:15	11	colors
LEAF_NODE	631:21	631:21	9	)
LEAF_NODE	631:22	631:22	7	;
ITERATION	633:8	633:43	6	
KEYWORD	633:8	633:8	7	for
LEAF_NODE	633:8	633:8	8	for
LEAF_NODE	633:12	633:12	7	(
FOR_INIT	633:13	633:18	7	i = 0 ;
EXPR	633:13	633:13	8	i = 0
ASSIGN	633:13	633:17	9	i = 0
LVAL	633:13	633:13	10	i
FIELD	633:13	633:13	11	i
LEAF_NODE	633:13	633:13	12	i
ASSIGN_OP	633:15	633:15	10	=
LEAF_NODE	633:15	633:15	11	=
RVAL	633:17	633:17	10	0
FIELD	633:17	633:17	11	0
LEAF_NODE	633:17	633:17	12	0
LEAF_NODE	633:18	633:18	8	;
CONDITION	633:20	633:20	7	i < colormapSize
EXPR	633:20	633:24	8	i < colormapSize
FIELD	633:20	633:20	9	i
LEAF_NODE	633:20	633:20	10	i
REL_OPERATOR	633:22	633:22	9	<
LEAF_NODE	633:22	633:22	10	<
FIELD	633:24	633:24	9	colormapSize
LEAF_NODE	633:24	633:24	10	colormapSize
LEAF_NODE	633:36	633:36	7	;
FOR_EXPR	633:38	633:38	7	i ++
EXPR	633:38	633:38	8	i ++
FIELD	633:38	633:39	9	i ++
LEAF_NODE	633:38	633:38	10	i
LEAF_NODE	633:39	633:39	10	++
LEAF_NODE	633:41	633:41	7	)
STATEMENTS	633:43	639:8	7	
LEAF_NODE	633:43	633:43	8	{
STATEMENTS	634:12	638:12	8	
EXPR_STATEMENT	634:12	634:31	9	colors [ i ] . pixel = i ;
EXPR	634:12	634:12	10	colors [ i ] . pixel = i
ASSIGN	634:12	634:30	11	colors [ i ] . pixel = i
LVAL	634:12	634:12	12	colors [ i ] . pixel
FIELD	634:12	634:22	13	colors [ i ] . pixel
LEAF_NODE	634:12	634:12	14	colors
LEAF_NODE	634:18	634:18	14	[
EXPR	634:19	634:19	14	i
FIELD	634:19	634:19	15	i
LEAF_NODE	634:19	634:19	16	i
LEAF_NODE	634:20	634:20	14	]
LEAF_NODE	634:21	634:21	14	.
LEAF_NODE	634:22	634:22	14	pixel
ASSIGN_OP	634:28	634:28	12	=
LEAF_NODE	634:28	634:28	13	=
RVAL	634:30	634:30	12	i
FIELD	634:30	634:30	13	i
LEAF_NODE	634:30	634:30	14	i
LEAF_NODE	634:31	634:31	10	;
EXPR_STATEMENT	635:12	635:37	9	colors [ i ] . red = redMap [ i ] ;
EXPR	635:12	635:12	10	colors [ i ] . red = redMap [ i ]
ASSIGN	635:12	635:28	11	colors [ i ] . red = redMap [ i ]
LVAL	635:12	635:12	12	colors [ i ] . red
FIELD	635:12	635:22	13	colors [ i ] . red
LEAF_NODE	635:12	635:12	14	colors
LEAF_NODE	635:18	635:18	14	[
EXPR	635:19	635:19	14	i
FIELD	635:19	635:19	15	i
LEAF_NODE	635:19	635:19	16	i
LEAF_NODE	635:20	635:20	14	]
LEAF_NODE	635:21	635:21	14	.
LEAF_NODE	635:22	635:22	14	red
ASSIGN_OP	635:26	635:26	12	=
LEAF_NODE	635:26	635:26	13	=
RVAL	635:28	635:28	12	redMap [ i ]
FIELD	635:28	635:36	13	redMap [ i ]
LEAF_NODE	635:28	635:28	14	redMap
LEAF_NODE	635:34	635:34	14	[
EXPR	635:35	635:35	14	i
FIELD	635:35	635:35	15	i
LEAF_NODE	635:35	635:35	16	i
LEAF_NODE	635:36	635:36	14	]
LEAF_NODE	635:37	635:37	10	;
EXPR_STATEMENT	636:12	636:41	9	colors [ i ] . green = greenMap [ i ] ;
EXPR	636:12	636:12	10	colors [ i ] . green = greenMap [ i ]
ASSIGN	636:12	636:30	11	colors [ i ] . green = greenMap [ i ]
LVAL	636:12	636:12	12	colors [ i ] . green
FIELD	636:12	636:22	13	colors [ i ] . green
LEAF_NODE	636:12	636:12	14	colors
LEAF_NODE	636:18	636:18	14	[
EXPR	636:19	636:19	14	i
FIELD	636:19	636:19	15	i
LEAF_NODE	636:19	636:19	16	i
LEAF_NODE	636:20	636:20	14	]
LEAF_NODE	636:21	636:21	14	.
LEAF_NODE	636:22	636:22	14	green
ASSIGN_OP	636:28	636:28	12	=
LEAF_NODE	636:28	636:28	13	=
RVAL	636:30	636:30	12	greenMap [ i ]
FIELD	636:30	636:40	13	greenMap [ i ]
LEAF_NODE	636:30	636:30	14	greenMap
LEAF_NODE	636:38	636:38	14	[
EXPR	636:39	636:39	14	i
FIELD	636:39	636:39	15	i
LEAF_NODE	636:39	636:39	16	i
LEAF_NODE	636:40	636:40	14	]
LEAF_NODE	636:41	636:41	10	;
EXPR_STATEMENT	637:12	637:39	9	colors [ i ] . blue = blueMap [ i ] ;
EXPR	637:12	637:12	10	colors [ i ] . blue = blueMap [ i ]
ASSIGN	637:12	637:29	11	colors [ i ] . blue = blueMap [ i ]
LVAL	637:12	637:12	12	colors [ i ] . blue
FIELD	637:12	637:22	13	colors [ i ] . blue
LEAF_NODE	637:12	637:12	14	colors
LEAF_NODE	637:18	637:18	14	[
EXPR	637:19	637:19	14	i
FIELD	637:19	637:19	15	i
LEAF_NODE	637:19	637:19	16	i
LEAF_NODE	637:20	637:20	14	]
LEAF_NODE	637:21	637:21	14	.
LEAF_NODE	637:22	637:22	14	blue
ASSIGN_OP	637:27	637:27	12	=
LEAF_NODE	637:27	637:27	13	=
RVAL	637:29	637:29	12	blueMap [ i ]
FIELD	637:29	637:38	13	blueMap [ i ]
LEAF_NODE	637:29	637:29	14	blueMap
LEAF_NODE	637:36	637:36	14	[
EXPR	637:37	637:37	14	i
FIELD	637:37	637:37	15	i
LEAF_NODE	637:37	637:37	16	i
LEAF_NODE	637:38	637:38	14	]
LEAF_NODE	637:39	637:39	10	;
EXPR_STATEMENT	638:12	638:54	9	colors [ i ] . flags = DoRed | DoGreen | DoBlue ;
EXPR	638:12	638:12	10	colors [ i ] . flags = DoRed | DoGreen | DoBlue
ASSIGN	638:12	638:30	11	colors [ i ] . flags = DoRed | DoGreen | DoBlue
LVAL	638:12	638:12	12	colors [ i ] . flags
FIELD	638:12	638:22	13	colors [ i ] . flags
LEAF_NODE	638:12	638:12	14	colors
LEAF_NODE	638:18	638:18	14	[
EXPR	638:19	638:19	14	i
FIELD	638:19	638:19	15	i
LEAF_NODE	638:19	638:19	16	i
LEAF_NODE	638:20	638:20	14	]
LEAF_NODE	638:21	638:21	14	.
LEAF_NODE	638:22	638:22	14	flags
ASSIGN_OP	638:28	638:28	12	=
LEAF_NODE	638:28	638:28	13	=
RVAL	638:30	638:30	12	DoRed | DoGreen | DoBlue
BIT_OR	638:30	638:38	13	DoRed | DoGreen | DoBlue
BIT_OR_ELEM	638:30	638:30	14	DoRed
FIELD	638:30	638:30	15	DoRed
LEAF_NODE	638:30	638:30	16	DoRed
LEAF_NODE	638:36	638:36	14	|
BIT_OR_ELEM	638:38	638:38	14	DoGreen | DoBlue
BIT_OR	638:38	638:48	15	DoGreen | DoBlue
BIT_OR_ELEM	638:38	638:38	16	DoGreen
FIELD	638:38	638:38	17	DoGreen
LEAF_NODE	638:38	638:38	18	DoGreen
LEAF_NODE	638:46	638:46	16	|
BIT_OR_ELEM	638:48	638:48	16	DoBlue
FIELD	638:48	638:48	17	DoBlue
LEAF_NODE	638:48	638:48	18	DoBlue
LEAF_NODE	638:54	638:54	10	;
LEAF_NODE	639:8	639:8	8	}
SELECTION	650:8	651:12	6	
KEYWORD	650:8	650:8	7	if
LEAF_NODE	650:8	650:8	8	if
LEAF_NODE	650:11	650:11	7	(
CONDITION	650:12	650:12	7	tfImageDepth == 8
EXPR	650:12	650:28	8	tfImageDepth == 8
FIELD	650:12	650:12	9	tfImageDepth
LEAF_NODE	650:12	650:12	10	tfImageDepth
EQ_OPERATOR	650:25	650:25	9	==
LEAF_NODE	650:25	650:25	10	==
FIELD	650:28	650:28	9	8
LEAF_NODE	650:28	650:28	10	8
LEAF_NODE	650:29	650:29	7	)
STATEMENTS	651:12	651:12	7	
EXPR_STATEMENT	651:12	652:34	8	xColormap = XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocAll ) ;
EXPR	651:12	651:12	9	xColormap = XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocAll )
ASSIGN	651:12	651:24	10	xColormap = XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocAll )
LVAL	651:12	651:12	11	xColormap
FIELD	651:12	651:12	12	xColormap
LEAF_NODE	651:12	651:12	13	xColormap
ASSIGN_OP	651:22	651:22	11	=
LEAF_NODE	651:22	651:22	12	=
RVAL	651:24	651:24	11	XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocAll )
FUNCTION_CALL	651:24	652:33	12	XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocAll )
CALLEE	651:24	651:24	13	XCreateColormap
LEAF_NODE	651:24	651:24	14	XCreateColormap
LEAF_NODE	651:39	651:39	13	(
ARGUMENT	651:40	651:40	13	xDisplay
FIELD	651:40	651:40	14	xDisplay
LEAF_NODE	651:40	651:40	15	xDisplay
LEAF_NODE	651:48	651:48	13	,
ARGUMENT	651:50	651:50	13	RootWindow ( xDisplay , xScreen )
FUNCTION_CALL	651:50	651:78	14	RootWindow ( xDisplay , xScreen )
CALLEE	651:50	651:50	15	RootWindow
LEAF_NODE	651:50	651:50	16	RootWindow
LEAF_NODE	651:60	651:60	15	(
ARGUMENT	651:61	651:61	15	xDisplay
FIELD	651:61	651:61	16	xDisplay
LEAF_NODE	651:61	651:61	17	xDisplay
LEAF_NODE	651:69	651:69	15	,
ARGUMENT	651:71	651:71	15	xScreen
FIELD	651:71	651:71	16	xScreen
LEAF_NODE	651:71	651:71	17	xScreen
LEAF_NODE	651:78	651:78	15	)
LEAF_NODE	651:79	651:79	13	,
ARGUMENT	652:16	652:16	13	xVisual
FIELD	652:16	652:16	14	xVisual
LEAF_NODE	652:16	652:16	15	xVisual
LEAF_NODE	652:23	652:23	13	,
ARGUMENT	652:25	652:25	13	AllocAll
FIELD	652:25	652:25	14	AllocAll
LEAF_NODE	652:25	652:25	15	AllocAll
LEAF_NODE	652:33	652:33	13	)
LEAF_NODE	652:34	652:34	9	;
SELECTION	653:8	653:13	6	
KEYWORD	653:8	653:8	7	else
LEAF_NODE	653:8	653:8	8	else
STATEMENTS	653:13	663:8	7	
LEAF_NODE	653:13	653:13	8	{
STATEMENTS	654:12	662:12	8	
EXPR_STATEMENT	654:12	655:35	9	xColormap = XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocNone ) ;
EXPR	654:12	654:12	10	xColormap = XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocNone )
ASSIGN	654:12	654:24	11	xColormap = XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocNone )
LVAL	654:12	654:12	12	xColormap
FIELD	654:12	654:12	13	xColormap
LEAF_NODE	654:12	654:12	14	xColormap
ASSIGN_OP	654:22	654:22	12	=
LEAF_NODE	654:22	654:22	13	=
RVAL	654:24	654:24	12	XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocNone )
FUNCTION_CALL	654:24	655:34	13	XCreateColormap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xVisual , AllocNone )
CALLEE	654:24	654:24	14	XCreateColormap
LEAF_NODE	654:24	654:24	15	XCreateColormap
LEAF_NODE	654:39	654:39	14	(
ARGUMENT	654:40	654:40	14	xDisplay
FIELD	654:40	654:40	15	xDisplay
LEAF_NODE	654:40	654:40	16	xDisplay
LEAF_NODE	654:48	654:48	14	,
ARGUMENT	654:50	654:50	14	RootWindow ( xDisplay , xScreen )
FUNCTION_CALL	654:50	654:78	15	RootWindow ( xDisplay , xScreen )
CALLEE	654:50	654:50	16	RootWindow
LEAF_NODE	654:50	654:50	17	RootWindow
LEAF_NODE	654:60	654:60	16	(
ARGUMENT	654:61	654:61	16	xDisplay
FIELD	654:61	654:61	17	xDisplay
LEAF_NODE	654:61	654:61	18	xDisplay
LEAF_NODE	654:69	654:69	16	,
ARGUMENT	654:71	654:71	16	xScreen
FIELD	654:71	654:71	17	xScreen
LEAF_NODE	654:71	654:71	18	xScreen
LEAF_NODE	654:78	654:78	16	)
LEAF_NODE	654:79	654:79	14	,
ARGUMENT	655:16	655:16	14	xVisual
FIELD	655:16	655:16	15	xVisual
LEAF_NODE	655:16	655:16	16	xVisual
LEAF_NODE	655:23	655:23	14	,
ARGUMENT	655:25	655:25	14	AllocNone
FIELD	655:25	655:25	15	AllocNone
LEAF_NODE	655:25	655:25	16	AllocNone
LEAF_NODE	655:34	655:34	14	)
LEAF_NODE	655:35	655:35	10	;
LEAF_NODE	656:12	656:12	9	pixels
LEAF_NODE	656:19	656:19	9	=
LEAF_NODE	656:21	656:21	9	(
LEAF_NODE	656:22	656:22	9	unsigned
LEAF_NODE	656:31	656:31	9	long
LEAF_NODE	656:36	656:36	9	*
LEAF_NODE	656:37	656:37	9	)
LEAF_NODE	657:16	657:16	9	malloc
LEAF_NODE	657:22	657:22	9	(
LEAF_NODE	657:23	657:23	9	colormapSize
LEAF_NODE	657:36	657:36	9	*
LEAF_NODE	657:38	657:38	9	sizeof
LEAF_NODE	657:44	657:44	9	(
LEAF_NODE	657:45	657:45	9	unsigned
LEAF_NODE	657:54	657:54	9	long
LEAF_NODE	657:58	657:58	9	)
LEAF_NODE	657:59	657:59	9	)
LEAF_NODE	657:60	657:60	9	;
EXPR_STATEMENT	658:12	658:26	9	MCHECK ( pixels ) ;
EXPR	658:12	658:12	10	MCHECK ( pixels )
FUNCTION_CALL	658:12	658:25	11	MCHECK ( pixels )
CALLEE	658:12	658:12	12	MCHECK
LEAF_NODE	658:12	658:12	13	MCHECK
LEAF_NODE	658:18	658:18	12	(
ARGUMENT	658:19	658:19	12	pixels
FIELD	658:19	658:19	13	pixels
LEAF_NODE	658:19	658:19	14	pixels
LEAF_NODE	658:25	658:25	12	)
LEAF_NODE	658:26	658:26	10	;
EXPR_STATEMENT	659:12	660:46	9	( void ) XAllocColorCells ( xDisplay , xColormap , True , NULL , 0 , pixels , colormapSize ) ;
EXPR	659:12	659:19	10	( void ) XAllocColorCells ( xDisplay , xColormap , True , NULL , 0 , pixels , colormapSize )
LEAF_NODE	659:12	659:12	11	(
TYPE_NAME	659:13	659:13	11	void
LEAF_NODE	659:13	659:13	12	void
LEAF_NODE	659:17	659:17	11	)
FUNCTION_CALL	659:19	660:45	11	XAllocColorCells ( xDisplay , xColormap , True , NULL , 0 , pixels , colormapSize )
CALLEE	659:19	659:19	12	XAllocColorCells
LEAF_NODE	659:19	659:19	13	XAllocColorCells
LEAF_NODE	659:35	659:35	12	(
ARGUMENT	659:36	659:36	12	xDisplay
FIELD	659:36	659:36	13	xDisplay
LEAF_NODE	659:36	659:36	14	xDisplay
LEAF_NODE	659:44	659:44	12	,
ARGUMENT	659:46	659:46	12	xColormap
FIELD	659:46	659:46	13	xColormap
LEAF_NODE	659:46	659:46	14	xColormap
LEAF_NODE	659:55	659:55	12	,
ARGUMENT	659:57	659:57	12	True
FIELD	659:57	659:57	13	True
LEAF_NODE	659:57	659:57	14	True
LEAF_NODE	659:61	659:61	12	,
ARGUMENT	660:16	660:16	12	NULL
FIELD	660:16	660:16	13	NULL
LEAF_NODE	660:16	660:16	14	NULL
LEAF_NODE	660:20	660:20	12	,
ARGUMENT	660:22	660:22	12	0
FIELD	660:22	660:22	13	0
LEAF_NODE	660:22	660:22	14	0
LEAF_NODE	660:23	660:23	12	,
ARGUMENT	660:25	660:25	12	pixels
FIELD	660:25	660:25	13	pixels
LEAF_NODE	660:25	660:25	14	pixels
LEAF_NODE	660:31	660:31	12	,
ARGUMENT	660:33	660:33	12	colormapSize
FIELD	660:33	660:33	13	colormapSize
LEAF_NODE	660:33	660:33	14	colormapSize
LEAF_NODE	660:45	660:45	12	)
LEAF_NODE	660:46	660:46	10	;
EXPR_STATEMENT	661:12	661:49	9	basePixel = ( unsigned char ) pixels [ 0 ] ;
EXPR	661:12	661:12	10	basePixel = ( unsigned char ) pixels [ 0 ]
ASSIGN	661:12	661:24	11	basePixel = ( unsigned char ) pixels [ 0 ]
LVAL	661:12	661:12	12	basePixel
FIELD	661:12	661:12	13	basePixel
LEAF_NODE	661:12	661:12	14	basePixel
ASSIGN_OP	661:22	661:22	12	=
LEAF_NODE	661:22	661:22	13	=
RVAL	661:24	661:40	12	( unsigned char ) pixels [ 0 ]
LEAF_NODE	661:24	661:24	13	(
TYPE_NAME	661:25	661:34	13	unsigned char
LEAF_NODE	661:25	661:25	14	unsigned
LEAF_NODE	661:34	661:34	14	char
LEAF_NODE	661:38	661:38	13	)
FIELD	661:40	661:48	13	pixels [ 0 ]
LEAF_NODE	661:40	661:40	14	pixels
LEAF_NODE	661:46	661:46	14	[
EXPR	661:47	661:47	14	0
FIELD	661:47	661:47	15	0
LEAF_NODE	661:47	661:47	16	0
LEAF_NODE	661:48	661:48	14	]
LEAF_NODE	661:49	661:49	10	;
EXPR_STATEMENT	662:12	662:24	9	free ( pixels ) ;
EXPR	662:12	662:12	10	free ( pixels )
FUNCTION_CALL	662:12	662:23	11	free ( pixels )
CALLEE	662:12	662:12	12	free
LEAF_NODE	662:12	662:12	13	free
LEAF_NODE	662:16	662:16	12	(
ARGUMENT	662:17	662:17	12	pixels
FIELD	662:17	662:17	13	pixels
LEAF_NODE	662:17	662:17	14	pixels
LEAF_NODE	662:23	662:23	12	)
LEAF_NODE	662:24	662:24	10	;
LEAF_NODE	663:8	663:8	8	}
EXPR_STATEMENT	664:8	664:63	6	XStoreColors ( xDisplay , xColormap , colors , colormapSize ) ;
EXPR	664:8	664:8	7	XStoreColors ( xDisplay , xColormap , colors , colormapSize )
FUNCTION_CALL	664:8	664:62	8	XStoreColors ( xDisplay , xColormap , colors , colormapSize )
CALLEE	664:8	664:8	9	XStoreColors
LEAF_NODE	664:8	664:8	10	XStoreColors
LEAF_NODE	664:20	664:20	9	(
ARGUMENT	664:21	664:21	9	xDisplay
FIELD	664:21	664:21	10	xDisplay
LEAF_NODE	664:21	664:21	11	xDisplay
LEAF_NODE	664:29	664:29	9	,
ARGUMENT	664:31	664:31	9	xColormap
FIELD	664:31	664:31	10	xColormap
LEAF_NODE	664:31	664:31	11	xColormap
LEAF_NODE	664:40	664:40	9	,
ARGUMENT	664:42	664:42	9	colors
FIELD	664:42	664:42	10	colors
LEAF_NODE	664:42	664:42	11	colors
LEAF_NODE	664:48	664:48	9	,
ARGUMENT	664:50	664:50	9	colormapSize
FIELD	664:50	664:50	10	colormapSize
LEAF_NODE	664:50	664:50	11	colormapSize
LEAF_NODE	664:62	664:62	9	)
LEAF_NODE	664:63	664:63	7	;
JUMP_STATEMENT	665:8	665:13	6	break DESTINATION ;
KEYWORD	665:8	665:8	7	break
LEAF_NODE	665:8	665:8	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	665:13	665:13	7	;
LABEL	666:4	666:10	6	case 1 :
LEAF_NODE	666:4	666:4	7	case
LEAF_NODE	666:9	666:9	7	1
LEAF_NODE	666:10	666:10	7	:
EXPR_STATEMENT	667:8	667:23	6	xImageDepth = 1 ;
EXPR	667:8	667:8	7	xImageDepth = 1
ASSIGN	667:8	667:22	8	xImageDepth = 1
LVAL	667:8	667:8	9	xImageDepth
FIELD	667:8	667:8	10	xImageDepth
LEAF_NODE	667:8	667:8	11	xImageDepth
ASSIGN_OP	667:20	667:20	9	=
LEAF_NODE	667:20	667:20	10	=
RVAL	667:22	667:22	9	1
FIELD	667:22	667:22	10	1
LEAF_NODE	667:22	667:22	11	1
LEAF_NODE	667:23	667:23	7	;
EXPR_STATEMENT	668:8	668:50	6	xVisual = DefaultVisual ( xDisplay , xScreen ) ;
EXPR	668:8	668:8	7	xVisual = DefaultVisual ( xDisplay , xScreen )
ASSIGN	668:8	668:18	8	xVisual = DefaultVisual ( xDisplay , xScreen )
LVAL	668:8	668:8	9	xVisual
FIELD	668:8	668:8	10	xVisual
LEAF_NODE	668:8	668:8	11	xVisual
ASSIGN_OP	668:16	668:16	9	=
LEAF_NODE	668:16	668:16	10	=
RVAL	668:18	668:18	9	DefaultVisual ( xDisplay , xScreen )
FUNCTION_CALL	668:18	668:49	10	DefaultVisual ( xDisplay , xScreen )
CALLEE	668:18	668:18	11	DefaultVisual
LEAF_NODE	668:18	668:18	12	DefaultVisual
LEAF_NODE	668:31	668:31	11	(
ARGUMENT	668:32	668:32	11	xDisplay
FIELD	668:32	668:32	12	xDisplay
LEAF_NODE	668:32	668:32	13	xDisplay
LEAF_NODE	668:40	668:40	11	,
ARGUMENT	668:42	668:42	11	xScreen
FIELD	668:42	668:42	12	xScreen
LEAF_NODE	668:42	668:42	13	xScreen
LEAF_NODE	668:49	668:49	11	)
LEAF_NODE	668:50	668:50	7	;
EXPR_STATEMENT	669:8	669:54	6	xColormap = DefaultColormap ( xDisplay , xScreen ) ;
EXPR	669:8	669:8	7	xColormap = DefaultColormap ( xDisplay , xScreen )
ASSIGN	669:8	669:20	8	xColormap = DefaultColormap ( xDisplay , xScreen )
LVAL	669:8	669:8	9	xColormap
FIELD	669:8	669:8	10	xColormap
LEAF_NODE	669:8	669:8	11	xColormap
ASSIGN_OP	669:18	669:18	9	=
LEAF_NODE	669:18	669:18	10	=
RVAL	669:20	669:20	9	DefaultColormap ( xDisplay , xScreen )
FUNCTION_CALL	669:20	669:53	10	DefaultColormap ( xDisplay , xScreen )
CALLEE	669:20	669:20	11	DefaultColormap
LEAF_NODE	669:20	669:20	12	DefaultColormap
LEAF_NODE	669:35	669:35	11	(
ARGUMENT	669:36	669:36	11	xDisplay
FIELD	669:36	669:36	12	xDisplay
LEAF_NODE	669:36	669:36	13	xDisplay
LEAF_NODE	669:44	669:44	11	,
ARGUMENT	669:46	669:46	11	xScreen
FIELD	669:46	669:46	12	xScreen
LEAF_NODE	669:46	669:46	13	xScreen
LEAF_NODE	669:53	669:53	11	)
LEAF_NODE	669:54	669:54	7	;
JUMP_STATEMENT	670:8	670:13	6	break DESTINATION ;
KEYWORD	670:8	670:8	7	break
LEAF_NODE	670:8	670:8	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	670:13	670:13	7	;
LABEL	671:4	671:11	6	default :
LEAF_NODE	671:4	671:4	7	default
LEAF_NODE	671:11	671:11	7	:
EXPR_STATEMENT	672:8	672:76	6	fprintf ( stderr , "xtiff: unsupported image depth %d\n" , tfImageDepth ) ;
EXPR	672:8	672:8	7	fprintf ( stderr , "xtiff: unsupported image depth %d\n" , tfImageDepth )
FUNCTION_CALL	672:8	672:75	8	fprintf ( stderr , "xtiff: unsupported image depth %d\n" , tfImageDepth )
CALLEE	672:8	672:8	9	fprintf
LEAF_NODE	672:8	672:8	10	fprintf
LEAF_NODE	672:15	672:15	9	(
ARGUMENT	672:16	672:16	9	stderr
FIELD	672:16	672:16	10	stderr
LEAF_NODE	672:16	672:16	11	stderr
LEAF_NODE	672:22	672:22	9	,
ARGUMENT	672:24	672:24	9	"xtiff: unsupported image depth %d\n"
FIELD	672:24	672:24	10	"xtiff: unsupported image depth %d\n"
LEAF_NODE	672:24	672:24	11	"xtiff: unsupported image depth %d\n"
LEAF_NODE	672:61	672:61	9	,
ARGUMENT	672:63	672:63	9	tfImageDepth
FIELD	672:63	672:63	10	tfImageDepth
LEAF_NODE	672:63	672:63	11	tfImageDepth
LEAF_NODE	672:75	672:75	9	)
LEAF_NODE	672:76	672:76	7	;
EXPR_STATEMENT	673:8	673:15	6	exit ( 0 ) ;
EXPR	673:8	673:8	7	exit ( 0 )
FUNCTION_CALL	673:8	673:14	8	exit ( 0 )
CALLEE	673:8	673:8	9	exit
LEAF_NODE	673:8	673:8	10	exit
LEAF_NODE	673:12	673:12	9	(
ARGUMENT	673:13	673:13	9	0
FIELD	673:13	673:13	10	0
LEAF_NODE	673:13	673:13	11	0
LEAF_NODE	673:14	673:14	9	)
LEAF_NODE	673:15	673:15	7	;
LEAF_NODE	674:4	674:4	5	}
SELECTION	676:4	677:1	3	
KEYWORD	676:4	676:4	4	if
LEAF_NODE	676:4	676:4	5	if
LEAF_NODE	676:7	676:7	4	(
CONDITION	676:8	676:8	4	appData . verbose == True
EXPR	676:8	676:27	5	appData . verbose == True
FIELD	676:8	676:16	6	appData . verbose
LEAF_NODE	676:8	676:8	7	appData
LEAF_NODE	676:15	676:15	7	.
LEAF_NODE	676:16	676:16	7	verbose
EQ_OPERATOR	676:24	676:24	6	==
LEAF_NODE	676:24	676:24	7	==
FIELD	676:27	676:27	6	True
LEAF_NODE	676:27	676:27	7	True
LEAF_NODE	676:31	676:31	4	)
STATEMENTS	677:1	677:1	4	
LEAF_NODE	677:1	677:1	5	fprintf
LEAF_NODE	677:8	677:8	3	(
LEAF_NODE	677:9	677:9	3	stderr
LEAF_NODE	677:15	677:15	3	,
LEAF_NODE	677:17	677:17	3	"%s: Using %d-bit %s visual.\n"
LEAF_NODE	677:48	677:48	3	,
LEAF_NODE	678:5	678:5	3	fileName
LEAF_NODE	678:13	678:13	3	,
LEAF_NODE	678:15	678:15	3	xImageDepth
LEAF_NODE	678:26	678:26	3	,
LEAF_NODE	678:28	678:28	3	classNames
LEAF_NODE	678:38	678:38	3	[
LEAF_NODE	678:39	678:39	3	xVisual
LEAF_NODE	678:46	678:46	3	->
LEAF_NODE	678:48	678:48	3	class
LEAF_NODE	678:53	678:53	3	]
LEAF_NODE	678:54	678:54	3	)
LEAF_NODE	678:55	678:55	3	;
SELECTION	680:4	681:8	3	
KEYWORD	680:4	680:4	4	if
LEAF_NODE	680:4	680:4	5	if
LEAF_NODE	680:7	680:7	4	(
CONDITION	680:8	680:8	4	colors != NULL
EXPR	680:8	680:18	5	colors != NULL
FIELD	680:8	680:8	6	colors
LEAF_NODE	680:8	680:8	7	colors
EQ_OPERATOR	680:15	680:15	6	!=
LEAF_NODE	680:15	680:15	7	!=
FIELD	680:18	680:18	6	NULL
LEAF_NODE	680:18	680:18	7	NULL
LEAF_NODE	680:22	680:22	4	)
STATEMENTS	681:8	681:8	4	
EXPR_STATEMENT	681:8	681:20	5	free ( colors ) ;
EXPR	681:8	681:8	6	free ( colors )
FUNCTION_CALL	681:8	681:19	7	free ( colors )
CALLEE	681:8	681:8	8	free
LEAF_NODE	681:8	681:8	9	free
LEAF_NODE	681:12	681:12	8	(
ARGUMENT	681:13	681:13	8	colors
FIELD	681:13	681:13	9	colors
LEAF_NODE	681:13	681:13	10	colors
LEAF_NODE	681:19	681:19	8	)
LEAF_NODE	681:20	681:20	6	;
SELECTION	682:4	683:8	3	
KEYWORD	682:4	682:4	4	if
LEAF_NODE	682:4	682:4	5	if
LEAF_NODE	682:7	682:7	4	(
CONDITION	682:8	682:8	4	grayMap != NULL
EXPR	682:8	682:19	5	grayMap != NULL
FIELD	682:8	682:8	6	grayMap
LEAF_NODE	682:8	682:8	7	grayMap
EQ_OPERATOR	682:16	682:16	6	!=
LEAF_NODE	682:16	682:16	7	!=
FIELD	682:19	682:19	6	NULL
LEAF_NODE	682:19	682:19	7	NULL
LEAF_NODE	682:23	682:23	4	)
STATEMENTS	683:8	683:8	4	
EXPR_STATEMENT	683:8	683:21	5	free ( grayMap ) ;
EXPR	683:8	683:8	6	free ( grayMap )
FUNCTION_CALL	683:8	683:20	7	free ( grayMap )
CALLEE	683:8	683:8	8	free
LEAF_NODE	683:8	683:8	9	free
LEAF_NODE	683:12	683:12	8	(
ARGUMENT	683:13	683:13	8	grayMap
FIELD	683:13	683:13	9	grayMap
LEAF_NODE	683:13	683:13	10	grayMap
LEAF_NODE	683:20	683:20	8	)
LEAF_NODE	683:21	683:21	6	;
SELECTION	684:4	685:8	3	
KEYWORD	684:4	684:4	4	if
LEAF_NODE	684:4	684:4	5	if
LEAF_NODE	684:7	684:7	4	(
CONDITION	684:8	684:8	4	redMap != NULL
EXPR	684:8	684:18	5	redMap != NULL
FIELD	684:8	684:8	6	redMap
LEAF_NODE	684:8	684:8	7	redMap
EQ_OPERATOR	684:15	684:15	6	!=
LEAF_NODE	684:15	684:15	7	!=
FIELD	684:18	684:18	6	NULL
LEAF_NODE	684:18	684:18	7	NULL
LEAF_NODE	684:22	684:22	4	)
STATEMENTS	685:8	685:8	4	
EXPR_STATEMENT	685:8	685:20	5	free ( redMap ) ;
EXPR	685:8	685:8	6	free ( redMap )
FUNCTION_CALL	685:8	685:19	7	free ( redMap )
CALLEE	685:8	685:8	8	free
LEAF_NODE	685:8	685:8	9	free
LEAF_NODE	685:12	685:12	8	(
ARGUMENT	685:13	685:13	8	redMap
FIELD	685:13	685:13	9	redMap
LEAF_NODE	685:13	685:13	10	redMap
LEAF_NODE	685:19	685:19	8	)
LEAF_NODE	685:20	685:20	6	;
SELECTION	686:4	687:8	3	
KEYWORD	686:4	686:4	4	if
LEAF_NODE	686:4	686:4	5	if
LEAF_NODE	686:7	686:7	4	(
CONDITION	686:8	686:8	4	greenMap != NULL
EXPR	686:8	686:20	5	greenMap != NULL
FIELD	686:8	686:8	6	greenMap
LEAF_NODE	686:8	686:8	7	greenMap
EQ_OPERATOR	686:17	686:17	6	!=
LEAF_NODE	686:17	686:17	7	!=
FIELD	686:20	686:20	6	NULL
LEAF_NODE	686:20	686:20	7	NULL
LEAF_NODE	686:24	686:24	4	)
STATEMENTS	687:8	687:8	4	
EXPR_STATEMENT	687:8	687:22	5	free ( greenMap ) ;
EXPR	687:8	687:8	6	free ( greenMap )
FUNCTION_CALL	687:8	687:21	7	free ( greenMap )
CALLEE	687:8	687:8	8	free
LEAF_NODE	687:8	687:8	9	free
LEAF_NODE	687:12	687:12	8	(
ARGUMENT	687:13	687:13	8	greenMap
FIELD	687:13	687:13	9	greenMap
LEAF_NODE	687:13	687:13	10	greenMap
LEAF_NODE	687:21	687:21	8	)
LEAF_NODE	687:22	687:22	6	;
SELECTION	688:4	689:8	3	
KEYWORD	688:4	688:4	4	if
LEAF_NODE	688:4	688:4	5	if
LEAF_NODE	688:7	688:7	4	(
CONDITION	688:8	688:8	4	blueMap != NULL
EXPR	688:8	688:19	5	blueMap != NULL
FIELD	688:8	688:8	6	blueMap
LEAF_NODE	688:8	688:8	7	blueMap
EQ_OPERATOR	688:16	688:16	6	!=
LEAF_NODE	688:16	688:16	7	!=
FIELD	688:19	688:19	6	NULL
LEAF_NODE	688:19	688:19	7	NULL
LEAF_NODE	688:23	688:23	4	)
STATEMENTS	689:8	689:8	4	
EXPR_STATEMENT	689:8	689:21	5	free ( blueMap ) ;
EXPR	689:8	689:8	6	free ( blueMap )
FUNCTION_CALL	689:8	689:20	7	free ( blueMap )
CALLEE	689:8	689:8	8	free
LEAF_NODE	689:8	689:8	9	free
LEAF_NODE	689:12	689:12	8	(
ARGUMENT	689:13	689:13	8	blueMap
FIELD	689:13	689:13	9	blueMap
LEAF_NODE	689:13	689:13	10	blueMap
LEAF_NODE	689:20	689:20	8	)
LEAF_NODE	689:21	689:21	6	;
EXPR_STATEMENT	691:4	691:17	3	colors = NULL ;
EXPR	691:4	691:4	4	colors = NULL
ASSIGN	691:4	691:13	5	colors = NULL
LVAL	691:4	691:4	6	colors
FIELD	691:4	691:4	7	colors
LEAF_NODE	691:4	691:4	8	colors
ASSIGN_OP	691:11	691:11	6	=
LEAF_NODE	691:11	691:11	7	=
RVAL	691:13	691:13	6	NULL
FIELD	691:13	691:13	7	NULL
LEAF_NODE	691:13	691:13	8	NULL
LEAF_NODE	691:17	691:17	4	;
EXPR_STATEMENT	691:19	691:63	3	grayMap = redMap = greenMap = blueMap = NULL ;
EXPR	691:19	691:19	4	grayMap = redMap = greenMap = blueMap = NULL
ASSIGN	691:19	691:29	5	grayMap = redMap = greenMap = blueMap = NULL
LVAL	691:19	691:19	6	grayMap
FIELD	691:19	691:19	7	grayMap
LEAF_NODE	691:19	691:19	8	grayMap
ASSIGN_OP	691:27	691:27	6	=
LEAF_NODE	691:27	691:27	7	=
RVAL	691:29	691:29	6	redMap = greenMap = blueMap = NULL
ASSIGN	691:29	691:38	7	redMap = greenMap = blueMap = NULL
LVAL	691:29	691:29	8	redMap
FIELD	691:29	691:29	9	redMap
LEAF_NODE	691:29	691:29	10	redMap
ASSIGN_OP	691:36	691:36	8	=
LEAF_NODE	691:36	691:36	9	=
RVAL	691:38	691:38	8	greenMap = blueMap = NULL
ASSIGN	691:38	691:49	9	greenMap = blueMap = NULL
LVAL	691:38	691:38	10	greenMap
FIELD	691:38	691:38	11	greenMap
LEAF_NODE	691:38	691:38	12	greenMap
ASSIGN_OP	691:47	691:47	10	=
LEAF_NODE	691:47	691:47	11	=
RVAL	691:49	691:49	10	blueMap = NULL
ASSIGN	691:49	691:59	11	blueMap = NULL
LVAL	691:49	691:49	12	blueMap
FIELD	691:49	691:49	13	blueMap
LEAF_NODE	691:49	691:49	14	blueMap
ASSIGN_OP	691:57	691:57	12	=
LEAF_NODE	691:57	691:57	13	=
RVAL	691:59	691:59	12	NULL
FIELD	691:59	691:59	13	NULL
LEAF_NODE	691:59	691:59	14	NULL
LEAF_NODE	691:63	691:63	4	;
LEAF_NODE	692:0	692:0	2	}
SIMPLE_DECL	702:4	702:33	1	int image_depth , int visual_class ;
INIT_DECL_LIST	702:4	702:4	2	int image_depth , int visual_class
VAR_DECL	702:4	702:8	3	int image_depth
TYPE	702:4	702:4	4	int
TYPE_NAME	702:4	702:4	5	int
LEAF_NODE	702:4	702:4	6	int
NAME	702:8	702:8	4	image_depth
LEAF_NODE	702:8	702:8	5	image_depth
LEAF_NODE	702:19	702:19	3	,
VAR_DECL	702:4	702:21	3	int visual_class
TYPE	702:4	702:4	4	int
TYPE_NAME	702:4	702:4	5	int
LEAF_NODE	702:4	702:4	6	int
NAME	702:21	702:21	4	visual_class
LEAF_NODE	702:21	702:21	5	visual_class
LEAF_NODE	702:33	702:33	2	;
SIMPLE_DECL	703:4	703:19	1	Visual * visual ;
VAR_DECL	703:4	703:13	2	Visual * visual
TYPE	703:4	703:12	3	Visual *
TYPE_NAME	703:4	703:4	4	Visual
LEAF_NODE	703:4	703:4	5	Visual
POINTER	703:12	703:12	4	*
LEAF_NODE	703:12	703:12	5	*
NAME	703:13	703:13	3	visual
LEAF_NODE	703:13	703:13	4	visual
LEAF_NODE	703:19	703:19	2	;
SIMPLE_DECL	705:4	705:50	1	XVisualInfo template_visual , XVisualInfo * visual_list , XVisualInfo * vl ;
INIT_DECL_LIST	705:4	705:4	2	XVisualInfo template_visual , XVisualInfo * visual_list , XVisualInfo * vl
VAR_DECL	705:4	705:16	3	XVisualInfo template_visual
TYPE	705:4	705:4	4	XVisualInfo
TYPE_NAME	705:4	705:4	5	XVisualInfo
LEAF_NODE	705:4	705:4	6	XVisualInfo
NAME	705:16	705:16	4	template_visual
LEAF_NODE	705:16	705:16	5	template_visual
LEAF_NODE	705:31	705:31	3	,
INIT_DECL_LIST	705:4	705:4	3	XVisualInfo * visual_list , XVisualInfo * vl
VAR_DECL	705:4	705:34	4	XVisualInfo * visual_list
TYPE	705:4	705:33	5	XVisualInfo *
TYPE_NAME	705:4	705:4	6	XVisualInfo
LEAF_NODE	705:4	705:4	7	XVisualInfo
POINTER	705:33	705:33	6	*
LEAF_NODE	705:33	705:33	7	*
NAME	705:34	705:34	5	visual_list
LEAF_NODE	705:34	705:34	6	visual_list
LEAF_NODE	705:45	705:45	4	,
VAR_DECL	705:4	705:48	4	XVisualInfo * vl
TYPE	705:4	705:47	5	XVisualInfo *
TYPE_NAME	705:4	705:4	6	XVisualInfo
LEAF_NODE	705:4	705:4	7	XVisualInfo
POINTER	705:47	705:47	6	*
LEAF_NODE	705:47	705:47	7	*
NAME	705:48	705:48	5	vl
LEAF_NODE	705:48	705:48	6	vl
LEAF_NODE	705:50	705:50	2	;
SIMPLE_DECL	706:4	706:20	1	int i , int n_visuals ;
INIT_DECL_LIST	706:4	706:4	2	int i , int n_visuals
VAR_DECL	706:4	706:8	3	int i
TYPE	706:4	706:4	4	int
TYPE_NAME	706:4	706:4	5	int
LEAF_NODE	706:4	706:4	6	int
NAME	706:8	706:8	4	i
LEAF_NODE	706:8	706:8	5	i
LEAF_NODE	706:9	706:9	3	,
VAR_DECL	706:4	706:11	3	int n_visuals
TYPE	706:4	706:4	4	int
TYPE_NAME	706:4	706:4	5	int
LEAF_NODE	706:4	706:4	6	int
NAME	706:11	706:11	4	n_visuals
LEAF_NODE	706:11	706:11	5	n_visuals
LEAF_NODE	706:20	706:20	2	;
FUNCTION_DEF	734:0	868:0	1	
RETURN_TYPE	734:0	734:0	2	void
TYPE_NAME	734:0	734:0	3	void
LEAF_NODE	734:0	734:0	4	void
FUNCTION_NAME	735:0	735:0	2	GetTIFFImage
LEAF_NODE	735:0	735:0	3	GetTIFFImage
PARAMETER_LIST	735:12	735:13	2	( )
LEAF_NODE	735:12	735:12	3	(
LEAF_NODE	735:13	735:13	3	)
LEAF_NODE	736:0	736:0	2	{
STATEMENTS	737:4	867:4	2	
SIMPLE_DECL	737:4	737:56	3	int [ 3 ] pixel_map , int red_shift , int green_shift , int blue_shift ;
INIT_DECL_LIST	737:4	737:4	4	int [ 3 ] pixel_map , int red_shift , int green_shift , int blue_shift
VAR_DECL	737:4	737:8	5	int [ 3 ] pixel_map
TYPE	737:4	737:17	6	int [ 3 ]
TYPE_NAME	737:4	737:4	7	int
LEAF_NODE	737:4	737:4	8	int
TYPE_SUFFIX	737:17	737:19	7	[ 3 ]
LEAF_NODE	737:17	737:17	8	[
FIELD	737:18	737:18	8	3
LEAF_NODE	737:18	737:18	9	3
LEAF_NODE	737:19	737:19	8	]
NAME	737:8	737:8	6	pixel_map
LEAF_NODE	737:8	737:8	7	pixel_map
LEAF_NODE	737:20	737:20	5	,
INIT_DECL_LIST	737:4	737:4	5	int red_shift , int green_shift , int blue_shift
VAR_DECL	737:4	737:22	6	int red_shift
TYPE	737:4	737:4	7	int
TYPE_NAME	737:4	737:4	8	int
LEAF_NODE	737:4	737:4	9	int
NAME	737:22	737:22	7	red_shift
LEAF_NODE	737:22	737:22	8	red_shift
LEAF_NODE	737:31	737:31	6	,
INIT_DECL_LIST	737:4	737:4	6	int green_shift , int blue_shift
VAR_DECL	737:4	737:33	7	int green_shift
TYPE	737:4	737:4	8	int
TYPE_NAME	737:4	737:4	9	int
LEAF_NODE	737:4	737:4	10	int
NAME	737:33	737:33	8	green_shift
LEAF_NODE	737:33	737:33	9	green_shift
LEAF_NODE	737:44	737:44	7	,
VAR_DECL	737:4	737:46	7	int blue_shift
TYPE	737:4	737:4	8	int
TYPE_NAME	737:4	737:4	9	int
LEAF_NODE	737:4	737:4	10	int
NAME	737:46	737:46	8	blue_shift
LEAF_NODE	737:46	737:46	9	blue_shift
LEAF_NODE	737:56	737:56	4	;
SIMPLE_DECL	738:4	738:40	3	char * scan_line , char * output_p , char * input_p ;
INIT_DECL_LIST	738:4	738:4	4	char * scan_line , char * output_p , char * input_p
VAR_DECL	738:4	738:10	5	char * scan_line
TYPE	738:4	738:9	6	char *
TYPE_NAME	738:4	738:4	7	char
LEAF_NODE	738:4	738:4	8	char
POINTER	738:9	738:9	7	*
LEAF_NODE	738:9	738:9	8	*
NAME	738:10	738:10	6	scan_line
LEAF_NODE	738:10	738:10	7	scan_line
LEAF_NODE	738:19	738:19	5	,
INIT_DECL_LIST	738:4	738:4	5	char * output_p , char * input_p
VAR_DECL	738:4	738:22	6	char * output_p
TYPE	738:4	738:21	7	char *
TYPE_NAME	738:4	738:4	8	char
LEAF_NODE	738:4	738:4	9	char
POINTER	738:21	738:21	8	*
LEAF_NODE	738:21	738:21	9	*
NAME	738:22	738:22	7	output_p
LEAF_NODE	738:22	738:22	8	output_p
LEAF_NODE	738:30	738:30	6	,
VAR_DECL	738:4	738:33	6	char * input_p
TYPE	738:4	738:32	7	char *
TYPE_NAME	738:4	738:4	8	char
LEAF_NODE	738:4	738:4	9	char
POINTER	738:32	738:32	8	*
LEAF_NODE	738:32	738:32	9	*
NAME	738:33	738:33	7	input_p
LEAF_NODE	738:33	738:33	8	input_p
LEAF_NODE	738:40	738:40	4	;
SIMPLE_DECL	739:4	739:15	3	uint32 i , uint32 j ;
INIT_DECL_LIST	739:4	739:4	4	uint32 i , uint32 j
VAR_DECL	739:4	739:11	5	uint32 i
TYPE	739:4	739:4	6	uint32
TYPE_NAME	739:4	739:4	7	uint32
LEAF_NODE	739:4	739:4	8	uint32
NAME	739:11	739:11	6	i
LEAF_NODE	739:11	739:11	7	i
LEAF_NODE	739:12	739:12	5	,
VAR_DECL	739:4	739:14	5	uint32 j
TYPE	739:4	739:4	6	uint32
TYPE_NAME	739:4	739:4	7	uint32
LEAF_NODE	739:4	739:4	8	uint32
NAME	739:14	739:14	6	j
LEAF_NODE	739:14	739:14	7	j
LEAF_NODE	739:15	739:15	4	;
SIMPLE_DECL	740:4	740:12	3	uint16 s ;
VAR_DECL	740:4	740:11	4	uint16 s
TYPE	740:4	740:4	5	uint16
TYPE_NAME	740:4	740:4	6	uint16
LEAF_NODE	740:4	740:4	7	uint16
NAME	740:11	740:11	5	s
LEAF_NODE	740:11	740:11	6	s
LEAF_NODE	740:12	740:12	4	;
EXPR_STATEMENT	742:4	742:73	3	scan_line = ( char * ) malloc ( tfBytesPerRow = TIFFScanlineSize ( tfFile ) ) ;
EXPR	742:4	742:4	4	scan_line = ( char * ) malloc ( tfBytesPerRow = TIFFScanlineSize ( tfFile ) )
ASSIGN	742:4	742:16	5	scan_line = ( char * ) malloc ( tfBytesPerRow = TIFFScanlineSize ( tfFile ) )
LVAL	742:4	742:4	6	scan_line
FIELD	742:4	742:4	7	scan_line
LEAF_NODE	742:4	742:4	8	scan_line
ASSIGN_OP	742:14	742:14	6	=
LEAF_NODE	742:14	742:14	7	=
RVAL	742:16	742:25	6	( char * ) malloc ( tfBytesPerRow = TIFFScanlineSize ( tfFile ) )
LEAF_NODE	742:16	742:16	7	(
TYPE_NAME	742:17	742:17	7	char
LEAF_NODE	742:17	742:17	8	char
LEAF_NODE	742:22	742:22	7	*
LEAF_NODE	742:23	742:23	7	)
FUNCTION_CALL	742:25	742:72	7	malloc ( tfBytesPerRow = TIFFScanlineSize ( tfFile ) )
CALLEE	742:25	742:25	8	malloc
LEAF_NODE	742:25	742:25	9	malloc
LEAF_NODE	742:31	742:31	8	(
ARGUMENT	742:32	742:32	8	tfBytesPerRow = TIFFScanlineSize ( tfFile )
ASSIGN	742:32	742:48	9	tfBytesPerRow = TIFFScanlineSize ( tfFile )
LVAL	742:32	742:32	10	tfBytesPerRow
FIELD	742:32	742:32	11	tfBytesPerRow
LEAF_NODE	742:32	742:32	12	tfBytesPerRow
ASSIGN_OP	742:46	742:46	10	=
LEAF_NODE	742:46	742:46	11	=
RVAL	742:48	742:48	10	TIFFScanlineSize ( tfFile )
FUNCTION_CALL	742:48	742:71	11	TIFFScanlineSize ( tfFile )
CALLEE	742:48	742:48	12	TIFFScanlineSize
LEAF_NODE	742:48	742:48	13	TIFFScanlineSize
LEAF_NODE	742:64	742:64	12	(
ARGUMENT	742:65	742:65	12	tfFile
FIELD	742:65	742:65	13	tfFile
LEAF_NODE	742:65	742:65	14	tfFile
LEAF_NODE	742:71	742:71	12	)
LEAF_NODE	742:72	742:72	8	)
LEAF_NODE	742:73	742:73	4	;
EXPR_STATEMENT	743:4	743:21	3	MCHECK ( scan_line ) ;
EXPR	743:4	743:4	4	MCHECK ( scan_line )
FUNCTION_CALL	743:4	743:20	5	MCHECK ( scan_line )
CALLEE	743:4	743:4	6	MCHECK
LEAF_NODE	743:4	743:4	7	MCHECK
LEAF_NODE	743:10	743:10	6	(
ARGUMENT	743:11	743:11	6	scan_line
FIELD	743:11	743:11	7	scan_line
LEAF_NODE	743:11	743:11	8	scan_line
LEAF_NODE	743:20	743:20	6	)
LEAF_NODE	743:21	743:21	4	;
SELECTION	745:4	745:54	3	
KEYWORD	745:4	745:4	4	if
LEAF_NODE	745:4	745:4	5	if
LEAF_NODE	745:7	745:7	4	(
CONDITION	745:8	745:8	4	( tfImageDepth == 32 ) || ( tfImageDepth == 24 )
EXPR	745:8	745:8	5	( tfImageDepth == 32 ) || ( tfImageDepth == 24 )
OR	745:8	745:32	6	( tfImageDepth == 32 ) || ( tfImageDepth == 24 )
EXPR	745:8	745:27	7	( tfImageDepth == 32 )
LEAF_NODE	745:8	745:8	8	(
FIELD	745:9	745:9	8	tfImageDepth
LEAF_NODE	745:9	745:9	9	tfImageDepth
EQ_OPERATOR	745:22	745:22	8	==
LEAF_NODE	745:22	745:22	9	==
FIELD	745:25	745:25	8	32
LEAF_NODE	745:25	745:25	9	32
LEAF_NODE	745:27	745:27	8	)
LEAF_NODE	745:29	745:29	7	||
EXPR	745:32	745:51	7	( tfImageDepth == 24 )
LEAF_NODE	745:32	745:32	8	(
FIELD	745:33	745:33	8	tfImageDepth
LEAF_NODE	745:33	745:33	9	tfImageDepth
EQ_OPERATOR	745:46	745:46	8	==
LEAF_NODE	745:46	745:46	9	==
FIELD	745:49	745:49	8	24
LEAF_NODE	745:49	745:49	9	24
LEAF_NODE	745:51	745:51	8	)
LEAF_NODE	745:52	745:52	4	)
STATEMENTS	745:54	796:4	4	
LEAF_NODE	745:54	745:54	5	{
STATEMENTS	746:8	782:10	5	
LEAF_NODE	746:8	746:8	6	output_p
LEAF_NODE	746:17	746:17	6	=
LEAF_NODE	746:19	746:19	6	imageMemory
LEAF_NODE	746:31	746:31	6	=
LEAF_NODE	746:33	746:33	6	(
LEAF_NODE	746:34	746:34	6	char
LEAF_NODE	746:39	746:39	6	*
LEAF_NODE	746:40	746:40	6	)
LEAF_NODE	747:12	747:12	6	malloc
LEAF_NODE	747:18	747:18	6	(
LEAF_NODE	747:19	747:19	6	tfImageWidth
LEAF_NODE	747:32	747:32	6	*
LEAF_NODE	747:34	747:34	6	tfImageHeight
LEAF_NODE	747:48	747:48	6	*
LEAF_NODE	747:50	747:50	6	4
LEAF_NODE	747:51	747:51	6	)
LEAF_NODE	747:52	747:52	6	;
EXPR_STATEMENT	748:8	748:27	6	MCHECK ( imageMemory ) ;
EXPR	748:8	748:8	7	MCHECK ( imageMemory )
FUNCTION_CALL	748:8	748:26	8	MCHECK ( imageMemory )
CALLEE	748:8	748:8	9	MCHECK
LEAF_NODE	748:8	748:8	10	MCHECK
LEAF_NODE	748:14	748:14	9	(
ARGUMENT	748:15	748:15	9	imageMemory
FIELD	748:15	748:15	10	imageMemory
LEAF_NODE	748:15	748:15	11	imageMemory
LEAF_NODE	748:26	748:26	9	)
LEAF_NODE	748:27	748:27	7	;
SELECTION	753:8	753:50	6	
KEYWORD	753:8	753:8	7	if
LEAF_NODE	753:8	753:8	8	if
LEAF_NODE	753:11	753:11	7	(
CONDITION	753:12	753:12	7	ImageByteOrder ( xDisplay ) == LSBFirst
EXPR	753:12	753:40	8	ImageByteOrder ( xDisplay ) == LSBFirst
FUNCTION_CALL	753:12	753:35	9	ImageByteOrder ( xDisplay )
CALLEE	753:12	753:12	10	ImageByteOrder
LEAF_NODE	753:12	753:12	11	ImageByteOrder
LEAF_NODE	753:26	753:26	10	(
ARGUMENT	753:27	753:27	10	xDisplay
FIELD	753:27	753:27	11	xDisplay
LEAF_NODE	753:27	753:27	12	xDisplay
LEAF_NODE	753:35	753:35	10	)
EQ_OPERATOR	753:37	753:37	9	==
LEAF_NODE	753:37	753:37	10	==
FIELD	753:40	753:40	9	LSBFirst
LEAF_NODE	753:40	753:40	10	LSBFirst
LEAF_NODE	753:48	753:48	7	)
STATEMENTS	753:50	760:8	7	
LEAF_NODE	753:50	753:50	8	{
STATEMENTS	754:12	758:12	8	
EXPR_STATEMENT	754:12	755:75	9	red_shift = pixel_map [ 0 ] = xRedMask == 0xFF000000 ? 3 : ( xRedMask == 0xFF0000 ? 2 : ( xRedMask == 0xFF00 ? 1 : 0 ) ) ;
EXPR	754:12	754:12	10	red_shift = pixel_map [ 0 ] = xRedMask == 0xFF000000 ? 3 : ( xRedMask == 0xFF0000 ? 2 : ( xRedMask == 0xFF00 ? 1 : 0 ) )
ASSIGN	754:12	754:24	11	red_shift = pixel_map [ 0 ] = xRedMask == 0xFF000000 ? 3 : ( xRedMask == 0xFF0000 ? 2 : ( xRedMask == 0xFF00 ? 1 : 0 ) )
LVAL	754:12	754:12	12	red_shift
FIELD	754:12	754:12	13	red_shift
LEAF_NODE	754:12	754:12	14	red_shift
ASSIGN_OP	754:22	754:22	12	=
LEAF_NODE	754:22	754:22	13	=
RVAL	754:24	754:24	12	pixel_map [ 0 ] = xRedMask == 0xFF000000 ? 3 : ( xRedMask == 0xFF0000 ? 2 : ( xRedMask == 0xFF00 ? 1 : 0 ) )
ASSIGN	754:24	754:39	13	pixel_map [ 0 ] = xRedMask == 0xFF000000 ? 3 : ( xRedMask == 0xFF0000 ? 2 : ( xRedMask == 0xFF00 ? 1 : 0 ) )
LVAL	754:24	754:24	14	pixel_map [ 0 ]
FIELD	754:24	754:35	15	pixel_map [ 0 ]
LEAF_NODE	754:24	754:24	16	pixel_map
LEAF_NODE	754:33	754:33	16	[
EXPR	754:34	754:34	16	0
FIELD	754:34	754:34	17	0
LEAF_NODE	754:34	754:34	18	0
LEAF_NODE	754:35	754:35	16	]
ASSIGN_OP	754:37	754:37	14	=
LEAF_NODE	754:37	754:37	15	=
RVAL	754:39	754:39	14	xRedMask == 0xFF000000 ? 3 : ( xRedMask == 0xFF0000 ? 2 : ( xRedMask == 0xFF00 ? 1 : 0 ) )
COND_EXPR	754:39	755:74	15	xRedMask == 0xFF000000 ? 3 : ( xRedMask == 0xFF0000 ? 2 : ( xRedMask == 0xFF00 ? 1 : 0 ) )
CONDITION	754:39	754:51	16	xRedMask == 0xFF000000
FIELD	754:39	754:39	17	xRedMask
LEAF_NODE	754:39	754:39	18	xRedMask
EQ_OPERATOR	754:48	754:48	17	==
LEAF_NODE	754:48	754:48	18	==
FIELD	754:51	754:51	17	0xFF000000
LEAF_NODE	754:51	754:51	18	0xFF000000
LEAF_NODE	754:62	754:62	16	?
EXPR	754:64	754:64	16	3
FIELD	754:64	754:64	17	3
LEAF_NODE	754:64	754:64	18	3
LEAF_NODE	755:16	755:16	16	:
LEAF_NODE	755:18	755:18	16	(
COND_EXPR	755:19	755:73	16	xRedMask == 0xFF0000 ? 2 : ( xRedMask == 0xFF00 ? 1 : 0 )
CONDITION	755:19	755:31	17	xRedMask == 0xFF0000
FIELD	755:19	755:19	18	xRedMask
LEAF_NODE	755:19	755:19	19	xRedMask
EQ_OPERATOR	755:28	755:28	18	==
LEAF_NODE	755:28	755:28	19	==
FIELD	755:31	755:31	18	0xFF0000
LEAF_NODE	755:31	755:31	19	0xFF0000
LEAF_NODE	755:40	755:40	17	?
EXPR	755:42	755:42	17	2
FIELD	755:42	755:42	18	2
LEAF_NODE	755:42	755:42	19	2
LEAF_NODE	755:44	755:44	17	:
LEAF_NODE	755:46	755:46	17	(
COND_EXPR	755:47	755:72	17	xRedMask == 0xFF00 ? 1 : 0
CONDITION	755:47	755:59	18	xRedMask == 0xFF00
FIELD	755:47	755:47	19	xRedMask
LEAF_NODE	755:47	755:47	20	xRedMask
EQ_OPERATOR	755:56	755:56	19	==
LEAF_NODE	755:56	755:56	20	==
FIELD	755:59	755:59	19	0xFF00
LEAF_NODE	755:59	755:59	20	0xFF00
LEAF_NODE	755:66	755:66	18	?
EXPR	755:68	755:68	18	1
FIELD	755:68	755:68	19	1
LEAF_NODE	755:68	755:68	20	1
LEAF_NODE	755:70	755:70	18	:
FIELD	755:72	755:72	18	0
LEAF_NODE	755:72	755:72	19	0
LEAF_NODE	755:73	755:73	17	)
LEAF_NODE	755:74	755:74	16	)
LEAF_NODE	755:75	755:75	10	;
EXPR_STATEMENT	756:12	757:79	9	green_shift = pixel_map [ 1 ] = xGreenMask == 0xFF000000 ? 3 : ( xGreenMask == 0xFF0000 ? 2 : ( xGreenMask == 0xFF00 ? 1 : 0 ) ) ;
EXPR	756:12	756:12	10	green_shift = pixel_map [ 1 ] = xGreenMask == 0xFF000000 ? 3 : ( xGreenMask == 0xFF0000 ? 2 : ( xGreenMask == 0xFF00 ? 1 : 0 ) )
ASSIGN	756:12	756:26	11	green_shift = pixel_map [ 1 ] = xGreenMask == 0xFF000000 ? 3 : ( xGreenMask == 0xFF0000 ? 2 : ( xGreenMask == 0xFF00 ? 1 : 0 ) )
LVAL	756:12	756:12	12	green_shift
FIELD	756:12	756:12	13	green_shift
LEAF_NODE	756:12	756:12	14	green_shift
ASSIGN_OP	756:24	756:24	12	=
LEAF_NODE	756:24	756:24	13	=
RVAL	756:26	756:26	12	pixel_map [ 1 ] = xGreenMask == 0xFF000000 ? 3 : ( xGreenMask == 0xFF0000 ? 2 : ( xGreenMask == 0xFF00 ? 1 : 0 ) )
ASSIGN	756:26	756:41	13	pixel_map [ 1 ] = xGreenMask == 0xFF000000 ? 3 : ( xGreenMask == 0xFF0000 ? 2 : ( xGreenMask == 0xFF00 ? 1 : 0 ) )
LVAL	756:26	756:26	14	pixel_map [ 1 ]
FIELD	756:26	756:37	15	pixel_map [ 1 ]
LEAF_NODE	756:26	756:26	16	pixel_map
LEAF_NODE	756:35	756:35	16	[
EXPR	756:36	756:36	16	1
FIELD	756:36	756:36	17	1
LEAF_NODE	756:36	756:36	18	1
LEAF_NODE	756:37	756:37	16	]
ASSIGN_OP	756:39	756:39	14	=
LEAF_NODE	756:39	756:39	15	=
RVAL	756:41	756:41	14	xGreenMask == 0xFF000000 ? 3 : ( xGreenMask == 0xFF0000 ? 2 : ( xGreenMask == 0xFF00 ? 1 : 0 ) )
COND_EXPR	756:41	757:78	15	xGreenMask == 0xFF000000 ? 3 : ( xGreenMask == 0xFF0000 ? 2 : ( xGreenMask == 0xFF00 ? 1 : 0 ) )
CONDITION	756:41	756:55	16	xGreenMask == 0xFF000000
FIELD	756:41	756:41	17	xGreenMask
LEAF_NODE	756:41	756:41	18	xGreenMask
EQ_OPERATOR	756:52	756:52	17	==
LEAF_NODE	756:52	756:52	18	==
FIELD	756:55	756:55	17	0xFF000000
LEAF_NODE	756:55	756:55	18	0xFF000000
LEAF_NODE	756:66	756:66	16	?
EXPR	756:68	756:68	16	3
FIELD	756:68	756:68	17	3
LEAF_NODE	756:68	756:68	18	3
LEAF_NODE	757:16	757:16	16	:
LEAF_NODE	757:18	757:18	16	(
COND_EXPR	757:19	757:77	16	xGreenMask == 0xFF0000 ? 2 : ( xGreenMask == 0xFF00 ? 1 : 0 )
CONDITION	757:19	757:33	17	xGreenMask == 0xFF0000
FIELD	757:19	757:19	18	xGreenMask
LEAF_NODE	757:19	757:19	19	xGreenMask
EQ_OPERATOR	757:30	757:30	18	==
LEAF_NODE	757:30	757:30	19	==
FIELD	757:33	757:33	18	0xFF0000
LEAF_NODE	757:33	757:33	19	0xFF0000
LEAF_NODE	757:42	757:42	17	?
EXPR	757:44	757:44	17	2
FIELD	757:44	757:44	18	2
LEAF_NODE	757:44	757:44	19	2
LEAF_NODE	757:46	757:46	17	:
LEAF_NODE	757:48	757:48	17	(
COND_EXPR	757:49	757:76	17	xGreenMask == 0xFF00 ? 1 : 0
CONDITION	757:49	757:63	18	xGreenMask == 0xFF00
FIELD	757:49	757:49	19	xGreenMask
LEAF_NODE	757:49	757:49	20	xGreenMask
EQ_OPERATOR	757:60	757:60	19	==
LEAF_NODE	757:60	757:60	20	==
FIELD	757:63	757:63	19	0xFF00
LEAF_NODE	757:63	757:63	20	0xFF00
LEAF_NODE	757:70	757:70	18	?
EXPR	757:72	757:72	18	1
FIELD	757:72	757:72	19	1
LEAF_NODE	757:72	757:72	20	1
LEAF_NODE	757:74	757:74	18	:
FIELD	757:76	757:76	18	0
LEAF_NODE	757:76	757:76	19	0
LEAF_NODE	757:77	757:77	17	)
LEAF_NODE	757:78	757:78	16	)
LEAF_NODE	757:79	757:79	10	;
EXPR_STATEMENT	758:12	759:77	9	blue_shift = pixel_map [ 2 ] = xBlueMask == 0xFF000000 ? 3 : ( xBlueMask == 0xFF0000 ? 2 : ( xBlueMask == 0xFF00 ? 1 : 0 ) ) ;
EXPR	758:12	758:12	10	blue_shift = pixel_map [ 2 ] = xBlueMask == 0xFF000000 ? 3 : ( xBlueMask == 0xFF0000 ? 2 : ( xBlueMask == 0xFF00 ? 1 : 0 ) )
ASSIGN	758:12	758:25	11	blue_shift = pixel_map [ 2 ] = xBlueMask == 0xFF000000 ? 3 : ( xBlueMask == 0xFF0000 ? 2 : ( xBlueMask == 0xFF00 ? 1 : 0 ) )
LVAL	758:12	758:12	12	blue_shift
FIELD	758:12	758:12	13	blue_shift
LEAF_NODE	758:12	758:12	14	blue_shift
ASSIGN_OP	758:23	758:23	12	=
LEAF_NODE	758:23	758:23	13	=
RVAL	758:25	758:25	12	pixel_map [ 2 ] = xBlueMask == 0xFF000000 ? 3 : ( xBlueMask == 0xFF0000 ? 2 : ( xBlueMask == 0xFF00 ? 1 : 0 ) )
ASSIGN	758:25	758:40	13	pixel_map [ 2 ] = xBlueMask == 0xFF000000 ? 3 : ( xBlueMask == 0xFF0000 ? 2 : ( xBlueMask == 0xFF00 ? 1 : 0 ) )
LVAL	758:25	758:25	14	pixel_map [ 2 ]
FIELD	758:25	758:36	15	pixel_map [ 2 ]
LEAF_NODE	758:25	758:25	16	pixel_map
LEAF_NODE	758:34	758:34	16	[
EXPR	758:35	758:35	16	2
FIELD	758:35	758:35	17	2
LEAF_NODE	758:35	758:35	18	2
LEAF_NODE	758:36	758:36	16	]
ASSIGN_OP	758:38	758:38	14	=
LEAF_NODE	758:38	758:38	15	=
RVAL	758:40	758:40	14	xBlueMask == 0xFF000000 ? 3 : ( xBlueMask == 0xFF0000 ? 2 : ( xBlueMask == 0xFF00 ? 1 : 0 ) )
COND_EXPR	758:40	759:76	15	xBlueMask == 0xFF000000 ? 3 : ( xBlueMask == 0xFF0000 ? 2 : ( xBlueMask == 0xFF00 ? 1 : 0 ) )
CONDITION	758:40	758:53	16	xBlueMask == 0xFF000000
FIELD	758:40	758:40	17	xBlueMask
LEAF_NODE	758:40	758:40	18	xBlueMask
EQ_OPERATOR	758:50	758:50	17	==
LEAF_NODE	758:50	758:50	18	==
FIELD	758:53	758:53	17	0xFF000000
LEAF_NODE	758:53	758:53	18	0xFF000000
LEAF_NODE	758:64	758:64	16	?
EXPR	758:66	758:66	16	3
FIELD	758:66	758:66	17	3
LEAF_NODE	758:66	758:66	18	3
LEAF_NODE	759:16	759:16	16	:
LEAF_NODE	759:18	759:18	16	(
COND_EXPR	759:19	759:75	16	xBlueMask == 0xFF0000 ? 2 : ( xBlueMask == 0xFF00 ? 1 : 0 )
CONDITION	759:19	759:32	17	xBlueMask == 0xFF0000
FIELD	759:19	759:19	18	xBlueMask
LEAF_NODE	759:19	759:19	19	xBlueMask
EQ_OPERATOR	759:29	759:29	18	==
LEAF_NODE	759:29	759:29	19	==
FIELD	759:32	759:32	18	0xFF0000
LEAF_NODE	759:32	759:32	19	0xFF0000
LEAF_NODE	759:41	759:41	17	?
EXPR	759:43	759:43	17	2
FIELD	759:43	759:43	18	2
LEAF_NODE	759:43	759:43	19	2
LEAF_NODE	759:45	759:45	17	:
LEAF_NODE	759:47	759:47	17	(
COND_EXPR	759:48	759:74	17	xBlueMask == 0xFF00 ? 1 : 0
CONDITION	759:48	759:61	18	xBlueMask == 0xFF00
FIELD	759:48	759:48	19	xBlueMask
LEAF_NODE	759:48	759:48	20	xBlueMask
EQ_OPERATOR	759:58	759:58	19	==
LEAF_NODE	759:58	759:58	20	==
FIELD	759:61	759:61	19	0xFF00
LEAF_NODE	759:61	759:61	20	0xFF00
LEAF_NODE	759:68	759:68	18	?
EXPR	759:70	759:70	18	1
FIELD	759:70	759:70	19	1
LEAF_NODE	759:70	759:70	20	1
LEAF_NODE	759:72	759:72	18	:
FIELD	759:74	759:74	18	0
LEAF_NODE	759:74	759:74	19	0
LEAF_NODE	759:75	759:75	17	)
LEAF_NODE	759:76	759:76	16	)
LEAF_NODE	759:77	759:77	10	;
LEAF_NODE	760:8	760:8	8	}
SELECTION	760:10	760:15	6	
KEYWORD	760:10	760:10	7	else
LEAF_NODE	760:10	760:10	8	else
STATEMENTS	760:15	767:8	7	
LEAF_NODE	760:15	760:15	8	{
STATEMENTS	761:12	765:12	8	
EXPR_STATEMENT	761:12	762:75	9	red_shift = pixel_map [ 0 ] = xRedMask == 0xFF000000 ? 0 : ( xRedMask == 0xFF0000 ? 1 : ( xRedMask == 0xFF00 ? 2 : 3 ) ) ;
EXPR	761:12	761:12	10	red_shift = pixel_map [ 0 ] = xRedMask == 0xFF000000 ? 0 : ( xRedMask == 0xFF0000 ? 1 : ( xRedMask == 0xFF00 ? 2 : 3 ) )
ASSIGN	761:12	761:24	11	red_shift = pixel_map [ 0 ] = xRedMask == 0xFF000000 ? 0 : ( xRedMask == 0xFF0000 ? 1 : ( xRedMask == 0xFF00 ? 2 : 3 ) )
LVAL	761:12	761:12	12	red_shift
FIELD	761:12	761:12	13	red_shift
LEAF_NODE	761:12	761:12	14	red_shift
ASSIGN_OP	761:22	761:22	12	=
LEAF_NODE	761:22	761:22	13	=
RVAL	761:24	761:24	12	pixel_map [ 0 ] = xRedMask == 0xFF000000 ? 0 : ( xRedMask == 0xFF0000 ? 1 : ( xRedMask == 0xFF00 ? 2 : 3 ) )
ASSIGN	761:24	761:39	13	pixel_map [ 0 ] = xRedMask == 0xFF000000 ? 0 : ( xRedMask == 0xFF0000 ? 1 : ( xRedMask == 0xFF00 ? 2 : 3 ) )
LVAL	761:24	761:24	14	pixel_map [ 0 ]
FIELD	761:24	761:35	15	pixel_map [ 0 ]
LEAF_NODE	761:24	761:24	16	pixel_map
LEAF_NODE	761:33	761:33	16	[
EXPR	761:34	761:34	16	0
FIELD	761:34	761:34	17	0
LEAF_NODE	761:34	761:34	18	0
LEAF_NODE	761:35	761:35	16	]
ASSIGN_OP	761:37	761:37	14	=
LEAF_NODE	761:37	761:37	15	=
RVAL	761:39	761:39	14	xRedMask == 0xFF000000 ? 0 : ( xRedMask == 0xFF0000 ? 1 : ( xRedMask == 0xFF00 ? 2 : 3 ) )
COND_EXPR	761:39	762:74	15	xRedMask == 0xFF000000 ? 0 : ( xRedMask == 0xFF0000 ? 1 : ( xRedMask == 0xFF00 ? 2 : 3 ) )
CONDITION	761:39	761:51	16	xRedMask == 0xFF000000
FIELD	761:39	761:39	17	xRedMask
LEAF_NODE	761:39	761:39	18	xRedMask
EQ_OPERATOR	761:48	761:48	17	==
LEAF_NODE	761:48	761:48	18	==
FIELD	761:51	761:51	17	0xFF000000
LEAF_NODE	761:51	761:51	18	0xFF000000
LEAF_NODE	761:62	761:62	16	?
EXPR	761:64	761:64	16	0
FIELD	761:64	761:64	17	0
LEAF_NODE	761:64	761:64	18	0
LEAF_NODE	762:16	762:16	16	:
LEAF_NODE	762:18	762:18	16	(
COND_EXPR	762:19	762:73	16	xRedMask == 0xFF0000 ? 1 : ( xRedMask == 0xFF00 ? 2 : 3 )
CONDITION	762:19	762:31	17	xRedMask == 0xFF0000
FIELD	762:19	762:19	18	xRedMask
LEAF_NODE	762:19	762:19	19	xRedMask
EQ_OPERATOR	762:28	762:28	18	==
LEAF_NODE	762:28	762:28	19	==
FIELD	762:31	762:31	18	0xFF0000
LEAF_NODE	762:31	762:31	19	0xFF0000
LEAF_NODE	762:40	762:40	17	?
EXPR	762:42	762:42	17	1
FIELD	762:42	762:42	18	1
LEAF_NODE	762:42	762:42	19	1
LEAF_NODE	762:44	762:44	17	:
LEAF_NODE	762:46	762:46	17	(
COND_EXPR	762:47	762:72	17	xRedMask == 0xFF00 ? 2 : 3
CONDITION	762:47	762:59	18	xRedMask == 0xFF00
FIELD	762:47	762:47	19	xRedMask
LEAF_NODE	762:47	762:47	20	xRedMask
EQ_OPERATOR	762:56	762:56	19	==
LEAF_NODE	762:56	762:56	20	==
FIELD	762:59	762:59	19	0xFF00
LEAF_NODE	762:59	762:59	20	0xFF00
LEAF_NODE	762:66	762:66	18	?
EXPR	762:68	762:68	18	2
FIELD	762:68	762:68	19	2
LEAF_NODE	762:68	762:68	20	2
LEAF_NODE	762:70	762:70	18	:
FIELD	762:72	762:72	18	3
LEAF_NODE	762:72	762:72	19	3
LEAF_NODE	762:73	762:73	17	)
LEAF_NODE	762:74	762:74	16	)
LEAF_NODE	762:75	762:75	10	;
EXPR_STATEMENT	763:12	764:79	9	green_shift = pixel_map [ 0 ] = xGreenMask == 0xFF000000 ? 0 : ( xGreenMask == 0xFF0000 ? 1 : ( xGreenMask == 0xFF00 ? 2 : 3 ) ) ;
EXPR	763:12	763:12	10	green_shift = pixel_map [ 0 ] = xGreenMask == 0xFF000000 ? 0 : ( xGreenMask == 0xFF0000 ? 1 : ( xGreenMask == 0xFF00 ? 2 : 3 ) )
ASSIGN	763:12	763:26	11	green_shift = pixel_map [ 0 ] = xGreenMask == 0xFF000000 ? 0 : ( xGreenMask == 0xFF0000 ? 1 : ( xGreenMask == 0xFF00 ? 2 : 3 ) )
LVAL	763:12	763:12	12	green_shift
FIELD	763:12	763:12	13	green_shift
LEAF_NODE	763:12	763:12	14	green_shift
ASSIGN_OP	763:24	763:24	12	=
LEAF_NODE	763:24	763:24	13	=
RVAL	763:26	763:26	12	pixel_map [ 0 ] = xGreenMask == 0xFF000000 ? 0 : ( xGreenMask == 0xFF0000 ? 1 : ( xGreenMask == 0xFF00 ? 2 : 3 ) )
ASSIGN	763:26	763:41	13	pixel_map [ 0 ] = xGreenMask == 0xFF000000 ? 0 : ( xGreenMask == 0xFF0000 ? 1 : ( xGreenMask == 0xFF00 ? 2 : 3 ) )
LVAL	763:26	763:26	14	pixel_map [ 0 ]
FIELD	763:26	763:37	15	pixel_map [ 0 ]
LEAF_NODE	763:26	763:26	16	pixel_map
LEAF_NODE	763:35	763:35	16	[
EXPR	763:36	763:36	16	0
FIELD	763:36	763:36	17	0
LEAF_NODE	763:36	763:36	18	0
LEAF_NODE	763:37	763:37	16	]
ASSIGN_OP	763:39	763:39	14	=
LEAF_NODE	763:39	763:39	15	=
RVAL	763:41	763:41	14	xGreenMask == 0xFF000000 ? 0 : ( xGreenMask == 0xFF0000 ? 1 : ( xGreenMask == 0xFF00 ? 2 : 3 ) )
COND_EXPR	763:41	764:78	15	xGreenMask == 0xFF000000 ? 0 : ( xGreenMask == 0xFF0000 ? 1 : ( xGreenMask == 0xFF00 ? 2 : 3 ) )
CONDITION	763:41	763:55	16	xGreenMask == 0xFF000000
FIELD	763:41	763:41	17	xGreenMask
LEAF_NODE	763:41	763:41	18	xGreenMask
EQ_OPERATOR	763:52	763:52	17	==
LEAF_NODE	763:52	763:52	18	==
FIELD	763:55	763:55	17	0xFF000000
LEAF_NODE	763:55	763:55	18	0xFF000000
LEAF_NODE	763:66	763:66	16	?
EXPR	763:68	763:68	16	0
FIELD	763:68	763:68	17	0
LEAF_NODE	763:68	763:68	18	0
LEAF_NODE	764:16	764:16	16	:
LEAF_NODE	764:18	764:18	16	(
COND_EXPR	764:19	764:77	16	xGreenMask == 0xFF0000 ? 1 : ( xGreenMask == 0xFF00 ? 2 : 3 )
CONDITION	764:19	764:33	17	xGreenMask == 0xFF0000
FIELD	764:19	764:19	18	xGreenMask
LEAF_NODE	764:19	764:19	19	xGreenMask
EQ_OPERATOR	764:30	764:30	18	==
LEAF_NODE	764:30	764:30	19	==
FIELD	764:33	764:33	18	0xFF0000
LEAF_NODE	764:33	764:33	19	0xFF0000
LEAF_NODE	764:42	764:42	17	?
EXPR	764:44	764:44	17	1
FIELD	764:44	764:44	18	1
LEAF_NODE	764:44	764:44	19	1
LEAF_NODE	764:46	764:46	17	:
LEAF_NODE	764:48	764:48	17	(
COND_EXPR	764:49	764:76	17	xGreenMask == 0xFF00 ? 2 : 3
CONDITION	764:49	764:63	18	xGreenMask == 0xFF00
FIELD	764:49	764:49	19	xGreenMask
LEAF_NODE	764:49	764:49	20	xGreenMask
EQ_OPERATOR	764:60	764:60	19	==
LEAF_NODE	764:60	764:60	20	==
FIELD	764:63	764:63	19	0xFF00
LEAF_NODE	764:63	764:63	20	0xFF00
LEAF_NODE	764:70	764:70	18	?
EXPR	764:72	764:72	18	2
FIELD	764:72	764:72	19	2
LEAF_NODE	764:72	764:72	20	2
LEAF_NODE	764:74	764:74	18	:
FIELD	764:76	764:76	18	3
LEAF_NODE	764:76	764:76	19	3
LEAF_NODE	764:77	764:77	17	)
LEAF_NODE	764:78	764:78	16	)
LEAF_NODE	764:79	764:79	10	;
EXPR_STATEMENT	765:12	766:77	9	blue_shift = pixel_map [ 0 ] = xBlueMask == 0xFF000000 ? 0 : ( xBlueMask == 0xFF0000 ? 1 : ( xBlueMask == 0xFF00 ? 2 : 3 ) ) ;
EXPR	765:12	765:12	10	blue_shift = pixel_map [ 0 ] = xBlueMask == 0xFF000000 ? 0 : ( xBlueMask == 0xFF0000 ? 1 : ( xBlueMask == 0xFF00 ? 2 : 3 ) )
ASSIGN	765:12	765:25	11	blue_shift = pixel_map [ 0 ] = xBlueMask == 0xFF000000 ? 0 : ( xBlueMask == 0xFF0000 ? 1 : ( xBlueMask == 0xFF00 ? 2 : 3 ) )
LVAL	765:12	765:12	12	blue_shift
FIELD	765:12	765:12	13	blue_shift
LEAF_NODE	765:12	765:12	14	blue_shift
ASSIGN_OP	765:23	765:23	12	=
LEAF_NODE	765:23	765:23	13	=
RVAL	765:25	765:25	12	pixel_map [ 0 ] = xBlueMask == 0xFF000000 ? 0 : ( xBlueMask == 0xFF0000 ? 1 : ( xBlueMask == 0xFF00 ? 2 : 3 ) )
ASSIGN	765:25	765:40	13	pixel_map [ 0 ] = xBlueMask == 0xFF000000 ? 0 : ( xBlueMask == 0xFF0000 ? 1 : ( xBlueMask == 0xFF00 ? 2 : 3 ) )
LVAL	765:25	765:25	14	pixel_map [ 0 ]
FIELD	765:25	765:36	15	pixel_map [ 0 ]
LEAF_NODE	765:25	765:25	16	pixel_map
LEAF_NODE	765:34	765:34	16	[
EXPR	765:35	765:35	16	0
FIELD	765:35	765:35	17	0
LEAF_NODE	765:35	765:35	18	0
LEAF_NODE	765:36	765:36	16	]
ASSIGN_OP	765:38	765:38	14	=
LEAF_NODE	765:38	765:38	15	=
RVAL	765:40	765:40	14	xBlueMask == 0xFF000000 ? 0 : ( xBlueMask == 0xFF0000 ? 1 : ( xBlueMask == 0xFF00 ? 2 : 3 ) )
COND_EXPR	765:40	766:76	15	xBlueMask == 0xFF000000 ? 0 : ( xBlueMask == 0xFF0000 ? 1 : ( xBlueMask == 0xFF00 ? 2 : 3 ) )
CONDITION	765:40	765:53	16	xBlueMask == 0xFF000000
FIELD	765:40	765:40	17	xBlueMask
LEAF_NODE	765:40	765:40	18	xBlueMask
EQ_OPERATOR	765:50	765:50	17	==
LEAF_NODE	765:50	765:50	18	==
FIELD	765:53	765:53	17	0xFF000000
LEAF_NODE	765:53	765:53	18	0xFF000000
LEAF_NODE	765:64	765:64	16	?
EXPR	765:66	765:66	16	0
FIELD	765:66	765:66	17	0
LEAF_NODE	765:66	765:66	18	0
LEAF_NODE	766:16	766:16	16	:
LEAF_NODE	766:18	766:18	16	(
COND_EXPR	766:19	766:75	16	xBlueMask == 0xFF0000 ? 1 : ( xBlueMask == 0xFF00 ? 2 : 3 )
CONDITION	766:19	766:32	17	xBlueMask == 0xFF0000
FIELD	766:19	766:19	18	xBlueMask
LEAF_NODE	766:19	766:19	19	xBlueMask
EQ_OPERATOR	766:29	766:29	18	==
LEAF_NODE	766:29	766:29	19	==
FIELD	766:32	766:32	18	0xFF0000
LEAF_NODE	766:32	766:32	19	0xFF0000
LEAF_NODE	766:41	766:41	17	?
EXPR	766:43	766:43	17	1
FIELD	766:43	766:43	18	1
LEAF_NODE	766:43	766:43	19	1
LEAF_NODE	766:45	766:45	17	:
LEAF_NODE	766:47	766:47	17	(
COND_EXPR	766:48	766:74	17	xBlueMask == 0xFF00 ? 2 : 3
CONDITION	766:48	766:61	18	xBlueMask == 0xFF00
FIELD	766:48	766:48	19	xBlueMask
LEAF_NODE	766:48	766:48	20	xBlueMask
EQ_OPERATOR	766:58	766:58	19	==
LEAF_NODE	766:58	766:58	20	==
FIELD	766:61	766:61	19	0xFF00
LEAF_NODE	766:61	766:61	20	0xFF00
LEAF_NODE	766:68	766:68	18	?
EXPR	766:70	766:70	18	2
FIELD	766:70	766:70	19	2
LEAF_NODE	766:70	766:70	20	2
LEAF_NODE	766:72	766:72	18	:
FIELD	766:74	766:74	18	3
LEAF_NODE	766:74	766:74	19	3
LEAF_NODE	766:75	766:75	17	)
LEAF_NODE	766:76	766:76	16	)
LEAF_NODE	766:77	766:77	10	;
LEAF_NODE	767:8	767:8	8	}
SELECTION	769:8	769:58	6	
KEYWORD	769:8	769:8	7	if
LEAF_NODE	769:8	769:8	8	if
LEAF_NODE	769:11	769:11	7	(
CONDITION	769:12	769:12	7	tfPlanarConfiguration == PLANARCONFIG_CONTIG
EXPR	769:12	769:37	8	tfPlanarConfiguration == PLANARCONFIG_CONTIG
FIELD	769:12	769:12	9	tfPlanarConfiguration
LEAF_NODE	769:12	769:12	10	tfPlanarConfiguration
EQ_OPERATOR	769:34	769:34	9	==
LEAF_NODE	769:34	769:34	10	==
FIELD	769:37	769:37	9	PLANARCONFIG_CONTIG
LEAF_NODE	769:37	769:37	10	PLANARCONFIG_CONTIG
LEAF_NODE	769:56	769:56	7	)
STATEMENTS	769:58	782:8	7	
LEAF_NODE	769:58	769:58	8	{
STATEMENTS	770:12	770:12	8	
ITERATION	770:12	770:48	9	
KEYWORD	770:12	770:12	10	for
LEAF_NODE	770:12	770:12	11	for
LEAF_NODE	770:16	770:16	10	(
FOR_INIT	770:17	770:22	10	i = 0 ;
EXPR	770:17	770:17	11	i = 0
ASSIGN	770:17	770:21	12	i = 0
LVAL	770:17	770:17	13	i
FIELD	770:17	770:17	14	i
LEAF_NODE	770:17	770:17	15	i
ASSIGN_OP	770:19	770:19	13	=
LEAF_NODE	770:19	770:19	14	=
RVAL	770:21	770:21	13	0
FIELD	770:21	770:21	14	0
LEAF_NODE	770:21	770:21	15	0
LEAF_NODE	770:22	770:22	11	;
CONDITION	770:24	770:24	10	i < tfImageHeight
EXPR	770:24	770:28	11	i < tfImageHeight
FIELD	770:24	770:24	12	i
LEAF_NODE	770:24	770:24	13	i
REL_OPERATOR	770:26	770:26	12	<
LEAF_NODE	770:26	770:26	13	<
FIELD	770:28	770:28	12	tfImageHeight
LEAF_NODE	770:28	770:28	13	tfImageHeight
LEAF_NODE	770:41	770:41	10	;
FOR_EXPR	770:43	770:43	10	i ++
EXPR	770:43	770:43	11	i ++
FIELD	770:43	770:44	12	i ++
LEAF_NODE	770:43	770:43	13	i
LEAF_NODE	770:44	770:44	13	++
LEAF_NODE	770:46	770:46	10	)
STATEMENTS	770:48	781:12	10	
LEAF_NODE	770:48	770:48	11	{
STATEMENTS	771:16	773:16	11	
SELECTION	771:16	772:20	12	
KEYWORD	771:16	771:16	13	if
LEAF_NODE	771:16	771:16	14	if
LEAF_NODE	771:19	771:19	13	(
CONDITION	771:20	771:20	13	TIFFReadScanline ( tfFile , scan_line , i , 0 ) < 0
EXPR	771:20	771:64	14	TIFFReadScanline ( tfFile , scan_line , i , 0 ) < 0
FUNCTION_CALL	771:20	771:60	15	TIFFReadScanline ( tfFile , scan_line , i , 0 )
CALLEE	771:20	771:20	16	TIFFReadScanline
LEAF_NODE	771:20	771:20	17	TIFFReadScanline
LEAF_NODE	771:36	771:36	16	(
ARGUMENT	771:37	771:37	16	tfFile
FIELD	771:37	771:37	17	tfFile
LEAF_NODE	771:37	771:37	18	tfFile
LEAF_NODE	771:43	771:43	16	,
ARGUMENT	771:45	771:45	16	scan_line
FIELD	771:45	771:45	17	scan_line
LEAF_NODE	771:45	771:45	18	scan_line
LEAF_NODE	771:54	771:54	16	,
ARGUMENT	771:56	771:56	16	i
FIELD	771:56	771:56	17	i
LEAF_NODE	771:56	771:56	18	i
LEAF_NODE	771:57	771:57	16	,
ARGUMENT	771:59	771:59	16	0
FIELD	771:59	771:59	17	0
LEAF_NODE	771:59	771:59	18	0
LEAF_NODE	771:60	771:60	16	)
REL_OPERATOR	771:62	771:62	15	<
LEAF_NODE	771:62	771:62	16	<
FIELD	771:64	771:64	15	0
LEAF_NODE	771:64	771:64	16	0
LEAF_NODE	771:65	771:65	13	)
STATEMENTS	772:20	772:20	13	
JUMP_STATEMENT	772:20	772:25	14	break DESTINATION ;
KEYWORD	772:20	772:20	15	break
LEAF_NODE	772:20	772:20	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	772:25	772:25	15	;
ITERATION	773:16	773:72	12	
KEYWORD	773:16	773:16	13	for
LEAF_NODE	773:16	773:16	14	for
LEAF_NODE	773:20	773:20	13	(
FOR_INIT	773:21	773:47	13	input_p = scan_line , j = 0 ;
EXPR	773:21	773:42	14	input_p = scan_line , j = 0
ASSIGN	773:21	773:31	15	input_p = scan_line
LVAL	773:21	773:21	16	input_p
FIELD	773:21	773:21	17	input_p
LEAF_NODE	773:21	773:21	18	input_p
ASSIGN_OP	773:29	773:29	16	=
LEAF_NODE	773:29	773:29	17	=
RVAL	773:31	773:31	16	scan_line
FIELD	773:31	773:31	17	scan_line
LEAF_NODE	773:31	773:31	18	scan_line
LEAF_NODE	773:40	773:40	15	,
ASSIGN	773:42	773:46	15	j = 0
LVAL	773:42	773:42	16	j
FIELD	773:42	773:42	17	j
LEAF_NODE	773:42	773:42	18	j
ASSIGN_OP	773:44	773:44	16	=
LEAF_NODE	773:44	773:44	17	=
RVAL	773:46	773:46	16	0
FIELD	773:46	773:46	17	0
LEAF_NODE	773:46	773:46	18	0
LEAF_NODE	773:47	773:47	14	;
CONDITION	773:49	773:49	13	j < tfImageWidth
EXPR	773:49	773:53	14	j < tfImageWidth
FIELD	773:49	773:49	15	j
LEAF_NODE	773:49	773:49	16	j
REL_OPERATOR	773:51	773:51	15	<
LEAF_NODE	773:51	773:51	16	<
FIELD	773:53	773:53	15	tfImageWidth
LEAF_NODE	773:53	773:53	16	tfImageWidth
LEAF_NODE	773:65	773:65	13	;
FOR_EXPR	773:67	773:67	13	j ++
EXPR	773:67	773:67	14	j ++
FIELD	773:67	773:68	15	j ++
LEAF_NODE	773:67	773:67	16	j
LEAF_NODE	773:68	773:68	16	++
LEAF_NODE	773:70	773:70	13	)
STATEMENTS	773:72	780:16	13	
LEAF_NODE	773:72	773:72	14	{
STATEMENTS	774:20	778:20	14	
EXPR_STATEMENT	774:20	774:56	15	* ( output_p + red_shift ) = * input_p ++ ;
EXPR	774:20	774:20	16	* ( output_p + red_shift ) = * input_p ++
ASSIGN	774:20	774:46	17	* ( output_p + red_shift ) = * input_p ++
LVAL	774:20	774:20	18	* ( output_p + red_shift )
UNARY_EXPR	774:20	774:42	19	* ( output_p + red_shift )
UNARY_OPERATOR	774:20	774:20	20	*
LEAF_NODE	774:20	774:20	21	*
LEAF_NODE	774:21	774:21	20	(
FIELD	774:22	774:22	20	output_p
LEAF_NODE	774:22	774:22	21	output_p
LEAF_NODE	774:31	774:31	20	+
FIELD	774:33	774:33	20	red_shift
LEAF_NODE	774:33	774:33	21	red_shift
LEAF_NODE	774:42	774:42	20	)
ASSIGN_OP	774:44	774:44	18	=
LEAF_NODE	774:44	774:44	19	=
RVAL	774:46	774:46	18	* input_p ++
UNARY_EXPR	774:46	774:47	19	* input_p ++
UNARY_OPERATOR	774:46	774:46	20	*
LEAF_NODE	774:46	774:46	21	*
FIELD	774:47	774:54	20	input_p ++
LEAF_NODE	774:47	774:47	21	input_p
LEAF_NODE	774:54	774:54	21	++
LEAF_NODE	774:56	774:56	16	;
EXPR_STATEMENT	775:20	775:58	15	* ( output_p + green_shift ) = * input_p ++ ;
EXPR	775:20	775:20	16	* ( output_p + green_shift ) = * input_p ++
ASSIGN	775:20	775:48	17	* ( output_p + green_shift ) = * input_p ++
LVAL	775:20	775:20	18	* ( output_p + green_shift )
UNARY_EXPR	775:20	775:44	19	* ( output_p + green_shift )
UNARY_OPERATOR	775:20	775:20	20	*
LEAF_NODE	775:20	775:20	21	*
LEAF_NODE	775:21	775:21	20	(
FIELD	775:22	775:22	20	output_p
LEAF_NODE	775:22	775:22	21	output_p
LEAF_NODE	775:31	775:31	20	+
FIELD	775:33	775:33	20	green_shift
LEAF_NODE	775:33	775:33	21	green_shift
LEAF_NODE	775:44	775:44	20	)
ASSIGN_OP	775:46	775:46	18	=
LEAF_NODE	775:46	775:46	19	=
RVAL	775:48	775:48	18	* input_p ++
UNARY_EXPR	775:48	775:49	19	* input_p ++
UNARY_OPERATOR	775:48	775:48	20	*
LEAF_NODE	775:48	775:48	21	*
FIELD	775:49	775:56	20	input_p ++
LEAF_NODE	775:49	775:49	21	input_p
LEAF_NODE	775:56	775:56	21	++
LEAF_NODE	775:58	775:58	16	;
EXPR_STATEMENT	776:20	776:57	15	* ( output_p + blue_shift ) = * input_p ++ ;
EXPR	776:20	776:20	16	* ( output_p + blue_shift ) = * input_p ++
ASSIGN	776:20	776:47	17	* ( output_p + blue_shift ) = * input_p ++
LVAL	776:20	776:20	18	* ( output_p + blue_shift )
UNARY_EXPR	776:20	776:43	19	* ( output_p + blue_shift )
UNARY_OPERATOR	776:20	776:20	20	*
LEAF_NODE	776:20	776:20	21	*
LEAF_NODE	776:21	776:21	20	(
FIELD	776:22	776:22	20	output_p
LEAF_NODE	776:22	776:22	21	output_p
LEAF_NODE	776:31	776:31	20	+
FIELD	776:33	776:33	20	blue_shift
LEAF_NODE	776:33	776:33	21	blue_shift
LEAF_NODE	776:43	776:43	20	)
ASSIGN_OP	776:45	776:45	18	=
LEAF_NODE	776:45	776:45	19	=
RVAL	776:47	776:47	18	* input_p ++
UNARY_EXPR	776:47	776:48	19	* input_p ++
UNARY_OPERATOR	776:47	776:47	20	*
LEAF_NODE	776:47	776:47	21	*
FIELD	776:48	776:55	20	input_p ++
LEAF_NODE	776:48	776:48	21	input_p
LEAF_NODE	776:55	776:55	21	++
LEAF_NODE	776:57	776:57	16	;
EXPR_STATEMENT	777:20	777:33	15	output_p += 4 ;
EXPR	777:20	777:20	16	output_p += 4
ASSIGN	777:20	777:32	17	output_p += 4
LVAL	777:20	777:20	18	output_p
FIELD	777:20	777:20	19	output_p
LEAF_NODE	777:20	777:20	20	output_p
ASSIGN_OP	777:29	777:29	18	+=
LEAF_NODE	777:29	777:29	19	+=
RVAL	777:32	777:32	18	4
FIELD	777:32	777:32	19	4
LEAF_NODE	777:32	777:32	20	4
LEAF_NODE	777:33	777:33	16	;
SELECTION	778:20	779:24	15	
KEYWORD	778:20	778:20	16	if
LEAF_NODE	778:20	778:20	17	if
LEAF_NODE	778:23	778:23	16	(
CONDITION	778:24	778:24	16	tfSamplesPerPixel == 4
EXPR	778:24	778:45	17	tfSamplesPerPixel == 4
FIELD	778:24	778:24	18	tfSamplesPerPixel
LEAF_NODE	778:24	778:24	19	tfSamplesPerPixel
EQ_OPERATOR	778:42	778:42	18	==
LEAF_NODE	778:42	778:42	19	==
FIELD	778:45	778:45	18	4
LEAF_NODE	778:45	778:45	19	4
LEAF_NODE	778:46	778:46	16	)
STATEMENTS	779:24	779:24	16	
EXPR_STATEMENT	779:24	779:33	17	input_p ++ ;
EXPR	779:24	779:24	18	input_p ++
FIELD	779:24	779:31	19	input_p ++
LEAF_NODE	779:24	779:24	20	input_p
LEAF_NODE	779:31	779:31	20	++
LEAF_NODE	779:33	779:33	18	;
LEAF_NODE	780:16	780:16	14	}
LEAF_NODE	781:12	781:12	11	}
LEAF_NODE	782:8	782:8	8	}
SELECTION	782:10	782:15	6	
KEYWORD	782:10	782:10	7	else
LEAF_NODE	782:10	782:10	8	else
STATEMENTS	782:15	795:8	7	
LEAF_NODE	782:15	782:15	8	{
STATEMENTS	783:12	783:12	8	
ITERATION	783:12	783:52	9	
KEYWORD	783:12	783:12	10	for
LEAF_NODE	783:12	783:12	11	for
LEAF_NODE	783:16	783:16	10	(
FOR_INIT	783:17	783:22	10	s = 0 ;
EXPR	783:17	783:17	11	s = 0
ASSIGN	783:17	783:21	12	s = 0
LVAL	783:17	783:17	13	s
FIELD	783:17	783:17	14	s
LEAF_NODE	783:17	783:17	15	s
ASSIGN_OP	783:19	783:19	13	=
LEAF_NODE	783:19	783:19	14	=
RVAL	783:21	783:21	13	0
FIELD	783:21	783:21	14	0
LEAF_NODE	783:21	783:21	15	0
LEAF_NODE	783:22	783:22	11	;
CONDITION	783:24	783:24	10	s < tfSamplesPerPixel
EXPR	783:24	783:28	11	s < tfSamplesPerPixel
FIELD	783:24	783:24	12	s
LEAF_NODE	783:24	783:24	13	s
REL_OPERATOR	783:26	783:26	12	<
LEAF_NODE	783:26	783:26	13	<
FIELD	783:28	783:28	12	tfSamplesPerPixel
LEAF_NODE	783:28	783:28	13	tfSamplesPerPixel
LEAF_NODE	783:45	783:45	10	;
FOR_EXPR	783:47	783:47	10	s ++
EXPR	783:47	783:47	11	s ++
FIELD	783:47	783:48	12	s ++
LEAF_NODE	783:47	783:47	13	s
LEAF_NODE	783:48	783:48	13	++
LEAF_NODE	783:50	783:50	10	)
STATEMENTS	783:52	794:12	10	
LEAF_NODE	783:52	783:52	11	{
STATEMENTS	784:16	786:16	11	
SELECTION	784:16	785:20	12	
KEYWORD	784:16	784:16	13	if
LEAF_NODE	784:16	784:16	14	if
LEAF_NODE	784:19	784:19	13	(
CONDITION	784:20	784:20	13	s == 3
EXPR	784:20	784:25	14	s == 3
FIELD	784:20	784:20	15	s
LEAF_NODE	784:20	784:20	16	s
EQ_OPERATOR	784:22	784:22	15	==
LEAF_NODE	784:22	784:22	16	==
FIELD	784:25	784:25	15	3
LEAF_NODE	784:25	784:25	16	3
LEAF_NODE	784:26	784:26	13	)
STATEMENTS	785:20	785:20	13	
JUMP_STATEMENT	785:20	785:28	14	continue DESTINATION ;
KEYWORD	785:20	785:20	15	continue
LEAF_NODE	785:20	785:20	16	continue
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	785:28	785:28	15	;
ITERATION	786:16	786:52	12	
KEYWORD	786:16	786:16	13	for
LEAF_NODE	786:16	786:16	14	for
LEAF_NODE	786:20	786:20	13	(
FOR_INIT	786:21	786:26	13	i = 0 ;
EXPR	786:21	786:21	14	i = 0
ASSIGN	786:21	786:25	15	i = 0
LVAL	786:21	786:21	16	i
FIELD	786:21	786:21	17	i
LEAF_NODE	786:21	786:21	18	i
ASSIGN_OP	786:23	786:23	16	=
LEAF_NODE	786:23	786:23	17	=
RVAL	786:25	786:25	16	0
FIELD	786:25	786:25	17	0
LEAF_NODE	786:25	786:25	18	0
LEAF_NODE	786:26	786:26	14	;
CONDITION	786:28	786:28	13	i < tfImageHeight
EXPR	786:28	786:32	14	i < tfImageHeight
FIELD	786:28	786:28	15	i
LEAF_NODE	786:28	786:28	16	i
REL_OPERATOR	786:30	786:30	15	<
LEAF_NODE	786:30	786:30	16	<
FIELD	786:32	786:32	15	tfImageHeight
LEAF_NODE	786:32	786:32	16	tfImageHeight
LEAF_NODE	786:45	786:45	13	;
FOR_EXPR	786:47	786:47	13	i ++
EXPR	786:47	786:47	14	i ++
FIELD	786:47	786:48	15	i ++
LEAF_NODE	786:47	786:47	16	i
LEAF_NODE	786:48	786:48	16	++
LEAF_NODE	786:50	786:50	13	)
STATEMENTS	786:52	793:16	13	
LEAF_NODE	786:52	786:52	14	{
STATEMENTS	787:20	791:20	14	
SELECTION	787:20	788:24	15	
KEYWORD	787:20	787:20	16	if
LEAF_NODE	787:20	787:20	17	if
LEAF_NODE	787:23	787:23	16	(
CONDITION	787:24	787:24	16	TIFFReadScanline ( tfFile , scan_line , i , s ) < 0
EXPR	787:24	787:68	17	TIFFReadScanline ( tfFile , scan_line , i , s ) < 0
FUNCTION_CALL	787:24	787:64	18	TIFFReadScanline ( tfFile , scan_line , i , s )
CALLEE	787:24	787:24	19	TIFFReadScanline
LEAF_NODE	787:24	787:24	20	TIFFReadScanline
LEAF_NODE	787:40	787:40	19	(
ARGUMENT	787:41	787:41	19	tfFile
FIELD	787:41	787:41	20	tfFile
LEAF_NODE	787:41	787:41	21	tfFile
LEAF_NODE	787:47	787:47	19	,
ARGUMENT	787:49	787:49	19	scan_line
FIELD	787:49	787:49	20	scan_line
LEAF_NODE	787:49	787:49	21	scan_line
LEAF_NODE	787:58	787:58	19	,
ARGUMENT	787:60	787:60	19	i
FIELD	787:60	787:60	20	i
LEAF_NODE	787:60	787:60	21	i
LEAF_NODE	787:61	787:61	19	,
ARGUMENT	787:63	787:63	19	s
FIELD	787:63	787:63	20	s
LEAF_NODE	787:63	787:63	21	s
LEAF_NODE	787:64	787:64	19	)
REL_OPERATOR	787:66	787:66	18	<
LEAF_NODE	787:66	787:66	19	<
FIELD	787:68	787:68	18	0
LEAF_NODE	787:68	787:68	19	0
LEAF_NODE	787:69	787:69	16	)
STATEMENTS	788:24	788:24	16	
JUMP_STATEMENT	788:24	788:29	17	break DESTINATION ;
KEYWORD	788:24	788:24	18	break
LEAF_NODE	788:24	788:24	19	break
LEAF_NODE	0:0	0:0	18	DESTINATION
LEAF_NODE	788:29	788:29	18	;
EXPR_STATEMENT	789:20	789:39	15	input_p = scan_line ;
EXPR	789:20	789:20	16	input_p = scan_line
ASSIGN	789:20	789:30	17	input_p = scan_line
LVAL	789:20	789:20	18	input_p
FIELD	789:20	789:20	19	input_p
LEAF_NODE	789:20	789:20	20	input_p
ASSIGN_OP	789:28	789:28	18	=
LEAF_NODE	789:28	789:28	19	=
RVAL	789:30	789:30	18	scan_line
FIELD	789:30	789:30	19	scan_line
LEAF_NODE	789:30	789:30	20	scan_line
LEAF_NODE	789:39	789:39	16	;
LEAF_NODE	790:20	790:20	15	output_p
LEAF_NODE	790:29	790:29	15	=
LEAF_NODE	790:31	790:31	15	imageMemory
LEAF_NODE	790:43	790:43	15	+
LEAF_NODE	790:45	790:45	15	(
LEAF_NODE	790:46	790:46	15	i
LEAF_NODE	790:47	790:47	15	*
LEAF_NODE	790:48	790:48	15	tfImageWidth
LEAF_NODE	790:60	790:60	15	*
LEAF_NODE	790:61	790:61	15	4
LEAF_NODE	790:62	790:62	15	)
EXPR_STATEMENT	790:64	790:78	15	+ pixel_map [ s ] ;
EXPR	790:64	790:64	16	+ pixel_map [ s ]
UNARY_EXPR	790:64	790:66	17	+ pixel_map [ s ]
UNARY_OPERATOR	790:64	790:64	18	+
LEAF_NODE	790:64	790:64	19	+
FIELD	790:66	790:77	18	pixel_map [ s ]
LEAF_NODE	790:66	790:66	19	pixel_map
LEAF_NODE	790:75	790:75	19	[
EXPR	790:76	790:76	19	s
FIELD	790:76	790:76	20	s
LEAF_NODE	790:76	790:76	21	s
LEAF_NODE	790:77	790:77	19	]
LEAF_NODE	790:78	790:78	16	;
ITERATION	791:20	792:24	15	
KEYWORD	791:20	791:20	16	for
LEAF_NODE	791:20	791:20	17	for
LEAF_NODE	791:24	791:24	16	(
FOR_INIT	791:25	791:30	16	j = 0 ;
EXPR	791:25	791:25	17	j = 0
ASSIGN	791:25	791:29	18	j = 0
LVAL	791:25	791:25	19	j
FIELD	791:25	791:25	20	j
LEAF_NODE	791:25	791:25	21	j
ASSIGN_OP	791:27	791:27	19	=
LEAF_NODE	791:27	791:27	20	=
RVAL	791:29	791:29	19	0
FIELD	791:29	791:29	20	0
LEAF_NODE	791:29	791:29	21	0
LEAF_NODE	791:30	791:30	17	;
CONDITION	791:32	791:32	16	j < tfImageWidth
EXPR	791:32	791:36	17	j < tfImageWidth
FIELD	791:32	791:32	18	j
LEAF_NODE	791:32	791:32	19	j
REL_OPERATOR	791:34	791:34	18	<
LEAF_NODE	791:34	791:34	19	<
FIELD	791:36	791:36	18	tfImageWidth
LEAF_NODE	791:36	791:36	19	tfImageWidth
LEAF_NODE	791:48	791:48	16	;
FOR_EXPR	791:50	791:50	16	j ++ , output_p += 4
EXPR	791:50	791:55	17	j ++ , output_p += 4
FIELD	791:50	791:51	18	j ++
LEAF_NODE	791:50	791:50	19	j
LEAF_NODE	791:51	791:51	19	++
LEAF_NODE	791:53	791:53	18	,
ASSIGN	791:55	791:67	18	output_p += 4
LVAL	791:55	791:55	19	output_p
FIELD	791:55	791:55	20	output_p
LEAF_NODE	791:55	791:55	21	output_p
ASSIGN_OP	791:64	791:64	19	+=
LEAF_NODE	791:64	791:64	20	+=
RVAL	791:67	791:67	19	4
FIELD	791:67	791:67	20	4
LEAF_NODE	791:67	791:67	21	4
LEAF_NODE	791:68	791:68	16	)
STATEMENTS	792:24	792:24	16	
EXPR_STATEMENT	792:24	792:46	17	* output_p = * input_p ++ ;
EXPR	792:24	792:24	18	* output_p = * input_p ++
ASSIGN	792:24	792:36	19	* output_p = * input_p ++
LVAL	792:24	792:24	20	* output_p
UNARY_EXPR	792:24	792:25	21	* output_p
UNARY_OPERATOR	792:24	792:24	22	*
LEAF_NODE	792:24	792:24	23	*
FIELD	792:25	792:25	22	output_p
LEAF_NODE	792:25	792:25	23	output_p
ASSIGN_OP	792:34	792:34	20	=
LEAF_NODE	792:34	792:34	21	=
RVAL	792:36	792:36	20	* input_p ++
UNARY_EXPR	792:36	792:37	21	* input_p ++
UNARY_OPERATOR	792:36	792:36	22	*
LEAF_NODE	792:36	792:36	23	*
FIELD	792:37	792:44	22	input_p ++
LEAF_NODE	792:37	792:37	23	input_p
LEAF_NODE	792:44	792:44	23	++
LEAF_NODE	792:46	792:46	18	;
LEAF_NODE	793:16	793:16	14	}
LEAF_NODE	794:12	794:12	11	}
LEAF_NODE	795:8	795:8	8	}
LEAF_NODE	796:4	796:4	5	}
SELECTION	796:6	796:11	3	
KEYWORD	796:6	796:6	4	else
LEAF_NODE	796:6	796:6	5	else
STATEMENTS	796:11	865:4	4	
LEAF_NODE	796:11	796:11	5	{
STATEMENTS	797:8	859:10	5	
SELECTION	797:8	797:41	6	
KEYWORD	797:8	797:8	7	if
LEAF_NODE	797:8	797:8	8	if
LEAF_NODE	797:11	797:11	7	(
CONDITION	797:12	797:12	7	xImageDepth == tfImageDepth
EXPR	797:12	797:27	8	xImageDepth == tfImageDepth
FIELD	797:12	797:12	9	xImageDepth
LEAF_NODE	797:12	797:12	10	xImageDepth
EQ_OPERATOR	797:24	797:24	9	==
LEAF_NODE	797:24	797:24	10	==
FIELD	797:27	797:27	9	tfImageDepth
LEAF_NODE	797:27	797:27	10	tfImageDepth
LEAF_NODE	797:39	797:39	7	)
STATEMENTS	797:41	805:8	7	
LEAF_NODE	797:41	797:41	8	{
STATEMENTS	798:12	802:12	8	
EXPR_STATEMENT	798:12	799:53	9	output_p = imageMemory = ( char * ) malloc ( tfBytesPerRow * tfImageHeight ) ;
EXPR	798:12	798:12	10	output_p = imageMemory = ( char * ) malloc ( tfBytesPerRow * tfImageHeight )
ASSIGN	798:12	798:23	11	output_p = imageMemory = ( char * ) malloc ( tfBytesPerRow * tfImageHeight )
LVAL	798:12	798:12	12	output_p
FIELD	798:12	798:12	13	output_p
LEAF_NODE	798:12	798:12	14	output_p
ASSIGN_OP	798:21	798:21	12	=
LEAF_NODE	798:21	798:21	13	=
RVAL	798:23	798:23	12	imageMemory = ( char * ) malloc ( tfBytesPerRow * tfImageHeight )
ASSIGN	798:23	798:37	13	imageMemory = ( char * ) malloc ( tfBytesPerRow * tfImageHeight )
LVAL	798:23	798:23	14	imageMemory
FIELD	798:23	798:23	15	imageMemory
LEAF_NODE	798:23	798:23	16	imageMemory
ASSIGN_OP	798:35	798:35	14	=
LEAF_NODE	798:35	798:35	15	=
RVAL	798:37	799:16	14	( char * ) malloc ( tfBytesPerRow * tfImageHeight )
LEAF_NODE	798:37	798:37	15	(
TYPE_NAME	798:38	798:38	15	char
LEAF_NODE	798:38	798:38	16	char
LEAF_NODE	798:43	798:43	15	*
LEAF_NODE	798:44	798:44	15	)
FUNCTION_CALL	799:16	799:52	15	malloc ( tfBytesPerRow * tfImageHeight )
CALLEE	799:16	799:16	16	malloc
LEAF_NODE	799:16	799:16	17	malloc
LEAF_NODE	799:22	799:22	16	(
ARGUMENT	799:23	799:39	16	tfBytesPerRow * tfImageHeight
FIELD	799:23	799:23	17	tfBytesPerRow
LEAF_NODE	799:23	799:23	18	tfBytesPerRow
LEAF_NODE	799:37	799:37	17	*
FIELD	799:39	799:39	17	tfImageHeight
LEAF_NODE	799:39	799:39	18	tfImageHeight
LEAF_NODE	799:52	799:52	16	)
LEAF_NODE	799:53	799:53	10	;
EXPR_STATEMENT	800:12	800:31	9	MCHECK ( imageMemory ) ;
EXPR	800:12	800:12	10	MCHECK ( imageMemory )
FUNCTION_CALL	800:12	800:30	11	MCHECK ( imageMemory )
CALLEE	800:12	800:12	12	MCHECK
LEAF_NODE	800:12	800:12	13	MCHECK
LEAF_NODE	800:18	800:18	12	(
ARGUMENT	800:19	800:19	12	imageMemory
FIELD	800:19	800:19	13	imageMemory
LEAF_NODE	800:19	800:19	14	imageMemory
LEAF_NODE	800:30	800:30	12	)
LEAF_NODE	800:31	800:31	10	;
ITERATION	802:12	803:16	9	
KEYWORD	802:12	802:12	10	for
LEAF_NODE	802:12	802:12	11	for
LEAF_NODE	802:16	802:16	10	(
FOR_INIT	802:17	802:22	10	i = 0 ;
EXPR	802:17	802:17	11	i = 0
ASSIGN	802:17	802:21	12	i = 0
LVAL	802:17	802:17	13	i
FIELD	802:17	802:17	14	i
LEAF_NODE	802:17	802:17	15	i
ASSIGN_OP	802:19	802:19	13	=
LEAF_NODE	802:19	802:19	14	=
RVAL	802:21	802:21	13	0
FIELD	802:21	802:21	14	0
LEAF_NODE	802:21	802:21	15	0
LEAF_NODE	802:22	802:22	11	;
CONDITION	802:24	802:24	10	i < tfImageHeight
EXPR	802:24	802:28	11	i < tfImageHeight
FIELD	802:24	802:24	12	i
LEAF_NODE	802:24	802:24	13	i
REL_OPERATOR	802:26	802:26	12	<
LEAF_NODE	802:26	802:26	13	<
FIELD	802:28	802:28	12	tfImageHeight
LEAF_NODE	802:28	802:28	13	tfImageHeight
LEAF_NODE	802:41	802:41	10	;
FOR_EXPR	802:43	802:43	10	i ++ , output_p += tfBytesPerRow
EXPR	802:43	802:48	11	i ++ , output_p += tfBytesPerRow
FIELD	802:43	802:44	12	i ++
LEAF_NODE	802:43	802:43	13	i
LEAF_NODE	802:44	802:44	13	++
LEAF_NODE	802:46	802:46	12	,
ASSIGN	802:48	802:60	12	output_p += tfBytesPerRow
LVAL	802:48	802:48	13	output_p
FIELD	802:48	802:48	14	output_p
LEAF_NODE	802:48	802:48	15	output_p
ASSIGN_OP	802:57	802:57	13	+=
LEAF_NODE	802:57	802:57	14	+=
RVAL	802:60	802:60	13	tfBytesPerRow
FIELD	802:60	802:60	14	tfBytesPerRow
LEAF_NODE	802:60	802:60	15	tfBytesPerRow
LEAF_NODE	802:73	802:73	10	)
STATEMENTS	803:16	803:16	10	
SELECTION	803:16	804:20	11	
KEYWORD	803:16	803:16	12	if
LEAF_NODE	803:16	803:16	13	if
LEAF_NODE	803:19	803:19	12	(
CONDITION	803:20	803:20	12	TIFFReadScanline ( tfFile , output_p , i , 0 ) < 0
EXPR	803:20	803:63	13	TIFFReadScanline ( tfFile , output_p , i , 0 ) < 0
FUNCTION_CALL	803:20	803:59	14	TIFFReadScanline ( tfFile , output_p , i , 0 )
CALLEE	803:20	803:20	15	TIFFReadScanline
LEAF_NODE	803:20	803:20	16	TIFFReadScanline
LEAF_NODE	803:36	803:36	15	(
ARGUMENT	803:37	803:37	15	tfFile
FIELD	803:37	803:37	16	tfFile
LEAF_NODE	803:37	803:37	17	tfFile
LEAF_NODE	803:43	803:43	15	,
ARGUMENT	803:45	803:45	15	output_p
FIELD	803:45	803:45	16	output_p
LEAF_NODE	803:45	803:45	17	output_p
LEAF_NODE	803:53	803:53	15	,
ARGUMENT	803:55	803:55	15	i
FIELD	803:55	803:55	16	i
LEAF_NODE	803:55	803:55	17	i
LEAF_NODE	803:56	803:56	15	,
ARGUMENT	803:58	803:58	15	0
FIELD	803:58	803:58	16	0
LEAF_NODE	803:58	803:58	17	0
LEAF_NODE	803:59	803:59	15	)
REL_OPERATOR	803:61	803:61	14	<
LEAF_NODE	803:61	803:61	15	<
FIELD	803:63	803:63	14	0
LEAF_NODE	803:63	803:63	15	0
LEAF_NODE	803:64	803:64	12	)
STATEMENTS	804:20	804:20	12	
JUMP_STATEMENT	804:20	804:25	13	break DESTINATION ;
KEYWORD	804:20	804:20	14	break
LEAF_NODE	804:20	804:20	15	break
LEAF_NODE	0:0	0:0	14	DESTINATION
LEAF_NODE	804:25	804:25	14	;
LEAF_NODE	805:8	805:8	8	}
SELECTION	805:10	805:15	6	
KEYWORD	805:10	805:10	7	else
LEAF_NODE	805:10	805:10	8	else
STATEMENTS	805:15	805:15	7	
SELECTION	805:15	805:62	8	
KEYWORD	805:15	805:15	9	if
LEAF_NODE	805:15	805:15	10	if
LEAF_NODE	805:18	805:18	9	(
CONDITION	805:19	805:19	9	( xImageDepth == 8 ) && ( tfImageDepth == 4 )
EXPR	805:19	805:19	10	( xImageDepth == 8 ) && ( tfImageDepth == 4 )
AND	805:19	805:41	11	( xImageDepth == 8 ) && ( tfImageDepth == 4 )
EXPR	805:19	805:36	12	( xImageDepth == 8 )
LEAF_NODE	805:19	805:19	13	(
FIELD	805:20	805:20	13	xImageDepth
LEAF_NODE	805:20	805:20	14	xImageDepth
EQ_OPERATOR	805:32	805:32	13	==
LEAF_NODE	805:32	805:32	14	==
FIELD	805:35	805:35	13	8
LEAF_NODE	805:35	805:35	14	8
LEAF_NODE	805:36	805:36	13	)
LEAF_NODE	805:38	805:38	12	&&
EXPR	805:41	805:59	12	( tfImageDepth == 4 )
LEAF_NODE	805:41	805:41	13	(
FIELD	805:42	805:42	13	tfImageDepth
LEAF_NODE	805:42	805:42	14	tfImageDepth
EQ_OPERATOR	805:55	805:55	13	==
LEAF_NODE	805:55	805:55	14	==
FIELD	805:58	805:58	13	4
LEAF_NODE	805:58	805:58	14	4
LEAF_NODE	805:59	805:59	13	)
LEAF_NODE	805:60	805:60	9	)
STATEMENTS	805:62	825:8	9	
LEAF_NODE	805:62	805:62	10	{
STATEMENTS	806:12	815:12	10	
LEAF_NODE	806:12	806:12	11	output_p
LEAF_NODE	806:21	806:21	11	=
LEAF_NODE	806:23	806:23	11	imageMemory
LEAF_NODE	806:35	806:35	11	=
LEAF_NODE	806:37	806:37	11	(
LEAF_NODE	806:38	806:38	11	char
LEAF_NODE	806:43	806:43	11	*
LEAF_NODE	806:44	806:44	11	)
LEAF_NODE	807:16	807:16	11	malloc
LEAF_NODE	807:22	807:22	11	(
LEAF_NODE	807:23	807:23	11	tfBytesPerRow
LEAF_NODE	807:37	807:37	11	*
LEAF_NODE	807:39	807:39	11	2
LEAF_NODE	807:41	807:41	11	*
LEAF_NODE	807:43	807:43	11	tfImageHeight
LEAF_NODE	807:57	807:57	11	+
LEAF_NODE	807:59	807:59	11	2
LEAF_NODE	807:60	807:60	11	)
LEAF_NODE	807:61	807:61	11	;
EXPR_STATEMENT	808:12	808:31	11	MCHECK ( imageMemory ) ;
EXPR	808:12	808:12	12	MCHECK ( imageMemory )
FUNCTION_CALL	808:12	808:30	13	MCHECK ( imageMemory )
CALLEE	808:12	808:12	14	MCHECK
LEAF_NODE	808:12	808:12	15	MCHECK
LEAF_NODE	808:18	808:18	14	(
ARGUMENT	808:19	808:19	14	imageMemory
FIELD	808:19	808:19	15	imageMemory
LEAF_NODE	808:19	808:19	16	imageMemory
LEAF_NODE	808:30	808:30	14	)
LEAF_NODE	808:31	808:31	12	;
ITERATION	815:12	815:48	11	
KEYWORD	815:12	815:12	12	for
LEAF_NODE	815:12	815:12	13	for
LEAF_NODE	815:16	815:16	12	(
FOR_INIT	815:17	815:22	12	i = 0 ;
EXPR	815:17	815:17	13	i = 0
ASSIGN	815:17	815:21	14	i = 0
LVAL	815:17	815:17	15	i
FIELD	815:17	815:17	16	i
LEAF_NODE	815:17	815:17	17	i
ASSIGN_OP	815:19	815:19	15	=
LEAF_NODE	815:19	815:19	16	=
RVAL	815:21	815:21	15	0
FIELD	815:21	815:21	16	0
LEAF_NODE	815:21	815:21	17	0
LEAF_NODE	815:22	815:22	13	;
CONDITION	815:24	815:24	12	i < tfImageHeight
EXPR	815:24	815:28	13	i < tfImageHeight
FIELD	815:24	815:24	14	i
LEAF_NODE	815:24	815:24	15	i
REL_OPERATOR	815:26	815:26	14	<
LEAF_NODE	815:26	815:26	15	<
FIELD	815:28	815:28	14	tfImageHeight
LEAF_NODE	815:28	815:28	15	tfImageHeight
LEAF_NODE	815:41	815:41	12	;
FOR_EXPR	815:43	815:43	12	i ++
EXPR	815:43	815:43	13	i ++
FIELD	815:43	815:44	14	i ++
LEAF_NODE	815:43	815:43	15	i
LEAF_NODE	815:44	815:44	15	++
LEAF_NODE	815:46	815:46	12	)
STATEMENTS	815:48	824:12	12	
LEAF_NODE	815:48	815:48	13	{
STATEMENTS	816:16	820:16	13	
SELECTION	816:16	817:20	14	
KEYWORD	816:16	816:16	15	if
LEAF_NODE	816:16	816:16	16	if
LEAF_NODE	816:19	816:19	15	(
CONDITION	816:20	816:20	15	TIFFReadScanline ( tfFile , scan_line , i , 0 ) < 0
EXPR	816:20	816:64	16	TIFFReadScanline ( tfFile , scan_line , i , 0 ) < 0
FUNCTION_CALL	816:20	816:60	17	TIFFReadScanline ( tfFile , scan_line , i , 0 )
CALLEE	816:20	816:20	18	TIFFReadScanline
LEAF_NODE	816:20	816:20	19	TIFFReadScanline
LEAF_NODE	816:36	816:36	18	(
ARGUMENT	816:37	816:37	18	tfFile
FIELD	816:37	816:37	19	tfFile
LEAF_NODE	816:37	816:37	20	tfFile
LEAF_NODE	816:43	816:43	18	,
ARGUMENT	816:45	816:45	18	scan_line
FIELD	816:45	816:45	19	scan_line
LEAF_NODE	816:45	816:45	20	scan_line
LEAF_NODE	816:54	816:54	18	,
ARGUMENT	816:56	816:56	18	i
FIELD	816:56	816:56	19	i
LEAF_NODE	816:56	816:56	20	i
LEAF_NODE	816:57	816:57	18	,
ARGUMENT	816:59	816:59	18	0
FIELD	816:59	816:59	19	0
LEAF_NODE	816:59	816:59	20	0
LEAF_NODE	816:60	816:60	18	)
REL_OPERATOR	816:62	816:62	17	<
LEAF_NODE	816:62	816:62	18	<
FIELD	816:64	816:64	17	0
LEAF_NODE	816:64	816:64	18	0
LEAF_NODE	816:65	816:65	15	)
STATEMENTS	817:20	817:20	15	
JUMP_STATEMENT	817:20	817:25	16	break DESTINATION ;
KEYWORD	817:20	817:20	17	break
LEAF_NODE	817:20	817:20	18	break
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	817:25	817:25	17	;
EXPR_STATEMENT	818:16	818:57	14	output_p = & imageMemory [ i * tfImageWidth ] ;
EXPR	818:16	818:16	15	output_p = & imageMemory [ i * tfImageWidth ]
ASSIGN	818:16	818:27	16	output_p = & imageMemory [ i * tfImageWidth ]
LVAL	818:16	818:16	17	output_p
FIELD	818:16	818:16	18	output_p
LEAF_NODE	818:16	818:16	19	output_p
ASSIGN_OP	818:25	818:25	17	=
LEAF_NODE	818:25	818:25	18	=
RVAL	818:27	818:27	17	& imageMemory [ i * tfImageWidth ]
UNARY_EXPR	818:27	818:28	18	& imageMemory [ i * tfImageWidth ]
UNARY_OPERATOR	818:27	818:27	19	&
LEAF_NODE	818:27	818:27	20	&
FIELD	818:28	818:56	19	imageMemory [ i * tfImageWidth ]
LEAF_NODE	818:28	818:28	20	imageMemory
LEAF_NODE	818:39	818:39	20	[
EXPR	818:40	818:44	20	i * tfImageWidth
FIELD	818:40	818:40	21	i
LEAF_NODE	818:40	818:40	22	i
LEAF_NODE	818:42	818:42	21	*
FIELD	818:44	818:44	21	tfImageWidth
LEAF_NODE	818:44	818:44	22	tfImageWidth
LEAF_NODE	818:56	818:56	20	]
LEAF_NODE	818:57	818:57	15	;
EXPR_STATEMENT	819:16	819:35	14	input_p = scan_line ;
EXPR	819:16	819:16	15	input_p = scan_line
ASSIGN	819:16	819:26	16	input_p = scan_line
LVAL	819:16	819:16	17	input_p
FIELD	819:16	819:16	18	input_p
LEAF_NODE	819:16	819:16	19	input_p
ASSIGN_OP	819:24	819:24	17	=
LEAF_NODE	819:24	819:24	18	=
RVAL	819:26	819:26	17	scan_line
FIELD	819:26	819:26	18	scan_line
LEAF_NODE	819:26	819:26	19	scan_line
LEAF_NODE	819:35	819:35	15	;
ITERATION	820:16	820:65	14	
KEYWORD	820:16	820:16	15	for
LEAF_NODE	820:16	820:16	16	for
LEAF_NODE	820:20	820:20	15	(
FOR_INIT	820:21	820:26	15	j = 0 ;
EXPR	820:21	820:21	16	j = 0
ASSIGN	820:21	820:25	17	j = 0
LVAL	820:21	820:21	18	j
FIELD	820:21	820:21	19	j
LEAF_NODE	820:21	820:21	20	j
ASSIGN_OP	820:23	820:23	18	=
LEAF_NODE	820:23	820:23	19	=
RVAL	820:25	820:25	18	0
FIELD	820:25	820:25	19	0
LEAF_NODE	820:25	820:25	20	0
LEAF_NODE	820:26	820:26	16	;
CONDITION	820:28	820:28	15	j < tfImageWidth
EXPR	820:28	820:32	16	j < tfImageWidth
FIELD	820:28	820:28	17	j
LEAF_NODE	820:28	820:28	18	j
REL_OPERATOR	820:30	820:30	17	<
LEAF_NODE	820:30	820:30	18	<
FIELD	820:32	820:32	17	tfImageWidth
LEAF_NODE	820:32	820:32	18	tfImageWidth
LEAF_NODE	820:44	820:44	15	;
FOR_EXPR	820:46	820:46	15	j += 2 , input_p ++
EXPR	820:46	820:54	16	j += 2 , input_p ++
ASSIGN	820:46	820:51	17	j += 2
LVAL	820:46	820:46	18	j
FIELD	820:46	820:46	19	j
LEAF_NODE	820:46	820:46	20	j
ASSIGN_OP	820:48	820:48	18	+=
LEAF_NODE	820:48	820:48	19	+=
RVAL	820:51	820:51	18	2
FIELD	820:51	820:51	19	2
LEAF_NODE	820:51	820:51	20	2
LEAF_NODE	820:52	820:52	17	,
FIELD	820:54	820:61	17	input_p ++
LEAF_NODE	820:54	820:54	18	input_p
LEAF_NODE	820:61	820:61	18	++
LEAF_NODE	820:63	820:63	15	)
STATEMENTS	820:65	823:16	15	
LEAF_NODE	820:65	820:65	16	{
STATEMENTS	821:20	822:20	16	
EXPR_STATEMENT	821:20	821:61	17	* output_p ++ = ( * input_p >> 4 ) + basePixel ;
EXPR	821:20	821:20	18	* output_p ++ = ( * input_p >> 4 ) + basePixel
ASSIGN	821:20	821:34	19	* output_p ++ = ( * input_p >> 4 ) + basePixel
LVAL	821:20	821:20	20	* output_p ++
UNARY_EXPR	821:20	821:21	21	* output_p ++
UNARY_OPERATOR	821:20	821:20	22	*
LEAF_NODE	821:20	821:20	23	*
FIELD	821:21	821:29	22	output_p ++
LEAF_NODE	821:21	821:21	23	output_p
LEAF_NODE	821:29	821:29	23	++
ASSIGN_OP	821:32	821:32	20	=
LEAF_NODE	821:32	821:32	21	=
RVAL	821:34	821:52	20	( * input_p >> 4 ) + basePixel
LEAF_NODE	821:34	821:34	21	(
UNARY_EXPR	821:35	821:36	21	* input_p
UNARY_OPERATOR	821:35	821:35	22	*
LEAF_NODE	821:35	821:35	23	*
FIELD	821:36	821:36	22	input_p
LEAF_NODE	821:36	821:36	23	input_p
LEAF_NODE	821:44	821:44	21	>>
FIELD	821:47	821:47	21	4
LEAF_NODE	821:47	821:47	22	4
LEAF_NODE	821:48	821:48	21	)
LEAF_NODE	821:50	821:50	21	+
FIELD	821:52	821:52	21	basePixel
LEAF_NODE	821:52	821:52	22	basePixel
LEAF_NODE	821:61	821:61	18	;
EXPR_STATEMENT	822:20	822:62	17	* output_p ++ = ( * input_p & 0xf ) + basePixel ;
EXPR	822:20	822:20	18	* output_p ++ = ( * input_p & 0xf ) + basePixel
ASSIGN	822:20	822:34	19	* output_p ++ = ( * input_p & 0xf ) + basePixel
LVAL	822:20	822:20	20	* output_p ++
UNARY_EXPR	822:20	822:21	21	* output_p ++
UNARY_OPERATOR	822:20	822:20	22	*
LEAF_NODE	822:20	822:20	23	*
FIELD	822:21	822:29	22	output_p ++
LEAF_NODE	822:21	822:21	23	output_p
LEAF_NODE	822:29	822:29	23	++
ASSIGN_OP	822:32	822:32	20	=
LEAF_NODE	822:32	822:32	21	=
RVAL	822:34	822:53	20	( * input_p & 0xf ) + basePixel
LEAF_NODE	822:34	822:34	21	(
UNARY_EXPR	822:35	822:36	21	* input_p
UNARY_OPERATOR	822:35	822:35	22	*
LEAF_NODE	822:35	822:35	23	*
FIELD	822:36	822:36	22	input_p
LEAF_NODE	822:36	822:36	23	input_p
LEAF_NODE	822:44	822:44	21	&
FIELD	822:46	822:46	21	0xf
LEAF_NODE	822:46	822:46	22	0xf
LEAF_NODE	822:49	822:49	21	)
LEAF_NODE	822:51	822:51	21	+
FIELD	822:53	822:53	21	basePixel
LEAF_NODE	822:53	822:53	22	basePixel
LEAF_NODE	822:62	822:62	18	;
LEAF_NODE	823:16	823:16	16	}
LEAF_NODE	824:12	824:12	13	}
LEAF_NODE	825:8	825:8	10	}
SELECTION	825:10	825:15	6	
KEYWORD	825:10	825:10	7	else
LEAF_NODE	825:10	825:10	8	else
STATEMENTS	825:15	825:15	7	
SELECTION	825:15	825:62	8	
KEYWORD	825:15	825:15	9	if
LEAF_NODE	825:15	825:15	10	if
LEAF_NODE	825:18	825:18	9	(
CONDITION	825:19	825:19	9	( xImageDepth == 8 ) && ( tfImageDepth == 2 )
EXPR	825:19	825:19	10	( xImageDepth == 8 ) && ( tfImageDepth == 2 )
AND	825:19	825:41	11	( xImageDepth == 8 ) && ( tfImageDepth == 2 )
EXPR	825:19	825:36	12	( xImageDepth == 8 )
LEAF_NODE	825:19	825:19	13	(
FIELD	825:20	825:20	13	xImageDepth
LEAF_NODE	825:20	825:20	14	xImageDepth
EQ_OPERATOR	825:32	825:32	13	==
LEAF_NODE	825:32	825:32	14	==
FIELD	825:35	825:35	13	8
LEAF_NODE	825:35	825:35	14	8
LEAF_NODE	825:36	825:36	13	)
LEAF_NODE	825:38	825:38	12	&&
EXPR	825:41	825:59	12	( tfImageDepth == 2 )
LEAF_NODE	825:41	825:41	13	(
FIELD	825:42	825:42	13	tfImageDepth
LEAF_NODE	825:42	825:42	14	tfImageDepth
EQ_OPERATOR	825:55	825:55	13	==
LEAF_NODE	825:55	825:55	14	==
FIELD	825:58	825:58	13	2
LEAF_NODE	825:58	825:58	14	2
LEAF_NODE	825:59	825:59	13	)
LEAF_NODE	825:60	825:60	9	)
STATEMENTS	825:62	842:8	9	
LEAF_NODE	825:62	825:62	10	{
STATEMENTS	826:12	830:12	10	
LEAF_NODE	826:12	826:12	11	output_p
LEAF_NODE	826:21	826:21	11	=
LEAF_NODE	826:23	826:23	11	imageMemory
LEAF_NODE	826:35	826:35	11	=
LEAF_NODE	826:37	826:37	11	(
LEAF_NODE	826:38	826:38	11	char
LEAF_NODE	826:43	826:43	11	*
LEAF_NODE	826:44	826:44	11	)
LEAF_NODE	827:16	827:16	11	malloc
LEAF_NODE	827:22	827:22	11	(
LEAF_NODE	827:23	827:23	11	tfBytesPerRow
LEAF_NODE	827:37	827:37	11	*
LEAF_NODE	827:39	827:39	11	4
LEAF_NODE	827:41	827:41	11	*
LEAF_NODE	827:43	827:43	11	tfImageHeight
LEAF_NODE	827:57	827:57	11	+
LEAF_NODE	827:59	827:59	11	4
LEAF_NODE	827:60	827:60	11	)
LEAF_NODE	827:61	827:61	11	;
EXPR_STATEMENT	828:12	828:31	11	MCHECK ( imageMemory ) ;
EXPR	828:12	828:12	12	MCHECK ( imageMemory )
FUNCTION_CALL	828:12	828:30	13	MCHECK ( imageMemory )
CALLEE	828:12	828:12	14	MCHECK
LEAF_NODE	828:12	828:12	15	MCHECK
LEAF_NODE	828:18	828:18	14	(
ARGUMENT	828:19	828:19	14	imageMemory
FIELD	828:19	828:19	15	imageMemory
LEAF_NODE	828:19	828:19	16	imageMemory
LEAF_NODE	828:30	828:30	14	)
LEAF_NODE	828:31	828:31	12	;
ITERATION	830:12	830:48	11	
KEYWORD	830:12	830:12	12	for
LEAF_NODE	830:12	830:12	13	for
LEAF_NODE	830:16	830:16	12	(
FOR_INIT	830:17	830:22	12	i = 0 ;
EXPR	830:17	830:17	13	i = 0
ASSIGN	830:17	830:21	14	i = 0
LVAL	830:17	830:17	15	i
FIELD	830:17	830:17	16	i
LEAF_NODE	830:17	830:17	17	i
ASSIGN_OP	830:19	830:19	15	=
LEAF_NODE	830:19	830:19	16	=
RVAL	830:21	830:21	15	0
FIELD	830:21	830:21	16	0
LEAF_NODE	830:21	830:21	17	0
LEAF_NODE	830:22	830:22	13	;
CONDITION	830:24	830:24	12	i < tfImageHeight
EXPR	830:24	830:28	13	i < tfImageHeight
FIELD	830:24	830:24	14	i
LEAF_NODE	830:24	830:24	15	i
REL_OPERATOR	830:26	830:26	14	<
LEAF_NODE	830:26	830:26	15	<
FIELD	830:28	830:28	14	tfImageHeight
LEAF_NODE	830:28	830:28	15	tfImageHeight
LEAF_NODE	830:41	830:41	12	;
FOR_EXPR	830:43	830:43	12	i ++
EXPR	830:43	830:43	13	i ++
FIELD	830:43	830:44	14	i ++
LEAF_NODE	830:43	830:43	15	i
LEAF_NODE	830:44	830:44	15	++
LEAF_NODE	830:46	830:46	12	)
STATEMENTS	830:48	841:12	12	
LEAF_NODE	830:48	830:48	13	{
STATEMENTS	831:16	835:16	13	
SELECTION	831:16	832:20	14	
KEYWORD	831:16	831:16	15	if
LEAF_NODE	831:16	831:16	16	if
LEAF_NODE	831:19	831:19	15	(
CONDITION	831:20	831:20	15	TIFFReadScanline ( tfFile , scan_line , i , 0 ) < 0
EXPR	831:20	831:64	16	TIFFReadScanline ( tfFile , scan_line , i , 0 ) < 0
FUNCTION_CALL	831:20	831:60	17	TIFFReadScanline ( tfFile , scan_line , i , 0 )
CALLEE	831:20	831:20	18	TIFFReadScanline
LEAF_NODE	831:20	831:20	19	TIFFReadScanline
LEAF_NODE	831:36	831:36	18	(
ARGUMENT	831:37	831:37	18	tfFile
FIELD	831:37	831:37	19	tfFile
LEAF_NODE	831:37	831:37	20	tfFile
LEAF_NODE	831:43	831:43	18	,
ARGUMENT	831:45	831:45	18	scan_line
FIELD	831:45	831:45	19	scan_line
LEAF_NODE	831:45	831:45	20	scan_line
LEAF_NODE	831:54	831:54	18	,
ARGUMENT	831:56	831:56	18	i
FIELD	831:56	831:56	19	i
LEAF_NODE	831:56	831:56	20	i
LEAF_NODE	831:57	831:57	18	,
ARGUMENT	831:59	831:59	18	0
FIELD	831:59	831:59	19	0
LEAF_NODE	831:59	831:59	20	0
LEAF_NODE	831:60	831:60	18	)
REL_OPERATOR	831:62	831:62	17	<
LEAF_NODE	831:62	831:62	18	<
FIELD	831:64	831:64	17	0
LEAF_NODE	831:64	831:64	18	0
LEAF_NODE	831:65	831:65	15	)
STATEMENTS	832:20	832:20	15	
JUMP_STATEMENT	832:20	832:25	16	break DESTINATION ;
KEYWORD	832:20	832:20	17	break
LEAF_NODE	832:20	832:20	18	break
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	832:25	832:25	17	;
EXPR_STATEMENT	833:16	833:57	14	output_p = & imageMemory [ i * tfImageWidth ] ;
EXPR	833:16	833:16	15	output_p = & imageMemory [ i * tfImageWidth ]
ASSIGN	833:16	833:27	16	output_p = & imageMemory [ i * tfImageWidth ]
LVAL	833:16	833:16	17	output_p
FIELD	833:16	833:16	18	output_p
LEAF_NODE	833:16	833:16	19	output_p
ASSIGN_OP	833:25	833:25	17	=
LEAF_NODE	833:25	833:25	18	=
RVAL	833:27	833:27	17	& imageMemory [ i * tfImageWidth ]
UNARY_EXPR	833:27	833:28	18	& imageMemory [ i * tfImageWidth ]
UNARY_OPERATOR	833:27	833:27	19	&
LEAF_NODE	833:27	833:27	20	&
FIELD	833:28	833:56	19	imageMemory [ i * tfImageWidth ]
LEAF_NODE	833:28	833:28	20	imageMemory
LEAF_NODE	833:39	833:39	20	[
EXPR	833:40	833:44	20	i * tfImageWidth
FIELD	833:40	833:40	21	i
LEAF_NODE	833:40	833:40	22	i
LEAF_NODE	833:42	833:42	21	*
FIELD	833:44	833:44	21	tfImageWidth
LEAF_NODE	833:44	833:44	22	tfImageWidth
LEAF_NODE	833:56	833:56	20	]
LEAF_NODE	833:57	833:57	15	;
EXPR_STATEMENT	834:16	834:35	14	input_p = scan_line ;
EXPR	834:16	834:16	15	input_p = scan_line
ASSIGN	834:16	834:26	16	input_p = scan_line
LVAL	834:16	834:16	17	input_p
FIELD	834:16	834:16	18	input_p
LEAF_NODE	834:16	834:16	19	input_p
ASSIGN_OP	834:24	834:24	17	=
LEAF_NODE	834:24	834:24	18	=
RVAL	834:26	834:26	17	scan_line
FIELD	834:26	834:26	18	scan_line
LEAF_NODE	834:26	834:26	19	scan_line
LEAF_NODE	834:35	834:35	15	;
ITERATION	835:16	835:65	14	
KEYWORD	835:16	835:16	15	for
LEAF_NODE	835:16	835:16	16	for
LEAF_NODE	835:20	835:20	15	(
FOR_INIT	835:21	835:26	15	j = 0 ;
EXPR	835:21	835:21	16	j = 0
ASSIGN	835:21	835:25	17	j = 0
LVAL	835:21	835:21	18	j
FIELD	835:21	835:21	19	j
LEAF_NODE	835:21	835:21	20	j
ASSIGN_OP	835:23	835:23	18	=
LEAF_NODE	835:23	835:23	19	=
RVAL	835:25	835:25	18	0
FIELD	835:25	835:25	19	0
LEAF_NODE	835:25	835:25	20	0
LEAF_NODE	835:26	835:26	16	;
CONDITION	835:28	835:28	15	j < tfImageWidth
EXPR	835:28	835:32	16	j < tfImageWidth
FIELD	835:28	835:28	17	j
LEAF_NODE	835:28	835:28	18	j
REL_OPERATOR	835:30	835:30	17	<
LEAF_NODE	835:30	835:30	18	<
FIELD	835:32	835:32	17	tfImageWidth
LEAF_NODE	835:32	835:32	18	tfImageWidth
LEAF_NODE	835:44	835:44	15	;
FOR_EXPR	835:46	835:46	15	j += 4 , input_p ++
EXPR	835:46	835:54	16	j += 4 , input_p ++
ASSIGN	835:46	835:51	17	j += 4
LVAL	835:46	835:46	18	j
FIELD	835:46	835:46	19	j
LEAF_NODE	835:46	835:46	20	j
ASSIGN_OP	835:48	835:48	18	+=
LEAF_NODE	835:48	835:48	19	+=
RVAL	835:51	835:51	18	4
FIELD	835:51	835:51	19	4
LEAF_NODE	835:51	835:51	20	4
LEAF_NODE	835:52	835:52	17	,
FIELD	835:54	835:61	17	input_p ++
LEAF_NODE	835:54	835:54	18	input_p
LEAF_NODE	835:61	835:61	18	++
LEAF_NODE	835:63	835:63	15	)
STATEMENTS	835:65	840:16	15	
LEAF_NODE	835:65	835:65	16	{
STATEMENTS	836:20	839:20	16	
EXPR_STATEMENT	836:20	836:61	17	* output_p ++ = ( * input_p >> 6 ) + basePixel ;
EXPR	836:20	836:20	18	* output_p ++ = ( * input_p >> 6 ) + basePixel
ASSIGN	836:20	836:34	19	* output_p ++ = ( * input_p >> 6 ) + basePixel
LVAL	836:20	836:20	20	* output_p ++
UNARY_EXPR	836:20	836:21	21	* output_p ++
UNARY_OPERATOR	836:20	836:20	22	*
LEAF_NODE	836:20	836:20	23	*
FIELD	836:21	836:29	22	output_p ++
LEAF_NODE	836:21	836:21	23	output_p
LEAF_NODE	836:29	836:29	23	++
ASSIGN_OP	836:32	836:32	20	=
LEAF_NODE	836:32	836:32	21	=
RVAL	836:34	836:52	20	( * input_p >> 6 ) + basePixel
LEAF_NODE	836:34	836:34	21	(
UNARY_EXPR	836:35	836:36	21	* input_p
UNARY_OPERATOR	836:35	836:35	22	*
LEAF_NODE	836:35	836:35	23	*
FIELD	836:36	836:36	22	input_p
LEAF_NODE	836:36	836:36	23	input_p
LEAF_NODE	836:44	836:44	21	>>
FIELD	836:47	836:47	21	6
LEAF_NODE	836:47	836:47	22	6
LEAF_NODE	836:48	836:48	21	)
LEAF_NODE	836:50	836:50	21	+
FIELD	836:52	836:52	21	basePixel
LEAF_NODE	836:52	836:52	22	basePixel
LEAF_NODE	836:61	836:61	18	;
EXPR_STATEMENT	837:20	837:67	17	* output_p ++ = ( ( * input_p >> 4 ) & 3 ) + basePixel ;
EXPR	837:20	837:20	18	* output_p ++ = ( ( * input_p >> 4 ) & 3 ) + basePixel
ASSIGN	837:20	837:34	19	* output_p ++ = ( ( * input_p >> 4 ) & 3 ) + basePixel
LVAL	837:20	837:20	20	* output_p ++
UNARY_EXPR	837:20	837:21	21	* output_p ++
UNARY_OPERATOR	837:20	837:20	22	*
LEAF_NODE	837:20	837:20	23	*
FIELD	837:21	837:29	22	output_p ++
LEAF_NODE	837:21	837:21	23	output_p
LEAF_NODE	837:29	837:29	23	++
ASSIGN_OP	837:32	837:32	20	=
LEAF_NODE	837:32	837:32	21	=
RVAL	837:34	837:58	20	( ( * input_p >> 4 ) & 3 ) + basePixel
LEAF_NODE	837:34	837:34	21	(
LEAF_NODE	837:35	837:35	21	(
UNARY_EXPR	837:36	837:37	21	* input_p
UNARY_OPERATOR	837:36	837:36	22	*
LEAF_NODE	837:36	837:36	23	*
FIELD	837:37	837:37	22	input_p
LEAF_NODE	837:37	837:37	23	input_p
LEAF_NODE	837:45	837:45	21	>>
FIELD	837:48	837:48	21	4
LEAF_NODE	837:48	837:48	22	4
LEAF_NODE	837:49	837:49	21	)
LEAF_NODE	837:51	837:51	21	&
FIELD	837:53	837:53	21	3
LEAF_NODE	837:53	837:53	22	3
LEAF_NODE	837:54	837:54	21	)
LEAF_NODE	837:56	837:56	21	+
FIELD	837:58	837:58	21	basePixel
LEAF_NODE	837:58	837:58	22	basePixel
LEAF_NODE	837:67	837:67	18	;
EXPR_STATEMENT	838:20	838:67	17	* output_p ++ = ( ( * input_p >> 2 ) & 3 ) + basePixel ;
EXPR	838:20	838:20	18	* output_p ++ = ( ( * input_p >> 2 ) & 3 ) + basePixel
ASSIGN	838:20	838:34	19	* output_p ++ = ( ( * input_p >> 2 ) & 3 ) + basePixel
LVAL	838:20	838:20	20	* output_p ++
UNARY_EXPR	838:20	838:21	21	* output_p ++
UNARY_OPERATOR	838:20	838:20	22	*
LEAF_NODE	838:20	838:20	23	*
FIELD	838:21	838:29	22	output_p ++
LEAF_NODE	838:21	838:21	23	output_p
LEAF_NODE	838:29	838:29	23	++
ASSIGN_OP	838:32	838:32	20	=
LEAF_NODE	838:32	838:32	21	=
RVAL	838:34	838:58	20	( ( * input_p >> 2 ) & 3 ) + basePixel
LEAF_NODE	838:34	838:34	21	(
LEAF_NODE	838:35	838:35	21	(
UNARY_EXPR	838:36	838:37	21	* input_p
UNARY_OPERATOR	838:36	838:36	22	*
LEAF_NODE	838:36	838:36	23	*
FIELD	838:37	838:37	22	input_p
LEAF_NODE	838:37	838:37	23	input_p
LEAF_NODE	838:45	838:45	21	>>
FIELD	838:48	838:48	21	2
LEAF_NODE	838:48	838:48	22	2
LEAF_NODE	838:49	838:49	21	)
LEAF_NODE	838:51	838:51	21	&
FIELD	838:53	838:53	21	3
LEAF_NODE	838:53	838:53	22	3
LEAF_NODE	838:54	838:54	21	)
LEAF_NODE	838:56	838:56	21	+
FIELD	838:58	838:58	21	basePixel
LEAF_NODE	838:58	838:58	22	basePixel
LEAF_NODE	838:67	838:67	18	;
EXPR_STATEMENT	839:20	839:60	17	* output_p ++ = ( * input_p & 3 ) + basePixel ;
EXPR	839:20	839:20	18	* output_p ++ = ( * input_p & 3 ) + basePixel
ASSIGN	839:20	839:34	19	* output_p ++ = ( * input_p & 3 ) + basePixel
LVAL	839:20	839:20	20	* output_p ++
UNARY_EXPR	839:20	839:21	21	* output_p ++
UNARY_OPERATOR	839:20	839:20	22	*
LEAF_NODE	839:20	839:20	23	*
FIELD	839:21	839:29	22	output_p ++
LEAF_NODE	839:21	839:21	23	output_p
LEAF_NODE	839:29	839:29	23	++
ASSIGN_OP	839:32	839:32	20	=
LEAF_NODE	839:32	839:32	21	=
RVAL	839:34	839:51	20	( * input_p & 3 ) + basePixel
LEAF_NODE	839:34	839:34	21	(
UNARY_EXPR	839:35	839:36	21	* input_p
UNARY_OPERATOR	839:35	839:35	22	*
LEAF_NODE	839:35	839:35	23	*
FIELD	839:36	839:36	22	input_p
LEAF_NODE	839:36	839:36	23	input_p
LEAF_NODE	839:44	839:44	21	&
FIELD	839:46	839:46	21	3
LEAF_NODE	839:46	839:46	22	3
LEAF_NODE	839:47	839:47	21	)
LEAF_NODE	839:49	839:49	21	+
FIELD	839:51	839:51	21	basePixel
LEAF_NODE	839:51	839:51	22	basePixel
LEAF_NODE	839:60	839:60	18	;
LEAF_NODE	840:16	840:16	16	}
LEAF_NODE	841:12	841:12	13	}
LEAF_NODE	842:8	842:8	10	}
SELECTION	842:10	842:15	6	
KEYWORD	842:10	842:10	7	else
LEAF_NODE	842:10	842:10	8	else
STATEMENTS	842:15	842:15	7	
SELECTION	842:15	842:62	8	
KEYWORD	842:15	842:15	9	if
LEAF_NODE	842:15	842:15	10	if
LEAF_NODE	842:18	842:18	9	(
CONDITION	842:19	842:19	9	( xImageDepth == 4 ) && ( tfImageDepth == 2 )
EXPR	842:19	842:19	10	( xImageDepth == 4 ) && ( tfImageDepth == 2 )
AND	842:19	842:41	11	( xImageDepth == 4 ) && ( tfImageDepth == 2 )
EXPR	842:19	842:36	12	( xImageDepth == 4 )
LEAF_NODE	842:19	842:19	13	(
FIELD	842:20	842:20	13	xImageDepth
LEAF_NODE	842:20	842:20	14	xImageDepth
EQ_OPERATOR	842:32	842:32	13	==
LEAF_NODE	842:32	842:32	14	==
FIELD	842:35	842:35	13	4
LEAF_NODE	842:35	842:35	14	4
LEAF_NODE	842:36	842:36	13	)
LEAF_NODE	842:38	842:38	12	&&
EXPR	842:41	842:59	12	( tfImageDepth == 2 )
LEAF_NODE	842:41	842:41	13	(
FIELD	842:42	842:42	13	tfImageDepth
LEAF_NODE	842:42	842:42	14	tfImageDepth
EQ_OPERATOR	842:55	842:55	13	==
LEAF_NODE	842:55	842:55	14	==
FIELD	842:58	842:58	13	2
LEAF_NODE	842:58	842:58	14	2
LEAF_NODE	842:59	842:59	13	)
LEAF_NODE	842:60	842:60	9	)
STATEMENTS	842:62	859:8	9	
LEAF_NODE	842:62	842:62	10	{
STATEMENTS	843:12	847:12	10	
LEAF_NODE	843:12	843:12	11	output_p
LEAF_NODE	843:21	843:21	11	=
LEAF_NODE	843:23	843:23	11	imageMemory
LEAF_NODE	843:35	843:35	11	=
LEAF_NODE	843:37	843:37	11	(
LEAF_NODE	843:38	843:38	11	char
LEAF_NODE	843:43	843:43	11	*
LEAF_NODE	843:44	843:44	11	)
LEAF_NODE	844:16	844:16	11	malloc
LEAF_NODE	844:22	844:22	11	(
LEAF_NODE	844:23	844:23	11	tfBytesPerRow
LEAF_NODE	844:37	844:37	11	*
LEAF_NODE	844:39	844:39	11	2
LEAF_NODE	844:41	844:41	11	*
LEAF_NODE	844:43	844:43	11	tfImageHeight
LEAF_NODE	844:57	844:57	11	+
LEAF_NODE	844:59	844:59	11	2
LEAF_NODE	844:60	844:60	11	)
LEAF_NODE	844:61	844:61	11	;
EXPR_STATEMENT	845:12	845:31	11	MCHECK ( imageMemory ) ;
EXPR	845:12	845:12	12	MCHECK ( imageMemory )
FUNCTION_CALL	845:12	845:30	13	MCHECK ( imageMemory )
CALLEE	845:12	845:12	14	MCHECK
LEAF_NODE	845:12	845:12	15	MCHECK
LEAF_NODE	845:18	845:18	14	(
ARGUMENT	845:19	845:19	14	imageMemory
FIELD	845:19	845:19	15	imageMemory
LEAF_NODE	845:19	845:19	16	imageMemory
LEAF_NODE	845:30	845:30	14	)
LEAF_NODE	845:31	845:31	12	;
ITERATION	847:12	847:48	11	
KEYWORD	847:12	847:12	12	for
LEAF_NODE	847:12	847:12	13	for
LEAF_NODE	847:16	847:16	12	(
FOR_INIT	847:17	847:22	12	i = 0 ;
EXPR	847:17	847:17	13	i = 0
ASSIGN	847:17	847:21	14	i = 0
LVAL	847:17	847:17	15	i
FIELD	847:17	847:17	16	i
LEAF_NODE	847:17	847:17	17	i
ASSIGN_OP	847:19	847:19	15	=
LEAF_NODE	847:19	847:19	16	=
RVAL	847:21	847:21	15	0
FIELD	847:21	847:21	16	0
LEAF_NODE	847:21	847:21	17	0
LEAF_NODE	847:22	847:22	13	;
CONDITION	847:24	847:24	12	i < tfImageHeight
EXPR	847:24	847:28	13	i < tfImageHeight
FIELD	847:24	847:24	14	i
LEAF_NODE	847:24	847:24	15	i
REL_OPERATOR	847:26	847:26	14	<
LEAF_NODE	847:26	847:26	15	<
FIELD	847:28	847:28	14	tfImageHeight
LEAF_NODE	847:28	847:28	15	tfImageHeight
LEAF_NODE	847:41	847:41	12	;
FOR_EXPR	847:43	847:43	12	i ++
EXPR	847:43	847:43	13	i ++
FIELD	847:43	847:44	14	i ++
LEAF_NODE	847:43	847:43	15	i
LEAF_NODE	847:44	847:44	15	++
LEAF_NODE	847:46	847:46	12	)
STATEMENTS	847:48	858:12	12	
LEAF_NODE	847:48	847:48	13	{
STATEMENTS	848:16	852:16	13	
SELECTION	848:16	849:20	14	
KEYWORD	848:16	848:16	15	if
LEAF_NODE	848:16	848:16	16	if
LEAF_NODE	848:19	848:19	15	(
CONDITION	848:20	848:20	15	TIFFReadScanline ( tfFile , scan_line , i , 0 ) < 0
EXPR	848:20	848:64	16	TIFFReadScanline ( tfFile , scan_line , i , 0 ) < 0
FUNCTION_CALL	848:20	848:60	17	TIFFReadScanline ( tfFile , scan_line , i , 0 )
CALLEE	848:20	848:20	18	TIFFReadScanline
LEAF_NODE	848:20	848:20	19	TIFFReadScanline
LEAF_NODE	848:36	848:36	18	(
ARGUMENT	848:37	848:37	18	tfFile
FIELD	848:37	848:37	19	tfFile
LEAF_NODE	848:37	848:37	20	tfFile
LEAF_NODE	848:43	848:43	18	,
ARGUMENT	848:45	848:45	18	scan_line
FIELD	848:45	848:45	19	scan_line
LEAF_NODE	848:45	848:45	20	scan_line
LEAF_NODE	848:54	848:54	18	,
ARGUMENT	848:56	848:56	18	i
FIELD	848:56	848:56	19	i
LEAF_NODE	848:56	848:56	20	i
LEAF_NODE	848:57	848:57	18	,
ARGUMENT	848:59	848:59	18	0
FIELD	848:59	848:59	19	0
LEAF_NODE	848:59	848:59	20	0
LEAF_NODE	848:60	848:60	18	)
REL_OPERATOR	848:62	848:62	17	<
LEAF_NODE	848:62	848:62	18	<
FIELD	848:64	848:64	17	0
LEAF_NODE	848:64	848:64	18	0
LEAF_NODE	848:65	848:65	15	)
STATEMENTS	849:20	849:20	15	
JUMP_STATEMENT	849:20	849:25	16	break DESTINATION ;
KEYWORD	849:20	849:20	17	break
LEAF_NODE	849:20	849:20	18	break
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	849:25	849:25	17	;
LEAF_NODE	850:16	850:16	14	output_p
LEAF_NODE	850:25	850:25	14	=
LEAF_NODE	850:27	850:27	14	&
LEAF_NODE	850:28	850:28	14	imageMemory
LEAF_NODE	850:39	850:39	14	[
LEAF_NODE	850:40	850:40	14	i
LEAF_NODE	850:42	850:42	14	*
LEAF_NODE	850:44	850:44	14	tfBytesPerRow
LEAF_NODE	850:58	850:58	14	*
LEAF_NODE	850:60	850:60	14	2
LEAF_NODE	850:61	850:61	14	]
LEAF_NODE	850:62	850:62	14	;
EXPR_STATEMENT	851:16	851:35	14	input_p = scan_line ;
EXPR	851:16	851:16	15	input_p = scan_line
ASSIGN	851:16	851:26	16	input_p = scan_line
LVAL	851:16	851:16	17	input_p
FIELD	851:16	851:16	18	input_p
LEAF_NODE	851:16	851:16	19	input_p
ASSIGN_OP	851:24	851:24	17	=
LEAF_NODE	851:24	851:24	18	=
RVAL	851:26	851:26	17	scan_line
FIELD	851:26	851:26	18	scan_line
LEAF_NODE	851:26	851:26	19	scan_line
LEAF_NODE	851:35	851:35	15	;
ITERATION	852:16	852:65	14	
KEYWORD	852:16	852:16	15	for
LEAF_NODE	852:16	852:16	16	for
LEAF_NODE	852:20	852:20	15	(
FOR_INIT	852:21	852:26	15	j = 0 ;
EXPR	852:21	852:21	16	j = 0
ASSIGN	852:21	852:25	17	j = 0
LVAL	852:21	852:21	18	j
FIELD	852:21	852:21	19	j
LEAF_NODE	852:21	852:21	20	j
ASSIGN_OP	852:23	852:23	18	=
LEAF_NODE	852:23	852:23	19	=
RVAL	852:25	852:25	18	0
FIELD	852:25	852:25	19	0
LEAF_NODE	852:25	852:25	20	0
LEAF_NODE	852:26	852:26	16	;
CONDITION	852:28	852:28	15	j < tfImageWidth
EXPR	852:28	852:32	16	j < tfImageWidth
FIELD	852:28	852:28	17	j
LEAF_NODE	852:28	852:28	18	j
REL_OPERATOR	852:30	852:30	17	<
LEAF_NODE	852:30	852:30	18	<
FIELD	852:32	852:32	17	tfImageWidth
LEAF_NODE	852:32	852:32	18	tfImageWidth
LEAF_NODE	852:44	852:44	15	;
FOR_EXPR	852:46	852:46	15	j += 4 , input_p ++
EXPR	852:46	852:54	16	j += 4 , input_p ++
ASSIGN	852:46	852:51	17	j += 4
LVAL	852:46	852:46	18	j
FIELD	852:46	852:46	19	j
LEAF_NODE	852:46	852:46	20	j
ASSIGN_OP	852:48	852:48	18	+=
LEAF_NODE	852:48	852:48	19	+=
RVAL	852:51	852:51	18	4
FIELD	852:51	852:51	19	4
LEAF_NODE	852:51	852:51	20	4
LEAF_NODE	852:52	852:52	17	,
FIELD	852:54	852:61	17	input_p ++
LEAF_NODE	852:54	852:54	18	input_p
LEAF_NODE	852:61	852:61	18	++
LEAF_NODE	852:63	852:63	15	)
STATEMENTS	852:65	857:16	15	
LEAF_NODE	852:65	852:65	16	{
STATEMENTS	853:20	855:20	16	
EXPR_STATEMENT	853:20	854:60	17	* output_p ++ = ( ( ( * input_p >> 6 ) << 4 ) | ( ( * input_p >> 4 ) & 3 ) ) + basePixel ;
EXPR	853:20	853:20	18	* output_p ++ = ( ( ( * input_p >> 6 ) << 4 ) | ( ( * input_p >> 4 ) & 3 ) ) + basePixel
ASSIGN	853:20	853:34	19	* output_p ++ = ( ( ( * input_p >> 6 ) << 4 ) | ( ( * input_p >> 4 ) & 3 ) ) + basePixel
LVAL	853:20	853:20	20	* output_p ++
UNARY_EXPR	853:20	853:21	21	* output_p ++
UNARY_OPERATOR	853:20	853:20	22	*
LEAF_NODE	853:20	853:20	23	*
FIELD	853:21	853:29	22	output_p ++
LEAF_NODE	853:21	853:21	23	output_p
LEAF_NODE	853:29	853:29	23	++
ASSIGN_OP	853:32	853:32	20	=
LEAF_NODE	853:32	853:32	21	=
RVAL	853:34	854:51	20	( ( ( * input_p >> 6 ) << 4 ) | ( ( * input_p >> 4 ) & 3 ) ) + basePixel
LEAF_NODE	853:34	853:34	21	(
BIT_OR	853:35	854:26	21	( ( * input_p >> 6 ) << 4 ) | ( ( * input_p >> 4 ) & 3 )
BIT_OR_ELEM	853:35	853:54	22	( ( * input_p >> 6 ) << 4 )
LEAF_NODE	853:35	853:35	23	(
LEAF_NODE	853:36	853:36	23	(
UNARY_EXPR	853:37	853:38	23	* input_p
UNARY_OPERATOR	853:37	853:37	24	*
LEAF_NODE	853:37	853:37	25	*
FIELD	853:38	853:38	24	input_p
LEAF_NODE	853:38	853:38	25	input_p
LEAF_NODE	853:45	853:45	23	>>
FIELD	853:47	853:47	23	6
LEAF_NODE	853:47	853:47	24	6
LEAF_NODE	853:48	853:48	23	)
LEAF_NODE	853:50	853:50	23	<<
FIELD	853:53	853:53	23	4
LEAF_NODE	853:53	853:53	24	4
LEAF_NODE	853:54	853:54	23	)
LEAF_NODE	854:24	854:24	22	|
BIT_OR_ELEM	854:26	854:46	22	( ( * input_p >> 4 ) & 3 )
LEAF_NODE	854:26	854:26	23	(
LEAF_NODE	854:27	854:27	23	(
UNARY_EXPR	854:28	854:29	23	* input_p
UNARY_OPERATOR	854:28	854:28	24	*
LEAF_NODE	854:28	854:28	25	*
FIELD	854:29	854:29	24	input_p
LEAF_NODE	854:29	854:29	25	input_p
LEAF_NODE	854:37	854:37	23	>>
FIELD	854:40	854:40	23	4
LEAF_NODE	854:40	854:40	24	4
LEAF_NODE	854:41	854:41	23	)
LEAF_NODE	854:43	854:43	23	&
FIELD	854:45	854:45	23	3
LEAF_NODE	854:45	854:45	24	3
LEAF_NODE	854:46	854:46	23	)
LEAF_NODE	854:47	854:47	21	)
LEAF_NODE	854:49	854:49	21	+
FIELD	854:51	854:51	21	basePixel
LEAF_NODE	854:51	854:51	22	basePixel
LEAF_NODE	854:60	854:60	18	;
EXPR_STATEMENT	855:20	856:53	17	* output_p ++ = ( ( ( ( * input_p >> 2 ) & 3 ) << 4 ) | ( * input_p & 3 ) ) + basePixel ;
EXPR	855:20	855:20	18	* output_p ++ = ( ( ( ( * input_p >> 2 ) & 3 ) << 4 ) | ( * input_p & 3 ) ) + basePixel
ASSIGN	855:20	855:34	19	* output_p ++ = ( ( ( ( * input_p >> 2 ) & 3 ) << 4 ) | ( * input_p & 3 ) ) + basePixel
LVAL	855:20	855:20	20	* output_p ++
UNARY_EXPR	855:20	855:21	21	* output_p ++
UNARY_OPERATOR	855:20	855:20	22	*
LEAF_NODE	855:20	855:20	23	*
FIELD	855:21	855:29	22	output_p ++
LEAF_NODE	855:21	855:21	23	output_p
LEAF_NODE	855:29	855:29	23	++
ASSIGN_OP	855:32	855:32	20	=
LEAF_NODE	855:32	855:32	21	=
RVAL	855:34	856:44	20	( ( ( ( * input_p >> 2 ) & 3 ) << 4 ) | ( * input_p & 3 ) ) + basePixel
LEAF_NODE	855:34	855:34	21	(
BIT_OR	855:35	856:26	21	( ( ( * input_p >> 2 ) & 3 ) << 4 ) | ( * input_p & 3 )
BIT_OR_ELEM	855:35	855:60	22	( ( ( * input_p >> 2 ) & 3 ) << 4 )
LEAF_NODE	855:35	855:35	23	(
LEAF_NODE	855:36	855:36	23	(
LEAF_NODE	855:37	855:37	23	(
UNARY_EXPR	855:38	855:39	23	* input_p
UNARY_OPERATOR	855:38	855:38	24	*
LEAF_NODE	855:38	855:38	25	*
FIELD	855:39	855:39	24	input_p
LEAF_NODE	855:39	855:39	25	input_p
LEAF_NODE	855:46	855:46	23	>>
FIELD	855:48	855:48	23	2
LEAF_NODE	855:48	855:48	24	2
LEAF_NODE	855:49	855:49	23	)
LEAF_NODE	855:51	855:51	23	&
FIELD	855:53	855:53	23	3
LEAF_NODE	855:53	855:53	24	3
LEAF_NODE	855:54	855:54	23	)
LEAF_NODE	855:56	855:56	23	<<
FIELD	855:59	855:59	23	4
LEAF_NODE	855:59	855:59	24	4
LEAF_NODE	855:60	855:60	23	)
LEAF_NODE	856:24	856:24	22	|
BIT_OR_ELEM	856:26	856:39	22	( * input_p & 3 )
LEAF_NODE	856:26	856:26	23	(
UNARY_EXPR	856:27	856:28	23	* input_p
UNARY_OPERATOR	856:27	856:27	24	*
LEAF_NODE	856:27	856:27	25	*
FIELD	856:28	856:28	24	input_p
LEAF_NODE	856:28	856:28	25	input_p
LEAF_NODE	856:36	856:36	23	&
FIELD	856:38	856:38	23	3
LEAF_NODE	856:38	856:38	24	3
LEAF_NODE	856:39	856:39	23	)
LEAF_NODE	856:40	856:40	21	)
LEAF_NODE	856:42	856:42	21	+
FIELD	856:44	856:44	21	basePixel
LEAF_NODE	856:44	856:44	22	basePixel
LEAF_NODE	856:53	856:53	18	;
LEAF_NODE	857:16	857:16	16	}
LEAF_NODE	858:12	858:12	13	}
LEAF_NODE	859:8	859:8	10	}
SELECTION	859:10	859:15	6	
KEYWORD	859:10	859:10	7	else
LEAF_NODE	859:10	859:10	8	else
STATEMENTS	859:15	864:8	7	
LEAF_NODE	859:15	859:15	8	{
STATEMENTS	860:12	863:12	8	
EXPR_STATEMENT	860:12	862:42	9	fprintf ( stderr , "xtiff: can't handle %d-bit TIFF file on an %d-bit display\n" , tfImageDepth , xImageDepth ) ;
EXPR	860:12	860:12	10	fprintf ( stderr , "xtiff: can't handle %d-bit TIFF file on an %d-bit display\n" , tfImageDepth , xImageDepth )
FUNCTION_CALL	860:12	862:41	11	fprintf ( stderr , "xtiff: can't handle %d-bit TIFF file on an %d-bit display\n" , tfImageDepth , xImageDepth )
CALLEE	860:12	860:12	12	fprintf
LEAF_NODE	860:12	860:12	13	fprintf
LEAF_NODE	860:19	860:19	12	(
ARGUMENT	860:20	860:20	12	stderr
FIELD	860:20	860:20	13	stderr
LEAF_NODE	860:20	860:20	14	stderr
LEAF_NODE	860:26	860:26	12	,
ARGUMENT	861:16	861:16	12	"xtiff: can't handle %d-bit TIFF file on an %d-bit display\n"
FIELD	861:16	861:16	13	"xtiff: can't handle %d-bit TIFF file on an %d-bit display\n"
LEAF_NODE	861:16	861:16	14	"xtiff: can't handle %d-bit TIFF file on an %d-bit display\n"
LEAF_NODE	861:77	861:77	12	,
ARGUMENT	862:16	862:16	12	tfImageDepth
FIELD	862:16	862:16	13	tfImageDepth
LEAF_NODE	862:16	862:16	14	tfImageDepth
LEAF_NODE	862:28	862:28	12	,
ARGUMENT	862:30	862:30	12	xImageDepth
FIELD	862:30	862:30	13	xImageDepth
LEAF_NODE	862:30	862:30	14	xImageDepth
LEAF_NODE	862:41	862:41	12	)
LEAF_NODE	862:42	862:42	10	;
EXPR_STATEMENT	863:12	863:19	9	exit ( 0 ) ;
EXPR	863:12	863:12	10	exit ( 0 )
FUNCTION_CALL	863:12	863:18	11	exit ( 0 )
CALLEE	863:12	863:12	12	exit
LEAF_NODE	863:12	863:12	13	exit
LEAF_NODE	863:16	863:16	12	(
ARGUMENT	863:17	863:17	12	0
FIELD	863:17	863:17	13	0
LEAF_NODE	863:17	863:17	14	0
LEAF_NODE	863:18	863:18	12	)
LEAF_NODE	863:19	863:19	10	;
LEAF_NODE	864:8	864:8	8	}
LEAF_NODE	865:4	865:4	5	}
EXPR_STATEMENT	867:4	867:19	3	free ( scan_line ) ;
EXPR	867:4	867:4	4	free ( scan_line )
FUNCTION_CALL	867:4	867:18	5	free ( scan_line )
CALLEE	867:4	867:4	6	free
LEAF_NODE	867:4	867:4	7	free
LEAF_NODE	867:8	867:8	6	(
ARGUMENT	867:9	867:9	6	scan_line
FIELD	867:9	867:9	7	scan_line
LEAF_NODE	867:9	867:9	8	scan_line
LEAF_NODE	867:18	867:18	6	)
LEAF_NODE	867:19	867:19	4	;
LEAF_NODE	868:0	868:0	2	}
FUNCTION_DEF	870:0	933:0	1	
RETURN_TYPE	870:0	870:0	2	void
TYPE_NAME	870:0	870:0	3	void
LEAF_NODE	870:0	870:0	4	void
FUNCTION_NAME	871:0	871:0	2	CreateXImage
LEAF_NODE	871:0	871:0	3	CreateXImage
PARAMETER_LIST	871:12	871:13	2	( )
LEAF_NODE	871:12	871:12	3	(
LEAF_NODE	871:13	871:13	3	)
LEAF_NODE	872:0	872:0	2	{
STATEMENTS	873:4	910:4	2	
SIMPLE_DECL	873:4	873:23	3	XGCValues gc_values ;
VAR_DECL	873:4	873:14	4	XGCValues gc_values
TYPE	873:4	873:4	5	XGCValues
TYPE_NAME	873:4	873:4	6	XGCValues
LEAF_NODE	873:4	873:4	7	XGCValues
NAME	873:14	873:14	5	gc_values
LEAF_NODE	873:14	873:14	6	gc_values
LEAF_NODE	873:23	873:23	4	;
SIMPLE_DECL	874:4	874:16	3	GC bitmap_gc ;
VAR_DECL	874:4	874:7	4	GC bitmap_gc
TYPE	874:4	874:4	5	GC
TYPE_NAME	874:4	874:4	6	GC
LEAF_NODE	874:4	874:4	7	GC
NAME	874:7	874:7	5	bitmap_gc
LEAF_NODE	874:7	874:7	6	bitmap_gc
LEAF_NODE	874:16	874:16	4	;
EXPR_STATEMENT	876:4	876:25	3	xOffset = yOffset = 0 ;
EXPR	876:4	876:4	4	xOffset = yOffset = 0
ASSIGN	876:4	876:14	5	xOffset = yOffset = 0
LVAL	876:4	876:4	6	xOffset
FIELD	876:4	876:4	7	xOffset
LEAF_NODE	876:4	876:4	8	xOffset
ASSIGN_OP	876:12	876:12	6	=
LEAF_NODE	876:12	876:12	7	=
RVAL	876:14	876:14	6	yOffset = 0
ASSIGN	876:14	876:24	7	yOffset = 0
LVAL	876:14	876:14	8	yOffset
FIELD	876:14	876:14	9	yOffset
LEAF_NODE	876:14	876:14	10	yOffset
ASSIGN_OP	876:22	876:22	8	=
LEAF_NODE	876:22	876:22	9	=
RVAL	876:24	876:24	8	0
FIELD	876:24	876:24	9	0
LEAF_NODE	876:24	876:24	10	0
LEAF_NODE	876:25	876:25	4	;
EXPR_STATEMENT	877:4	877:22	3	grabX = grabY = - 1 ;
EXPR	877:4	877:4	4	grabX = grabY = - 1
ASSIGN	877:4	877:12	5	grabX = grabY = - 1
LVAL	877:4	877:4	6	grabX
FIELD	877:4	877:4	7	grabX
LEAF_NODE	877:4	877:4	8	grabX
ASSIGN_OP	877:10	877:10	6	=
LEAF_NODE	877:10	877:10	7	=
RVAL	877:12	877:12	6	grabY = - 1
ASSIGN	877:12	877:20	7	grabY = - 1
LVAL	877:12	877:12	8	grabY
FIELD	877:12	877:12	9	grabY
LEAF_NODE	877:12	877:12	10	grabY
ASSIGN_OP	877:18	877:18	8	=
LEAF_NODE	877:18	877:18	9	=
RVAL	877:20	877:20	8	- 1
UNARY_EXPR	877:20	877:21	9	- 1
UNARY_OPERATOR	877:20	877:20	10	-
LEAF_NODE	877:20	877:20	11	-
FIELD	877:21	877:21	10	1
LEAF_NODE	877:21	877:21	11	1
LEAF_NODE	877:22	877:22	4	;
EXPR_STATEMENT	879:4	882:51	3	xImage = XCreateImage ( xDisplay , xVisual , xImageDepth , xImageDepth == 1 ? XYBitmap : ZPixmap , 0 , ( char * ) imageMemory , tfImageWidth , tfImageHeight , 8 , 0 ) ;
EXPR	879:4	879:4	4	xImage = XCreateImage ( xDisplay , xVisual , xImageDepth , xImageDepth == 1 ? XYBitmap : ZPixmap , 0 , ( char * ) imageMemory , tfImageWidth , tfImageHeight , 8 , 0 )
ASSIGN	879:4	879:13	5	xImage = XCreateImage ( xDisplay , xVisual , xImageDepth , xImageDepth == 1 ? XYBitmap : ZPixmap , 0 , ( char * ) imageMemory , tfImageWidth , tfImageHeight , 8 , 0 )
LVAL	879:4	879:4	6	xImage
FIELD	879:4	879:4	7	xImage
LEAF_NODE	879:4	879:4	8	xImage
ASSIGN_OP	879:11	879:11	6	=
LEAF_NODE	879:11	879:11	7	=
RVAL	879:13	879:13	6	XCreateImage ( xDisplay , xVisual , xImageDepth , xImageDepth == 1 ? XYBitmap : ZPixmap , 0 , ( char * ) imageMemory , tfImageWidth , tfImageHeight , 8 , 0 )
FUNCTION_CALL	879:13	882:50	7	XCreateImage ( xDisplay , xVisual , xImageDepth , xImageDepth == 1 ? XYBitmap : ZPixmap , 0 , ( char * ) imageMemory , tfImageWidth , tfImageHeight , 8 , 0 )
CALLEE	879:13	879:13	8	XCreateImage
LEAF_NODE	879:13	879:13	9	XCreateImage
LEAF_NODE	879:25	879:25	8	(
ARGUMENT	879:26	879:26	8	xDisplay
FIELD	879:26	879:26	9	xDisplay
LEAF_NODE	879:26	879:26	10	xDisplay
LEAF_NODE	879:34	879:34	8	,
ARGUMENT	879:36	879:36	8	xVisual
FIELD	879:36	879:36	9	xVisual
LEAF_NODE	879:36	879:36	10	xVisual
LEAF_NODE	879:43	879:43	8	,
ARGUMENT	879:45	879:45	8	xImageDepth
FIELD	879:45	879:45	9	xImageDepth
LEAF_NODE	879:45	879:45	10	xImageDepth
LEAF_NODE	879:56	879:56	8	,
ARGUMENT	880:8	880:8	8	xImageDepth == 1 ? XYBitmap : ZPixmap
COND_EXPR	880:8	880:38	9	xImageDepth == 1 ? XYBitmap : ZPixmap
CONDITION	880:8	880:23	10	xImageDepth == 1
FIELD	880:8	880:8	11	xImageDepth
LEAF_NODE	880:8	880:8	12	xImageDepth
EQ_OPERATOR	880:20	880:20	11	==
LEAF_NODE	880:20	880:20	12	==
FIELD	880:23	880:23	11	1
LEAF_NODE	880:23	880:23	12	1
LEAF_NODE	880:25	880:25	10	?
EXPR	880:27	880:27	10	XYBitmap
FIELD	880:27	880:27	11	XYBitmap
LEAF_NODE	880:27	880:27	12	XYBitmap
LEAF_NODE	880:36	880:36	10	:
FIELD	880:38	880:38	10	ZPixmap
LEAF_NODE	880:38	880:38	11	ZPixmap
LEAF_NODE	880:45	880:45	8	,
ARGUMENT	880:60	880:60	8	0
FIELD	880:60	880:60	9	0
LEAF_NODE	880:60	880:60	10	0
LEAF_NODE	880:61	880:61	8	,
ARGUMENT	881:8	881:17	8	( char * ) imageMemory
LEAF_NODE	881:8	881:8	9	(
TYPE_NAME	881:9	881:9	9	char
LEAF_NODE	881:9	881:9	10	char
LEAF_NODE	881:14	881:14	9	*
LEAF_NODE	881:15	881:15	9	)
FIELD	881:17	881:17	9	imageMemory
LEAF_NODE	881:17	881:17	10	imageMemory
LEAF_NODE	881:28	881:28	8	,
ARGUMENT	881:30	881:30	8	tfImageWidth
FIELD	881:30	881:30	9	tfImageWidth
LEAF_NODE	881:30	881:30	10	tfImageWidth
LEAF_NODE	881:42	881:42	8	,
ARGUMENT	881:44	881:44	8	tfImageHeight
FIELD	881:44	881:44	9	tfImageHeight
LEAF_NODE	881:44	881:44	10	tfImageHeight
LEAF_NODE	881:57	881:57	8	,
ARGUMENT	882:25	882:25	8	8
FIELD	882:25	882:25	9	8
LEAF_NODE	882:25	882:25	10	8
LEAF_NODE	882:26	882:26	8	,
ARGUMENT	882:49	882:49	8	0
FIELD	882:49	882:49	9	0
LEAF_NODE	882:49	882:49	10	0
LEAF_NODE	882:50	882:50	8	)
LEAF_NODE	882:51	882:51	4	;
SELECTION	887:4	888:8	3	
KEYWORD	887:4	887:4	4	if
LEAF_NODE	887:4	887:4	5	if
LEAF_NODE	887:7	887:7	4	(
CONDITION	887:8	887:8	4	xImageDepth == 1
EXPR	887:8	887:23	5	xImageDepth == 1
FIELD	887:8	887:8	6	xImageDepth
LEAF_NODE	887:8	887:8	7	xImageDepth
EQ_OPERATOR	887:20	887:20	6	==
LEAF_NODE	887:20	887:20	7	==
FIELD	887:23	887:23	6	1
LEAF_NODE	887:23	887:23	7	1
LEAF_NODE	887:24	887:24	4	)
STATEMENTS	888:8	888:8	4	
EXPR_STATEMENT	888:8	888:43	5	xImage -> bitmap_bit_order = MSBFirst ;
EXPR	888:8	888:8	6	xImage -> bitmap_bit_order = MSBFirst
ASSIGN	888:8	888:35	7	xImage -> bitmap_bit_order = MSBFirst
LVAL	888:8	888:8	8	xImage -> bitmap_bit_order
FIELD	888:8	888:16	9	xImage -> bitmap_bit_order
LEAF_NODE	888:8	888:8	10	xImage
LEAF_NODE	888:14	888:14	10	->
LEAF_NODE	888:16	888:16	10	bitmap_bit_order
ASSIGN_OP	888:33	888:33	8	=
LEAF_NODE	888:33	888:33	9	=
RVAL	888:35	888:35	8	MSBFirst
FIELD	888:35	888:35	9	MSBFirst
LEAF_NODE	888:35	888:35	10	MSBFirst
LEAF_NODE	888:43	888:43	6	;
SELECTION	889:4	890:8	3	
KEYWORD	889:4	889:4	4	if
LEAF_NODE	889:4	889:4	5	if
LEAF_NODE	889:7	889:7	4	(
CONDITION	889:8	889:8	4	xImageDepth <= 8
EXPR	889:8	889:23	5	xImageDepth <= 8
FIELD	889:8	889:8	6	xImageDepth
LEAF_NODE	889:8	889:8	7	xImageDepth
REL_OPERATOR	889:20	889:20	6	<=
LEAF_NODE	889:20	889:20	7	<=
FIELD	889:23	889:23	6	8
LEAF_NODE	889:23	889:23	7	8
LEAF_NODE	889:24	889:24	4	)
STATEMENTS	890:8	890:8	4	
EXPR_STATEMENT	890:8	890:37	5	xImage -> byte_order = MSBFirst ;
EXPR	890:8	890:8	6	xImage -> byte_order = MSBFirst
ASSIGN	890:8	890:29	7	xImage -> byte_order = MSBFirst
LVAL	890:8	890:8	8	xImage -> byte_order
FIELD	890:8	890:16	9	xImage -> byte_order
LEAF_NODE	890:8	890:8	10	xImage
LEAF_NODE	890:14	890:14	10	->
LEAF_NODE	890:16	890:16	10	byte_order
ASSIGN_OP	890:27	890:27	8	=
LEAF_NODE	890:27	890:27	9	=
RVAL	890:29	890:29	8	MSBFirst
FIELD	890:29	890:29	9	MSBFirst
LEAF_NODE	890:29	890:29	10	MSBFirst
LEAF_NODE	890:37	890:37	6	;
EXPR_STATEMENT	895:4	895:31	3	gc_values . function = GXcopy ;
EXPR	895:4	895:4	4	gc_values . function = GXcopy
ASSIGN	895:4	895:25	5	gc_values . function = GXcopy
LVAL	895:4	895:4	6	gc_values . function
FIELD	895:4	895:14	7	gc_values . function
LEAF_NODE	895:4	895:4	8	gc_values
LEAF_NODE	895:13	895:13	8	.
LEAF_NODE	895:14	895:14	8	function
ASSIGN_OP	895:23	895:23	6	=
LEAF_NODE	895:23	895:23	7	=
RVAL	895:25	895:25	6	GXcopy
FIELD	895:25	895:25	7	GXcopy
LEAF_NODE	895:25	895:25	8	GXcopy
LEAF_NODE	895:31	895:31	4	;
EXPR_STATEMENT	896:4	896:36	3	gc_values . plane_mask = AllPlanes ;
EXPR	896:4	896:4	4	gc_values . plane_mask = AllPlanes
ASSIGN	896:4	896:27	5	gc_values . plane_mask = AllPlanes
LVAL	896:4	896:4	6	gc_values . plane_mask
FIELD	896:4	896:14	7	gc_values . plane_mask
LEAF_NODE	896:4	896:4	8	gc_values
LEAF_NODE	896:13	896:13	8	.
LEAF_NODE	896:14	896:14	8	plane_mask
ASSIGN_OP	896:25	896:25	6	=
LEAF_NODE	896:25	896:25	7	=
RVAL	896:27	896:27	6	AllPlanes
FIELD	896:27	896:27	7	AllPlanes
LEAF_NODE	896:27	896:27	8	AllPlanes
LEAF_NODE	896:36	896:36	4	;
SELECTION	897:4	897:63	3	
KEYWORD	897:4	897:4	4	if
LEAF_NODE	897:4	897:4	5	if
LEAF_NODE	897:7	897:7	4	(
CONDITION	897:8	897:8	4	tfPhotometricInterpretation == PHOTOMETRIC_MINISBLACK
EXPR	897:8	897:39	5	tfPhotometricInterpretation == PHOTOMETRIC_MINISBLACK
FIELD	897:8	897:8	6	tfPhotometricInterpretation
LEAF_NODE	897:8	897:8	7	tfPhotometricInterpretation
EQ_OPERATOR	897:36	897:36	6	==
LEAF_NODE	897:36	897:36	7	==
FIELD	897:39	897:39	6	PHOTOMETRIC_MINISBLACK
LEAF_NODE	897:39	897:39	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	897:61	897:61	4	)
STATEMENTS	897:63	900:4	4	
LEAF_NODE	897:63	897:63	5	{
STATEMENTS	898:8	899:8	5	
EXPR_STATEMENT	898:8	898:61	6	gc_values . foreground = XWhitePixel ( xDisplay , xScreen ) ;
EXPR	898:8	898:8	7	gc_values . foreground = XWhitePixel ( xDisplay , xScreen )
ASSIGN	898:8	898:31	8	gc_values . foreground = XWhitePixel ( xDisplay , xScreen )
LVAL	898:8	898:8	9	gc_values . foreground
FIELD	898:8	898:18	10	gc_values . foreground
LEAF_NODE	898:8	898:8	11	gc_values
LEAF_NODE	898:17	898:17	11	.
LEAF_NODE	898:18	898:18	11	foreground
ASSIGN_OP	898:29	898:29	9	=
LEAF_NODE	898:29	898:29	10	=
RVAL	898:31	898:31	9	XWhitePixel ( xDisplay , xScreen )
FUNCTION_CALL	898:31	898:60	10	XWhitePixel ( xDisplay , xScreen )
CALLEE	898:31	898:31	11	XWhitePixel
LEAF_NODE	898:31	898:31	12	XWhitePixel
LEAF_NODE	898:42	898:42	11	(
ARGUMENT	898:43	898:43	11	xDisplay
FIELD	898:43	898:43	12	xDisplay
LEAF_NODE	898:43	898:43	13	xDisplay
LEAF_NODE	898:51	898:51	11	,
ARGUMENT	898:53	898:53	11	xScreen
FIELD	898:53	898:53	12	xScreen
LEAF_NODE	898:53	898:53	13	xScreen
LEAF_NODE	898:60	898:60	11	)
LEAF_NODE	898:61	898:61	7	;
EXPR_STATEMENT	899:8	899:61	6	gc_values . background = XBlackPixel ( xDisplay , xScreen ) ;
EXPR	899:8	899:8	7	gc_values . background = XBlackPixel ( xDisplay , xScreen )
ASSIGN	899:8	899:31	8	gc_values . background = XBlackPixel ( xDisplay , xScreen )
LVAL	899:8	899:8	9	gc_values . background
FIELD	899:8	899:18	10	gc_values . background
LEAF_NODE	899:8	899:8	11	gc_values
LEAF_NODE	899:17	899:17	11	.
LEAF_NODE	899:18	899:18	11	background
ASSIGN_OP	899:29	899:29	9	=
LEAF_NODE	899:29	899:29	10	=
RVAL	899:31	899:31	9	XBlackPixel ( xDisplay , xScreen )
FUNCTION_CALL	899:31	899:60	10	XBlackPixel ( xDisplay , xScreen )
CALLEE	899:31	899:31	11	XBlackPixel
LEAF_NODE	899:31	899:31	12	XBlackPixel
LEAF_NODE	899:42	899:42	11	(
ARGUMENT	899:43	899:43	11	xDisplay
FIELD	899:43	899:43	12	xDisplay
LEAF_NODE	899:43	899:43	13	xDisplay
LEAF_NODE	899:51	899:51	11	,
ARGUMENT	899:53	899:53	11	xScreen
FIELD	899:53	899:53	12	xScreen
LEAF_NODE	899:53	899:53	13	xScreen
LEAF_NODE	899:60	899:60	11	)
LEAF_NODE	899:61	899:61	7	;
LEAF_NODE	900:4	900:4	5	}
SELECTION	900:6	900:11	3	
KEYWORD	900:6	900:6	4	else
LEAF_NODE	900:6	900:6	5	else
STATEMENTS	900:11	903:4	4	
LEAF_NODE	900:11	900:11	5	{
STATEMENTS	901:8	902:8	5	
EXPR_STATEMENT	901:8	901:61	6	gc_values . foreground = XBlackPixel ( xDisplay , xScreen ) ;
EXPR	901:8	901:8	7	gc_values . foreground = XBlackPixel ( xDisplay , xScreen )
ASSIGN	901:8	901:31	8	gc_values . foreground = XBlackPixel ( xDisplay , xScreen )
LVAL	901:8	901:8	9	gc_values . foreground
FIELD	901:8	901:18	10	gc_values . foreground
LEAF_NODE	901:8	901:8	11	gc_values
LEAF_NODE	901:17	901:17	11	.
LEAF_NODE	901:18	901:18	11	foreground
ASSIGN_OP	901:29	901:29	9	=
LEAF_NODE	901:29	901:29	10	=
RVAL	901:31	901:31	9	XBlackPixel ( xDisplay , xScreen )
FUNCTION_CALL	901:31	901:60	10	XBlackPixel ( xDisplay , xScreen )
CALLEE	901:31	901:31	11	XBlackPixel
LEAF_NODE	901:31	901:31	12	XBlackPixel
LEAF_NODE	901:42	901:42	11	(
ARGUMENT	901:43	901:43	11	xDisplay
FIELD	901:43	901:43	12	xDisplay
LEAF_NODE	901:43	901:43	13	xDisplay
LEAF_NODE	901:51	901:51	11	,
ARGUMENT	901:53	901:53	11	xScreen
FIELD	901:53	901:53	12	xScreen
LEAF_NODE	901:53	901:53	13	xScreen
LEAF_NODE	901:60	901:60	11	)
LEAF_NODE	901:61	901:61	7	;
EXPR_STATEMENT	902:8	902:61	6	gc_values . background = XWhitePixel ( xDisplay , xScreen ) ;
EXPR	902:8	902:8	7	gc_values . background = XWhitePixel ( xDisplay , xScreen )
ASSIGN	902:8	902:31	8	gc_values . background = XWhitePixel ( xDisplay , xScreen )
LVAL	902:8	902:8	9	gc_values . background
FIELD	902:8	902:18	10	gc_values . background
LEAF_NODE	902:8	902:8	11	gc_values
LEAF_NODE	902:17	902:17	11	.
LEAF_NODE	902:18	902:18	11	background
ASSIGN_OP	902:29	902:29	9	=
LEAF_NODE	902:29	902:29	10	=
RVAL	902:31	902:31	9	XWhitePixel ( xDisplay , xScreen )
FUNCTION_CALL	902:31	902:60	10	XWhitePixel ( xDisplay , xScreen )
CALLEE	902:31	902:31	11	XWhitePixel
LEAF_NODE	902:31	902:31	12	XWhitePixel
LEAF_NODE	902:42	902:42	11	(
ARGUMENT	902:43	902:43	11	xDisplay
FIELD	902:43	902:43	12	xDisplay
LEAF_NODE	902:43	902:43	13	xDisplay
LEAF_NODE	902:51	902:51	11	,
ARGUMENT	902:53	902:53	11	xScreen
FIELD	902:53	902:53	12	xScreen
LEAF_NODE	902:53	902:53	13	xScreen
LEAF_NODE	902:60	902:60	11	)
LEAF_NODE	902:61	902:61	7	;
LEAF_NODE	903:4	903:4	5	}
EXPR_STATEMENT	904:4	905:75	3	xWinGc = XCreateGC ( xDisplay , XtWindow ( shellWidget ) , GCFunction | GCPlaneMask | GCForeground | GCBackground , & gc_values ) ;
EXPR	904:4	904:4	4	xWinGc = XCreateGC ( xDisplay , XtWindow ( shellWidget ) , GCFunction | GCPlaneMask | GCForeground | GCBackground , & gc_values )
ASSIGN	904:4	904:13	5	xWinGc = XCreateGC ( xDisplay , XtWindow ( shellWidget ) , GCFunction | GCPlaneMask | GCForeground | GCBackground , & gc_values )
LVAL	904:4	904:4	6	xWinGc
FIELD	904:4	904:4	7	xWinGc
LEAF_NODE	904:4	904:4	8	xWinGc
ASSIGN_OP	904:11	904:11	6	=
LEAF_NODE	904:11	904:11	7	=
RVAL	904:13	904:13	6	XCreateGC ( xDisplay , XtWindow ( shellWidget ) , GCFunction | GCPlaneMask | GCForeground | GCBackground , & gc_values )
FUNCTION_CALL	904:13	905:74	7	XCreateGC ( xDisplay , XtWindow ( shellWidget ) , GCFunction | GCPlaneMask | GCForeground | GCBackground , & gc_values )
CALLEE	904:13	904:13	8	XCreateGC
LEAF_NODE	904:13	904:13	9	XCreateGC
LEAF_NODE	904:22	904:22	8	(
ARGUMENT	904:23	904:23	8	xDisplay
FIELD	904:23	904:23	9	xDisplay
LEAF_NODE	904:23	904:23	10	xDisplay
LEAF_NODE	904:31	904:31	8	,
ARGUMENT	904:33	904:33	8	XtWindow ( shellWidget )
FUNCTION_CALL	904:33	904:53	9	XtWindow ( shellWidget )
CALLEE	904:33	904:33	10	XtWindow
LEAF_NODE	904:33	904:33	11	XtWindow
LEAF_NODE	904:41	904:41	10	(
ARGUMENT	904:42	904:42	10	shellWidget
FIELD	904:42	904:42	11	shellWidget
LEAF_NODE	904:42	904:42	12	shellWidget
LEAF_NODE	904:53	904:53	10	)
LEAF_NODE	904:54	904:54	8	,
ARGUMENT	905:8	905:8	8	GCFunction | GCPlaneMask | GCForeground | GCBackground
BIT_OR	905:8	905:21	9	GCFunction | GCPlaneMask | GCForeground | GCBackground
BIT_OR_ELEM	905:8	905:8	10	GCFunction
FIELD	905:8	905:8	11	GCFunction
LEAF_NODE	905:8	905:8	12	GCFunction
LEAF_NODE	905:19	905:19	10	|
BIT_OR_ELEM	905:21	905:21	10	GCPlaneMask | GCForeground | GCBackground
BIT_OR	905:21	905:35	11	GCPlaneMask | GCForeground | GCBackground
BIT_OR_ELEM	905:21	905:21	12	GCPlaneMask
FIELD	905:21	905:21	13	GCPlaneMask
LEAF_NODE	905:21	905:21	14	GCPlaneMask
LEAF_NODE	905:33	905:33	12	|
BIT_OR_ELEM	905:35	905:35	12	GCForeground | GCBackground
BIT_OR	905:35	905:50	13	GCForeground | GCBackground
BIT_OR_ELEM	905:35	905:35	14	GCForeground
FIELD	905:35	905:35	15	GCForeground
LEAF_NODE	905:35	905:35	16	GCForeground
LEAF_NODE	905:48	905:48	14	|
BIT_OR_ELEM	905:50	905:50	14	GCBackground
FIELD	905:50	905:50	15	GCBackground
LEAF_NODE	905:50	905:50	16	GCBackground
LEAF_NODE	905:62	905:62	8	,
ARGUMENT	905:64	905:64	8	& gc_values
UNARY_EXPR	905:64	905:65	9	& gc_values
UNARY_OPERATOR	905:64	905:64	10	&
LEAF_NODE	905:64	905:64	11	&
FIELD	905:65	905:65	10	gc_values
LEAF_NODE	905:65	905:65	11	gc_values
LEAF_NODE	905:74	905:74	8	)
LEAF_NODE	905:75	905:75	4	;
SELECTION	910:4	910:35	3	
KEYWORD	910:4	910:4	4	if
LEAF_NODE	910:4	910:4	5	if
LEAF_NODE	910:7	910:7	4	(
CONDITION	910:8	910:8	4	appData . usePixmap == True
EXPR	910:8	910:29	5	appData . usePixmap == True
FIELD	910:8	910:16	6	appData . usePixmap
LEAF_NODE	910:8	910:8	7	appData
LEAF_NODE	910:15	910:15	7	.
LEAF_NODE	910:16	910:16	7	usePixmap
EQ_OPERATOR	910:26	910:26	6	==
LEAF_NODE	910:26	910:26	7	==
FIELD	910:29	910:29	6	True
LEAF_NODE	910:29	910:29	7	True
LEAF_NODE	910:33	910:33	4	)
STATEMENTS	910:35	932:4	4	
LEAF_NODE	910:35	910:35	5	{
STATEMENTS	911:8	931:8	5	
EXPR_STATEMENT	911:8	912:55	6	xImagePixmap = XCreatePixmap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xImage -> width , xImage -> height , xImageDepth ) ;
EXPR	911:8	911:8	7	xImagePixmap = XCreatePixmap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xImage -> width , xImage -> height , xImageDepth )
ASSIGN	911:8	911:23	8	xImagePixmap = XCreatePixmap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xImage -> width , xImage -> height , xImageDepth )
LVAL	911:8	911:8	9	xImagePixmap
FIELD	911:8	911:8	10	xImagePixmap
LEAF_NODE	911:8	911:8	11	xImagePixmap
ASSIGN_OP	911:21	911:21	9	=
LEAF_NODE	911:21	911:21	10	=
RVAL	911:23	911:23	9	XCreatePixmap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xImage -> width , xImage -> height , xImageDepth )
FUNCTION_CALL	911:23	912:54	10	XCreatePixmap ( xDisplay , RootWindow ( xDisplay , xScreen ) , xImage -> width , xImage -> height , xImageDepth )
CALLEE	911:23	911:23	11	XCreatePixmap
LEAF_NODE	911:23	911:23	12	XCreatePixmap
LEAF_NODE	911:36	911:36	11	(
ARGUMENT	911:37	911:37	11	xDisplay
FIELD	911:37	911:37	12	xDisplay
LEAF_NODE	911:37	911:37	13	xDisplay
LEAF_NODE	911:45	911:45	11	,
ARGUMENT	911:47	911:47	11	RootWindow ( xDisplay , xScreen )
FUNCTION_CALL	911:47	911:75	12	RootWindow ( xDisplay , xScreen )
CALLEE	911:47	911:47	13	RootWindow
LEAF_NODE	911:47	911:47	14	RootWindow
LEAF_NODE	911:57	911:57	13	(
ARGUMENT	911:58	911:58	13	xDisplay
FIELD	911:58	911:58	14	xDisplay
LEAF_NODE	911:58	911:58	15	xDisplay
LEAF_NODE	911:66	911:66	13	,
ARGUMENT	911:68	911:68	13	xScreen
FIELD	911:68	911:68	14	xScreen
LEAF_NODE	911:68	911:68	15	xScreen
LEAF_NODE	911:75	911:75	13	)
LEAF_NODE	911:76	911:76	11	,
ARGUMENT	912:12	912:12	11	xImage -> width
FIELD	912:12	912:20	12	xImage -> width
LEAF_NODE	912:12	912:12	13	xImage
LEAF_NODE	912:18	912:18	13	->
LEAF_NODE	912:20	912:20	13	width
LEAF_NODE	912:25	912:25	11	,
ARGUMENT	912:27	912:27	11	xImage -> height
FIELD	912:27	912:35	12	xImage -> height
LEAF_NODE	912:27	912:27	13	xImage
LEAF_NODE	912:33	912:33	13	->
LEAF_NODE	912:35	912:35	13	height
LEAF_NODE	912:41	912:41	11	,
ARGUMENT	912:43	912:43	11	xImageDepth
FIELD	912:43	912:43	12	xImageDepth
LEAF_NODE	912:43	912:43	13	xImageDepth
LEAF_NODE	912:54	912:54	11	)
LEAF_NODE	912:55	912:55	7	;
SELECTION	920:8	920:30	6	
KEYWORD	920:8	920:8	7	if
LEAF_NODE	920:8	920:8	8	if
LEAF_NODE	920:11	920:11	7	(
CONDITION	920:12	920:12	7	xImageDepth == 1
EXPR	920:12	920:27	8	xImageDepth == 1
FIELD	920:12	920:12	9	xImageDepth
LEAF_NODE	920:12	920:12	10	xImageDepth
EQ_OPERATOR	920:24	920:24	9	==
LEAF_NODE	920:24	920:24	10	==
FIELD	920:27	920:27	9	1
LEAF_NODE	920:27	920:27	10	1
LEAF_NODE	920:28	920:28	7	)
STATEMENTS	920:30	927:8	7	
LEAF_NODE	920:30	920:30	8	{
STATEMENTS	921:12	925:12	8	
EXPR_STATEMENT	921:12	921:36	9	gc_values . foreground = 1 ;
EXPR	921:12	921:12	10	gc_values . foreground = 1
ASSIGN	921:12	921:35	11	gc_values . foreground = 1
LVAL	921:12	921:12	12	gc_values . foreground
FIELD	921:12	921:22	13	gc_values . foreground
LEAF_NODE	921:12	921:12	14	gc_values
LEAF_NODE	921:21	921:21	14	.
LEAF_NODE	921:22	921:22	14	foreground
ASSIGN_OP	921:33	921:33	12	=
LEAF_NODE	921:33	921:33	13	=
RVAL	921:35	921:35	12	1
FIELD	921:35	921:35	13	1
LEAF_NODE	921:35	921:35	14	1
LEAF_NODE	921:36	921:36	10	;
EXPR_STATEMENT	922:12	922:36	9	gc_values . background = 0 ;
EXPR	922:12	922:12	10	gc_values . background = 0
ASSIGN	922:12	922:35	11	gc_values . background = 0
LVAL	922:12	922:12	12	gc_values . background
FIELD	922:12	922:22	13	gc_values . background
LEAF_NODE	922:12	922:12	14	gc_values
LEAF_NODE	922:21	922:21	14	.
LEAF_NODE	922:22	922:22	14	background
ASSIGN_OP	922:33	922:33	12	=
LEAF_NODE	922:33	922:33	13	=
RVAL	922:35	922:35	12	0
FIELD	922:35	922:35	13	0
LEAF_NODE	922:35	922:35	14	0
LEAF_NODE	922:36	922:36	10	;
EXPR_STATEMENT	923:12	924:56	9	bitmap_gc = XCreateGC ( xDisplay , xImagePixmap , GCForeground | GCBackground , & gc_values ) ;
EXPR	923:12	923:12	10	bitmap_gc = XCreateGC ( xDisplay , xImagePixmap , GCForeground | GCBackground , & gc_values )
ASSIGN	923:12	923:24	11	bitmap_gc = XCreateGC ( xDisplay , xImagePixmap , GCForeground | GCBackground , & gc_values )
LVAL	923:12	923:12	12	bitmap_gc
FIELD	923:12	923:12	13	bitmap_gc
LEAF_NODE	923:12	923:12	14	bitmap_gc
ASSIGN_OP	923:22	923:22	12	=
LEAF_NODE	923:22	923:22	13	=
RVAL	923:24	923:24	12	XCreateGC ( xDisplay , xImagePixmap , GCForeground | GCBackground , & gc_values )
FUNCTION_CALL	923:24	924:55	13	XCreateGC ( xDisplay , xImagePixmap , GCForeground | GCBackground , & gc_values )
CALLEE	923:24	923:24	14	XCreateGC
LEAF_NODE	923:24	923:24	15	XCreateGC
LEAF_NODE	923:33	923:33	14	(
ARGUMENT	923:34	923:34	14	xDisplay
FIELD	923:34	923:34	15	xDisplay
LEAF_NODE	923:34	923:34	16	xDisplay
LEAF_NODE	923:42	923:42	14	,
ARGUMENT	923:44	923:44	14	xImagePixmap
FIELD	923:44	923:44	15	xImagePixmap
LEAF_NODE	923:44	923:44	16	xImagePixmap
LEAF_NODE	923:56	923:56	14	,
ARGUMENT	924:16	924:16	14	GCForeground | GCBackground
BIT_OR	924:16	924:31	15	GCForeground | GCBackground
BIT_OR_ELEM	924:16	924:16	16	GCForeground
FIELD	924:16	924:16	17	GCForeground
LEAF_NODE	924:16	924:16	18	GCForeground
LEAF_NODE	924:29	924:29	16	|
BIT_OR_ELEM	924:31	924:31	16	GCBackground
FIELD	924:31	924:31	17	GCBackground
LEAF_NODE	924:31	924:31	18	GCBackground
LEAF_NODE	924:43	924:43	14	,
ARGUMENT	924:45	924:45	14	& gc_values
UNARY_EXPR	924:45	924:46	15	& gc_values
UNARY_OPERATOR	924:45	924:45	16	&
LEAF_NODE	924:45	924:45	17	&
FIELD	924:46	924:46	16	gc_values
LEAF_NODE	924:46	924:46	17	gc_values
LEAF_NODE	924:55	924:55	14	)
LEAF_NODE	924:56	924:56	10	;
EXPR_STATEMENT	925:12	926:58	9	XPutImage ( xDisplay , xImagePixmap , bitmap_gc , xImage , 0 , 0 , 0 , 0 , xImage -> width , xImage -> height ) ;
EXPR	925:12	925:12	10	XPutImage ( xDisplay , xImagePixmap , bitmap_gc , xImage , 0 , 0 , 0 , 0 , xImage -> width , xImage -> height )
FUNCTION_CALL	925:12	926:57	11	XPutImage ( xDisplay , xImagePixmap , bitmap_gc , xImage , 0 , 0 , 0 , 0 , xImage -> width , xImage -> height )
CALLEE	925:12	925:12	12	XPutImage
LEAF_NODE	925:12	925:12	13	XPutImage
LEAF_NODE	925:21	925:21	12	(
ARGUMENT	925:22	925:22	12	xDisplay
FIELD	925:22	925:22	13	xDisplay
LEAF_NODE	925:22	925:22	14	xDisplay
LEAF_NODE	925:30	925:30	12	,
ARGUMENT	925:32	925:32	12	xImagePixmap
FIELD	925:32	925:32	13	xImagePixmap
LEAF_NODE	925:32	925:32	14	xImagePixmap
LEAF_NODE	925:44	925:44	12	,
ARGUMENT	925:46	925:46	12	bitmap_gc
FIELD	925:46	925:46	13	bitmap_gc
LEAF_NODE	925:46	925:46	14	bitmap_gc
LEAF_NODE	925:55	925:55	12	,
ARGUMENT	925:57	925:57	12	xImage
FIELD	925:57	925:57	13	xImage
LEAF_NODE	925:57	925:57	14	xImage
LEAF_NODE	925:63	925:63	12	,
ARGUMENT	926:16	926:16	12	0
FIELD	926:16	926:16	13	0
LEAF_NODE	926:16	926:16	14	0
LEAF_NODE	926:17	926:17	12	,
ARGUMENT	926:19	926:19	12	0
FIELD	926:19	926:19	13	0
LEAF_NODE	926:19	926:19	14	0
LEAF_NODE	926:20	926:20	12	,
ARGUMENT	926:22	926:22	12	0
FIELD	926:22	926:22	13	0
LEAF_NODE	926:22	926:22	14	0
LEAF_NODE	926:23	926:23	12	,
ARGUMENT	926:25	926:25	12	0
FIELD	926:25	926:25	13	0
LEAF_NODE	926:25	926:25	14	0
LEAF_NODE	926:26	926:26	12	,
ARGUMENT	926:28	926:28	12	xImage -> width
FIELD	926:28	926:36	13	xImage -> width
LEAF_NODE	926:28	926:28	14	xImage
LEAF_NODE	926:34	926:34	14	->
LEAF_NODE	926:36	926:36	14	width
LEAF_NODE	926:41	926:41	12	,
ARGUMENT	926:43	926:43	12	xImage -> height
FIELD	926:43	926:51	13	xImage -> height
LEAF_NODE	926:43	926:43	14	xImage
LEAF_NODE	926:49	926:49	14	->
LEAF_NODE	926:51	926:51	14	height
LEAF_NODE	926:57	926:57	12	)
LEAF_NODE	926:58	926:58	10	;
LEAF_NODE	927:8	927:8	8	}
SELECTION	927:10	928:12	6	
KEYWORD	927:10	927:10	7	else
LEAF_NODE	927:10	927:10	8	else
STATEMENTS	928:12	928:12	7	
EXPR_STATEMENT	928:12	929:58	8	XPutImage ( xDisplay , xImagePixmap , xWinGc , xImage , 0 , 0 , 0 , 0 , xImage -> width , xImage -> height ) ;
EXPR	928:12	928:12	9	XPutImage ( xDisplay , xImagePixmap , xWinGc , xImage , 0 , 0 , 0 , 0 , xImage -> width , xImage -> height )
FUNCTION_CALL	928:12	929:57	10	XPutImage ( xDisplay , xImagePixmap , xWinGc , xImage , 0 , 0 , 0 , 0 , xImage -> width , xImage -> height )
CALLEE	928:12	928:12	11	XPutImage
LEAF_NODE	928:12	928:12	12	XPutImage
LEAF_NODE	928:21	928:21	11	(
ARGUMENT	928:22	928:22	11	xDisplay
FIELD	928:22	928:22	12	xDisplay
LEAF_NODE	928:22	928:22	13	xDisplay
LEAF_NODE	928:30	928:30	11	,
ARGUMENT	928:32	928:32	11	xImagePixmap
FIELD	928:32	928:32	12	xImagePixmap
LEAF_NODE	928:32	928:32	13	xImagePixmap
LEAF_NODE	928:44	928:44	11	,
ARGUMENT	928:46	928:46	11	xWinGc
FIELD	928:46	928:46	12	xWinGc
LEAF_NODE	928:46	928:46	13	xWinGc
LEAF_NODE	928:52	928:52	11	,
ARGUMENT	928:54	928:54	11	xImage
FIELD	928:54	928:54	12	xImage
LEAF_NODE	928:54	928:54	13	xImage
LEAF_NODE	928:60	928:60	11	,
ARGUMENT	929:16	929:16	11	0
FIELD	929:16	929:16	12	0
LEAF_NODE	929:16	929:16	13	0
LEAF_NODE	929:17	929:17	11	,
ARGUMENT	929:19	929:19	11	0
FIELD	929:19	929:19	12	0
LEAF_NODE	929:19	929:19	13	0
LEAF_NODE	929:20	929:20	11	,
ARGUMENT	929:22	929:22	11	0
FIELD	929:22	929:22	12	0
LEAF_NODE	929:22	929:22	13	0
LEAF_NODE	929:23	929:23	11	,
ARGUMENT	929:25	929:25	11	0
FIELD	929:25	929:25	12	0
LEAF_NODE	929:25	929:25	13	0
LEAF_NODE	929:26	929:26	11	,
ARGUMENT	929:28	929:28	11	xImage -> width
FIELD	929:28	929:36	12	xImage -> width
LEAF_NODE	929:28	929:28	13	xImage
LEAF_NODE	929:34	929:34	13	->
LEAF_NODE	929:36	929:36	13	width
LEAF_NODE	929:41	929:41	11	,
ARGUMENT	929:43	929:43	11	xImage -> height
FIELD	929:43	929:51	12	xImage -> height
LEAF_NODE	929:43	929:43	13	xImage
LEAF_NODE	929:49	929:49	13	->
LEAF_NODE	929:51	929:51	13	height
LEAF_NODE	929:57	929:57	11	)
LEAF_NODE	929:58	929:58	9	;
EXPR_STATEMENT	930:8	930:29	6	XDestroyImage ( xImage ) ;
EXPR	930:8	930:8	7	XDestroyImage ( xImage )
FUNCTION_CALL	930:8	930:28	8	XDestroyImage ( xImage )
CALLEE	930:8	930:8	9	XDestroyImage
LEAF_NODE	930:8	930:8	10	XDestroyImage
LEAF_NODE	930:21	930:21	9	(
ARGUMENT	930:22	930:22	9	xImage
FIELD	930:22	930:22	10	xImage
LEAF_NODE	930:22	930:22	11	xImage
LEAF_NODE	930:28	930:28	9	)
LEAF_NODE	930:29	930:29	7	;
EXPR_STATEMENT	931:8	931:25	6	free ( imageMemory ) ;
EXPR	931:8	931:8	7	free ( imageMemory )
FUNCTION_CALL	931:8	931:24	8	free ( imageMemory )
CALLEE	931:8	931:8	9	free
LEAF_NODE	931:8	931:8	10	free
LEAF_NODE	931:12	931:12	9	(
ARGUMENT	931:13	931:13	9	imageMemory
FIELD	931:13	931:13	10	imageMemory
LEAF_NODE	931:13	931:13	11	imageMemory
LEAF_NODE	931:24	931:24	9	)
LEAF_NODE	931:25	931:25	7	;
LEAF_NODE	932:4	932:4	5	}
LEAF_NODE	933:0	933:0	2	}
SIMPLE_DECL	937:4	937:12	1	Widget w ;
VAR_DECL	937:4	937:11	2	Widget w
TYPE	937:4	937:4	3	Widget
TYPE_NAME	937:4	937:4	4	Widget
LEAF_NODE	937:4	937:4	5	Widget
NAME	937:11	937:11	3	w
LEAF_NODE	937:11	937:11	4	w
LEAF_NODE	937:12	937:12	2	;
SIMPLE_DECL	938:4	938:20	1	caddr_t unused_1 ;
VAR_DECL	938:4	938:12	2	caddr_t unused_1
TYPE	938:4	938:4	3	caddr_t
TYPE_NAME	938:4	938:4	4	caddr_t
LEAF_NODE	938:4	938:4	5	caddr_t
NAME	938:12	938:12	3	unused_1
LEAF_NODE	938:12	938:12	4	unused_1
LEAF_NODE	938:20	938:20	2	;
SIMPLE_DECL	939:4	939:20	1	caddr_t unused_2 ;
VAR_DECL	939:4	939:12	2	caddr_t unused_2
TYPE	939:4	939:4	3	caddr_t
TYPE_NAME	939:4	939:4	4	caddr_t
LEAF_NODE	939:4	939:4	5	caddr_t
NAME	939:12	939:12	3	unused_2
LEAF_NODE	939:12	939:12	4	unused_2
LEAF_NODE	939:20	939:20	2	;
SIMPLE_DECL	941:4	941:36	1	XawListReturnStruct * list_return ;
VAR_DECL	941:4	941:25	2	XawListReturnStruct * list_return
TYPE	941:4	941:24	3	XawListReturnStruct *
TYPE_NAME	941:4	941:4	4	XawListReturnStruct
LEAF_NODE	941:4	941:4	5	XawListReturnStruct
POINTER	941:24	941:24	4	*
LEAF_NODE	941:24	941:24	5	*
NAME	941:25	941:25	3	list_return
LEAF_NODE	941:25	941:25	4	list_return
LEAF_NODE	941:36	941:36	2	;
FUNCTION_DEF	962:0	966:0	1	
RETURN_TYPE	962:0	962:0	2	void
TYPE_NAME	962:0	962:0	3	void
LEAF_NODE	962:0	962:0	4	void
FUNCTION_NAME	963:0	963:0	2	QuitProc
LEAF_NODE	963:0	963:0	3	QuitProc
PARAMETER_LIST	963:8	963:13	2	( void )
LEAF_NODE	963:8	963:8	3	(
PARAMETER_DECL	963:9	963:9	3	void
LEAF_NODE	963:9	963:9	4	void
LEAF_NODE	963:13	963:13	3	)
LEAF_NODE	964:0	964:0	2	{
STATEMENTS	965:4	965:4	2	
EXPR_STATEMENT	965:4	965:11	3	exit ( 0 ) ;
EXPR	965:4	965:4	4	exit ( 0 )
FUNCTION_CALL	965:4	965:10	5	exit ( 0 )
CALLEE	965:4	965:4	6	exit
LEAF_NODE	965:4	965:4	7	exit
LEAF_NODE	965:8	965:8	6	(
ARGUMENT	965:9	965:9	6	0
FIELD	965:9	965:9	7	0
LEAF_NODE	965:9	965:9	8	0
LEAF_NODE	965:10	965:10	6	)
LEAF_NODE	965:11	965:11	4	;
LEAF_NODE	966:0	966:0	2	}
FUNCTION_DEF	968:0	972:0	1	
RETURN_TYPE	968:0	968:0	2	void
TYPE_NAME	968:0	968:0	3	void
LEAF_NODE	968:0	968:0	4	void
FUNCTION_NAME	969:0	969:0	2	NextProc
LEAF_NODE	969:0	969:0	3	NextProc
PARAMETER_LIST	969:8	969:9	2	( )
LEAF_NODE	969:8	969:8	3	(
LEAF_NODE	969:9	969:9	3	)
LEAF_NODE	970:0	970:0	2	{
STATEMENTS	971:4	971:4	2	
EXPR_STATEMENT	971:4	971:28	3	PageProc ( ButtonNextPage ) ;
EXPR	971:4	971:4	4	PageProc ( ButtonNextPage )
FUNCTION_CALL	971:4	971:27	5	PageProc ( ButtonNextPage )
CALLEE	971:4	971:4	6	PageProc
LEAF_NODE	971:4	971:4	7	PageProc
LEAF_NODE	971:12	971:12	6	(
ARGUMENT	971:13	971:13	6	ButtonNextPage
FIELD	971:13	971:13	7	ButtonNextPage
LEAF_NODE	971:13	971:13	8	ButtonNextPage
LEAF_NODE	971:27	971:27	6	)
LEAF_NODE	971:28	971:28	4	;
LEAF_NODE	972:0	972:0	2	}
FUNCTION_DEF	974:0	978:0	1	
RETURN_TYPE	974:0	974:0	2	void
TYPE_NAME	974:0	974:0	3	void
LEAF_NODE	974:0	974:0	4	void
FUNCTION_NAME	975:0	975:0	2	PreviousProc
LEAF_NODE	975:0	975:0	3	PreviousProc
PARAMETER_LIST	975:12	975:13	2	( )
LEAF_NODE	975:12	975:12	3	(
LEAF_NODE	975:13	975:13	3	)
LEAF_NODE	976:0	976:0	2	{
STATEMENTS	977:4	977:4	2	
EXPR_STATEMENT	977:4	977:32	3	PageProc ( ButtonPreviousPage ) ;
EXPR	977:4	977:4	4	PageProc ( ButtonPreviousPage )
FUNCTION_CALL	977:4	977:31	5	PageProc ( ButtonPreviousPage )
CALLEE	977:4	977:4	6	PageProc
LEAF_NODE	977:4	977:4	7	PageProc
LEAF_NODE	977:12	977:12	6	(
ARGUMENT	977:13	977:13	6	ButtonPreviousPage
FIELD	977:13	977:13	7	ButtonPreviousPage
LEAF_NODE	977:13	977:13	8	ButtonPreviousPage
LEAF_NODE	977:31	977:31	6	)
LEAF_NODE	977:32	977:32	4	;
LEAF_NODE	978:0	978:0	2	}
SIMPLE_DECL	982:4	982:17	1	int direction ;
VAR_DECL	982:4	982:8	2	int direction
TYPE	982:4	982:4	3	int
TYPE_NAME	982:4	982:4	4	int
LEAF_NODE	982:4	982:4	5	int
NAME	982:8	982:8	3	direction
LEAF_NODE	982:8	982:8	4	direction
LEAF_NODE	982:17	982:17	2	;
SIMPLE_DECL	984:4	984:21	1	XEvent fake_event ;
VAR_DECL	984:4	984:11	2	XEvent fake_event
TYPE	984:4	984:4	3	XEvent
TYPE_NAME	984:4	984:4	4	XEvent
LEAF_NODE	984:4	984:4	5	XEvent
NAME	984:11	984:11	3	fake_event
LEAF_NODE	984:11	984:11	4	fake_event
LEAF_NODE	984:21	984:21	2	;
SIMPLE_DECL	985:4	985:15	1	Arg [ 4 ] args ;
VAR_DECL	985:4	985:8	2	Arg [ 4 ] args
TYPE	985:4	985:12	3	Arg [ 4 ]
TYPE_NAME	985:4	985:4	4	Arg
LEAF_NODE	985:4	985:4	5	Arg
TYPE_SUFFIX	985:12	985:14	4	[ 4 ]
LEAF_NODE	985:12	985:12	5	[
FIELD	985:13	985:13	5	4
LEAF_NODE	985:13	985:13	6	4
LEAF_NODE	985:14	985:14	5	]
NAME	985:8	985:8	3	args
LEAF_NODE	985:8	985:8	4	args
LEAF_NODE	985:15	985:15	2	;
SIMPLE_DECL	1046:4	1046:17	1	Widget widget ;
VAR_DECL	1046:4	1046:11	2	Widget widget
TYPE	1046:4	1046:4	3	Widget
TYPE_NAME	1046:4	1046:4	4	Widget
LEAF_NODE	1046:4	1046:4	5	Widget
NAME	1046:11	1046:11	3	widget
LEAF_NODE	1046:11	1046:11	4	widget
LEAF_NODE	1046:17	1046:17	2	;
SIMPLE_DECL	1047:4	1047:18	1	caddr_t unused ;
VAR_DECL	1047:4	1047:12	2	caddr_t unused
TYPE	1047:4	1047:4	3	caddr_t
TYPE_NAME	1047:4	1047:4	4	caddr_t
LEAF_NODE	1047:4	1047:4	5	caddr_t
NAME	1047:12	1047:12	3	unused
LEAF_NODE	1047:12	1047:12	4	unused
LEAF_NODE	1047:18	1047:18	2	;
SIMPLE_DECL	1048:4	1048:17	1	XEvent * event ;
VAR_DECL	1048:4	1048:12	2	XEvent * event
TYPE	1048:4	1048:11	3	XEvent *
TYPE_NAME	1048:4	1048:4	4	XEvent
LEAF_NODE	1048:4	1048:4	5	XEvent
POINTER	1048:11	1048:11	4	*
LEAF_NODE	1048:11	1048:11	5	*
NAME	1048:12	1048:12	3	event
LEAF_NODE	1048:12	1048:12	4	event
LEAF_NODE	1048:17	1048:17	2	;
SIMPLE_DECL	1050:4	1050:44	1	int ih , int iw , int ww , int wh , int sx , int sy , int w , int h , int dx , int dy ;
INIT_DECL_LIST	1050:4	1050:4	2	int ih , int iw , int ww , int wh , int sx , int sy , int w , int h , int dx , int dy
VAR_DECL	1050:4	1050:8	3	int ih
TYPE	1050:4	1050:4	4	int
TYPE_NAME	1050:4	1050:4	5	int
LEAF_NODE	1050:4	1050:4	6	int
NAME	1050:8	1050:8	4	ih
LEAF_NODE	1050:8	1050:8	5	ih
LEAF_NODE	1050:10	1050:10	3	,
INIT_DECL_LIST	1050:4	1050:4	3	int iw , int ww , int wh , int sx , int sy , int w , int h , int dx , int dy
VAR_DECL	1050:4	1050:12	4	int iw
TYPE	1050:4	1050:4	5	int
TYPE_NAME	1050:4	1050:4	6	int
LEAF_NODE	1050:4	1050:4	7	int
NAME	1050:12	1050:12	5	iw
LEAF_NODE	1050:12	1050:12	6	iw
LEAF_NODE	1050:14	1050:14	4	,
INIT_DECL_LIST	1050:4	1050:4	4	int ww , int wh , int sx , int sy , int w , int h , int dx , int dy
VAR_DECL	1050:4	1050:16	5	int ww
TYPE	1050:4	1050:4	6	int
TYPE_NAME	1050:4	1050:4	7	int
LEAF_NODE	1050:4	1050:4	8	int
NAME	1050:16	1050:16	6	ww
LEAF_NODE	1050:16	1050:16	7	ww
LEAF_NODE	1050:18	1050:18	5	,
INIT_DECL_LIST	1050:4	1050:4	5	int wh , int sx , int sy , int w , int h , int dx , int dy
VAR_DECL	1050:4	1050:20	6	int wh
TYPE	1050:4	1050:4	7	int
TYPE_NAME	1050:4	1050:4	8	int
LEAF_NODE	1050:4	1050:4	9	int
NAME	1050:20	1050:20	7	wh
LEAF_NODE	1050:20	1050:20	8	wh
LEAF_NODE	1050:22	1050:22	6	,
INIT_DECL_LIST	1050:4	1050:4	6	int sx , int sy , int w , int h , int dx , int dy
VAR_DECL	1050:4	1050:24	7	int sx
TYPE	1050:4	1050:4	8	int
TYPE_NAME	1050:4	1050:4	9	int
LEAF_NODE	1050:4	1050:4	10	int
NAME	1050:24	1050:24	8	sx
LEAF_NODE	1050:24	1050:24	9	sx
LEAF_NODE	1050:26	1050:26	7	,
INIT_DECL_LIST	1050:4	1050:4	7	int sy , int w , int h , int dx , int dy
VAR_DECL	1050:4	1050:28	8	int sy
TYPE	1050:4	1050:4	9	int
TYPE_NAME	1050:4	1050:4	10	int
LEAF_NODE	1050:4	1050:4	11	int
NAME	1050:28	1050:28	9	sy
LEAF_NODE	1050:28	1050:28	10	sy
LEAF_NODE	1050:30	1050:30	8	,
INIT_DECL_LIST	1050:4	1050:4	8	int w , int h , int dx , int dy
VAR_DECL	1050:4	1050:32	9	int w
TYPE	1050:4	1050:4	10	int
TYPE_NAME	1050:4	1050:4	11	int
LEAF_NODE	1050:4	1050:4	12	int
NAME	1050:32	1050:32	10	w
LEAF_NODE	1050:32	1050:32	11	w
LEAF_NODE	1050:33	1050:33	9	,
INIT_DECL_LIST	1050:4	1050:4	9	int h , int dx , int dy
VAR_DECL	1050:4	1050:35	10	int h
TYPE	1050:4	1050:4	11	int
TYPE_NAME	1050:4	1050:4	12	int
LEAF_NODE	1050:4	1050:4	13	int
NAME	1050:35	1050:35	11	h
LEAF_NODE	1050:35	1050:35	12	h
LEAF_NODE	1050:36	1050:36	10	,
INIT_DECL_LIST	1050:4	1050:4	10	int dx , int dy
VAR_DECL	1050:4	1050:38	11	int dx
TYPE	1050:4	1050:4	12	int
TYPE_NAME	1050:4	1050:4	13	int
LEAF_NODE	1050:4	1050:4	14	int
NAME	1050:38	1050:38	12	dx
LEAF_NODE	1050:38	1050:38	13	dx
LEAF_NODE	1050:40	1050:40	11	,
VAR_DECL	1050:4	1050:42	11	int dy
TYPE	1050:4	1050:4	12	int
TYPE_NAME	1050:4	1050:4	13	int
LEAF_NODE	1050:4	1050:4	14	int
NAME	1050:42	1050:42	12	dy
LEAF_NODE	1050:42	1050:42	13	dy
LEAF_NODE	1050:44	1050:44	2	;
SIMPLE_DECL	1051:4	1051:31	1	Dimension w_width , Dimension w_height ;
INIT_DECL_LIST	1051:4	1051:4	2	Dimension w_width , Dimension w_height
VAR_DECL	1051:4	1051:14	3	Dimension w_width
TYPE	1051:4	1051:4	4	Dimension
TYPE_NAME	1051:4	1051:4	5	Dimension
LEAF_NODE	1051:4	1051:4	6	Dimension
NAME	1051:14	1051:14	4	w_width
LEAF_NODE	1051:14	1051:14	5	w_width
LEAF_NODE	1051:21	1051:21	3	,
VAR_DECL	1051:4	1051:23	3	Dimension w_height
TYPE	1051:4	1051:4	4	Dimension
TYPE_NAME	1051:4	1051:4	5	Dimension
LEAF_NODE	1051:4	1051:4	6	Dimension
NAME	1051:23	1051:23	4	w_height
LEAF_NODE	1051:23	1051:23	5	w_height
LEAF_NODE	1051:31	1051:31	2	;
SIMPLE_DECL	1052:4	1052:21	1	XEvent next_event ;
VAR_DECL	1052:4	1052:11	2	XEvent next_event
TYPE	1052:4	1052:4	3	XEvent
TYPE_NAME	1052:4	1052:4	4	XEvent
LEAF_NODE	1052:4	1052:4	5	XEvent
NAME	1052:11	1052:11	3	next_event
LEAF_NODE	1052:11	1052:11	4	next_event
LEAF_NODE	1052:21	1052:21	2	;
SIMPLE_DECL	1053:4	1053:15	1	Arg [ 2 ] args ;
VAR_DECL	1053:4	1053:8	2	Arg [ 2 ] args
TYPE	1053:4	1053:12	3	Arg [ 2 ]
TYPE_NAME	1053:4	1053:4	4	Arg
LEAF_NODE	1053:4	1053:4	5	Arg
TYPE_SUFFIX	1053:12	1053:14	4	[ 2 ]
LEAF_NODE	1053:12	1053:12	5	[
FIELD	1053:13	1053:13	5	2
LEAF_NODE	1053:13	1053:13	6	2
LEAF_NODE	1053:14	1053:14	5	]
NAME	1053:8	1053:8	3	args
LEAF_NODE	1053:8	1053:8	4	args
LEAF_NODE	1053:15	1053:15	2	;
FUNCTION_DEF	1205:0	1242:0	1	
RETURN_TYPE	1205:0	1205:0	2	void
TYPE_NAME	1205:0	1205:0	3	void
LEAF_NODE	1205:0	1205:0	4	void
FUNCTION_NAME	1206:0	1206:0	2	ResizeProc
LEAF_NODE	1206:0	1206:0	3	ResizeProc
PARAMETER_LIST	1206:10	1206:11	2	( )
LEAF_NODE	1206:10	1206:10	3	(
LEAF_NODE	1206:11	1206:11	3	)
LEAF_NODE	1207:0	1207:0	2	{
STATEMENTS	1208:4	1235:4	2	
SIMPLE_DECL	1208:4	1208:31	3	Dimension w_width , Dimension w_height ;
INIT_DECL_LIST	1208:4	1208:4	4	Dimension w_width , Dimension w_height
VAR_DECL	1208:4	1208:14	5	Dimension w_width
TYPE	1208:4	1208:4	6	Dimension
TYPE_NAME	1208:4	1208:4	7	Dimension
LEAF_NODE	1208:4	1208:4	8	Dimension
NAME	1208:14	1208:14	6	w_width
LEAF_NODE	1208:14	1208:14	7	w_width
LEAF_NODE	1208:21	1208:21	5	,
VAR_DECL	1208:4	1208:23	5	Dimension w_height
TYPE	1208:4	1208:4	6	Dimension
TYPE_NAME	1208:4	1208:4	7	Dimension
LEAF_NODE	1208:4	1208:4	8	Dimension
NAME	1208:23	1208:23	6	w_height
LEAF_NODE	1208:23	1208:23	7	w_height
LEAF_NODE	1208:31	1208:31	4	;
SIMPLE_DECL	1209:4	1209:22	3	int xo , int yo , int ww , int wh ;
INIT_DECL_LIST	1209:4	1209:4	4	int xo , int yo , int ww , int wh
VAR_DECL	1209:4	1209:8	5	int xo
TYPE	1209:4	1209:4	6	int
TYPE_NAME	1209:4	1209:4	7	int
LEAF_NODE	1209:4	1209:4	8	int
NAME	1209:8	1209:8	6	xo
LEAF_NODE	1209:8	1209:8	7	xo
LEAF_NODE	1209:10	1209:10	5	,
INIT_DECL_LIST	1209:4	1209:4	5	int yo , int ww , int wh
VAR_DECL	1209:4	1209:12	6	int yo
TYPE	1209:4	1209:4	7	int
TYPE_NAME	1209:4	1209:4	8	int
LEAF_NODE	1209:4	1209:4	9	int
NAME	1209:12	1209:12	7	yo
LEAF_NODE	1209:12	1209:12	8	yo
LEAF_NODE	1209:14	1209:14	6	,
INIT_DECL_LIST	1209:4	1209:4	6	int ww , int wh
VAR_DECL	1209:4	1209:16	7	int ww
TYPE	1209:4	1209:4	8	int
TYPE_NAME	1209:4	1209:4	9	int
LEAF_NODE	1209:4	1209:4	10	int
NAME	1209:16	1209:16	8	ww
LEAF_NODE	1209:16	1209:16	9	ww
LEAF_NODE	1209:18	1209:18	7	,
VAR_DECL	1209:4	1209:20	7	int wh
TYPE	1209:4	1209:4	8	int
TYPE_NAME	1209:4	1209:4	9	int
LEAF_NODE	1209:4	1209:4	10	int
NAME	1209:20	1209:20	8	wh
LEAF_NODE	1209:20	1209:20	9	wh
LEAF_NODE	1209:22	1209:22	4	;
SIMPLE_DECL	1210:4	1210:21	3	XEvent fake_event ;
VAR_DECL	1210:4	1210:11	4	XEvent fake_event
TYPE	1210:4	1210:4	5	XEvent
TYPE_NAME	1210:4	1210:4	6	XEvent
LEAF_NODE	1210:4	1210:4	7	XEvent
NAME	1210:11	1210:11	5	fake_event
LEAF_NODE	1210:11	1210:11	6	fake_event
LEAF_NODE	1210:21	1210:21	4	;
SIMPLE_DECL	1211:4	1211:15	3	Arg [ 2 ] args ;
VAR_DECL	1211:4	1211:8	4	Arg [ 2 ] args
TYPE	1211:4	1211:12	5	Arg [ 2 ]
TYPE_NAME	1211:4	1211:4	6	Arg
LEAF_NODE	1211:4	1211:4	7	Arg
TYPE_SUFFIX	1211:12	1211:14	6	[ 2 ]
LEAF_NODE	1211:12	1211:12	7	[
FIELD	1211:13	1211:13	7	2
LEAF_NODE	1211:13	1211:13	8	2
LEAF_NODE	1211:14	1211:14	7	]
NAME	1211:8	1211:8	5	args
LEAF_NODE	1211:8	1211:8	6	args
LEAF_NODE	1211:15	1211:15	4	;
SELECTION	1213:4	1214:8	3	
KEYWORD	1213:4	1213:4	4	if
LEAF_NODE	1213:4	1213:4	5	if
LEAF_NODE	1213:7	1213:7	4	(
CONDITION	1213:8	1213:8	4	( xOffset == 0 ) && ( yOffset == 0 )
EXPR	1213:8	1213:8	5	( xOffset == 0 ) && ( yOffset == 0 )
AND	1213:8	1213:26	6	( xOffset == 0 ) && ( yOffset == 0 )
EXPR	1213:8	1213:21	7	( xOffset == 0 )
LEAF_NODE	1213:8	1213:8	8	(
FIELD	1213:9	1213:9	8	xOffset
LEAF_NODE	1213:9	1213:9	9	xOffset
EQ_OPERATOR	1213:17	1213:17	8	==
LEAF_NODE	1213:17	1213:17	9	==
FIELD	1213:20	1213:20	8	0
LEAF_NODE	1213:20	1213:20	9	0
LEAF_NODE	1213:21	1213:21	8	)
LEAF_NODE	1213:23	1213:23	7	&&
EXPR	1213:26	1213:39	7	( yOffset == 0 )
LEAF_NODE	1213:26	1213:26	8	(
FIELD	1213:27	1213:27	8	yOffset
LEAF_NODE	1213:27	1213:27	9	yOffset
EQ_OPERATOR	1213:35	1213:35	8	==
LEAF_NODE	1213:35	1213:35	9	==
FIELD	1213:38	1213:38	8	0
LEAF_NODE	1213:38	1213:38	9	0
LEAF_NODE	1213:39	1213:39	8	)
LEAF_NODE	1213:40	1213:40	4	)
STATEMENTS	1214:8	1214:8	4	
JUMP_STATEMENT	1214:8	1214:14	5	return DESTINATION ;
KEYWORD	1214:8	1214:8	6	return
LEAF_NODE	1214:8	1214:8	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	1214:14	1214:14	6	;
EXPR_STATEMENT	1216:4	1216:41	3	XtSetArg ( args [ 0 ] , XtNwidth , & w_width ) ;
EXPR	1216:4	1216:4	4	XtSetArg ( args [ 0 ] , XtNwidth , & w_width )
FUNCTION_CALL	1216:4	1216:40	5	XtSetArg ( args [ 0 ] , XtNwidth , & w_width )
CALLEE	1216:4	1216:4	6	XtSetArg
LEAF_NODE	1216:4	1216:4	7	XtSetArg
LEAF_NODE	1216:12	1216:12	6	(
ARGUMENT	1216:13	1216:13	6	args [ 0 ]
FIELD	1216:13	1216:19	7	args [ 0 ]
LEAF_NODE	1216:13	1216:13	8	args
LEAF_NODE	1216:17	1216:17	8	[
EXPR	1216:18	1216:18	8	0
FIELD	1216:18	1216:18	9	0
LEAF_NODE	1216:18	1216:18	10	0
LEAF_NODE	1216:19	1216:19	8	]
LEAF_NODE	1216:20	1216:20	6	,
ARGUMENT	1216:22	1216:22	6	XtNwidth
FIELD	1216:22	1216:22	7	XtNwidth
LEAF_NODE	1216:22	1216:22	8	XtNwidth
LEAF_NODE	1216:30	1216:30	6	,
ARGUMENT	1216:32	1216:32	6	& w_width
UNARY_EXPR	1216:32	1216:33	7	& w_width
UNARY_OPERATOR	1216:32	1216:32	8	&
LEAF_NODE	1216:32	1216:32	9	&
FIELD	1216:33	1216:33	8	w_width
LEAF_NODE	1216:33	1216:33	9	w_width
LEAF_NODE	1216:40	1216:40	6	)
LEAF_NODE	1216:41	1216:41	4	;
EXPR_STATEMENT	1217:4	1217:43	3	XtSetArg ( args [ 1 ] , XtNheight , & w_height ) ;
EXPR	1217:4	1217:4	4	XtSetArg ( args [ 1 ] , XtNheight , & w_height )
FUNCTION_CALL	1217:4	1217:42	5	XtSetArg ( args [ 1 ] , XtNheight , & w_height )
CALLEE	1217:4	1217:4	6	XtSetArg
LEAF_NODE	1217:4	1217:4	7	XtSetArg
LEAF_NODE	1217:12	1217:12	6	(
ARGUMENT	1217:13	1217:13	6	args [ 1 ]
FIELD	1217:13	1217:19	7	args [ 1 ]
LEAF_NODE	1217:13	1217:13	8	args
LEAF_NODE	1217:17	1217:17	8	[
EXPR	1217:18	1217:18	8	1
FIELD	1217:18	1217:18	9	1
LEAF_NODE	1217:18	1217:18	10	1
LEAF_NODE	1217:19	1217:19	8	]
LEAF_NODE	1217:20	1217:20	6	,
ARGUMENT	1217:22	1217:22	6	XtNheight
FIELD	1217:22	1217:22	7	XtNheight
LEAF_NODE	1217:22	1217:22	8	XtNheight
LEAF_NODE	1217:31	1217:31	6	,
ARGUMENT	1217:33	1217:33	6	& w_height
UNARY_EXPR	1217:33	1217:34	7	& w_height
UNARY_OPERATOR	1217:33	1217:33	8	&
LEAF_NODE	1217:33	1217:33	9	&
FIELD	1217:34	1217:34	8	w_height
LEAF_NODE	1217:34	1217:34	9	w_height
LEAF_NODE	1217:42	1217:42	6	)
LEAF_NODE	1217:43	1217:43	4	;
EXPR_STATEMENT	1218:4	1218:37	3	XtGetValues ( shellWidget , args , 2 ) ;
EXPR	1218:4	1218:4	4	XtGetValues ( shellWidget , args , 2 )
FUNCTION_CALL	1218:4	1218:36	5	XtGetValues ( shellWidget , args , 2 )
CALLEE	1218:4	1218:4	6	XtGetValues
LEAF_NODE	1218:4	1218:4	7	XtGetValues
LEAF_NODE	1218:15	1218:15	6	(
ARGUMENT	1218:16	1218:16	6	shellWidget
FIELD	1218:16	1218:16	7	shellWidget
LEAF_NODE	1218:16	1218:16	8	shellWidget
LEAF_NODE	1218:27	1218:27	6	,
ARGUMENT	1218:29	1218:29	6	args
FIELD	1218:29	1218:29	7	args
LEAF_NODE	1218:29	1218:29	8	args
LEAF_NODE	1218:33	1218:33	6	,
ARGUMENT	1218:35	1218:35	6	2
FIELD	1218:35	1218:35	7	2
LEAF_NODE	1218:35	1218:35	8	2
LEAF_NODE	1218:36	1218:36	6	)
LEAF_NODE	1218:37	1218:37	4	;
EXPR_STATEMENT	1219:4	1219:16	3	ww = w_width ;
EXPR	1219:4	1219:4	4	ww = w_width
ASSIGN	1219:4	1219:9	5	ww = w_width
LVAL	1219:4	1219:4	6	ww
FIELD	1219:4	1219:4	7	ww
LEAF_NODE	1219:4	1219:4	8	ww
ASSIGN_OP	1219:7	1219:7	6	=
LEAF_NODE	1219:7	1219:7	7	=
RVAL	1219:9	1219:9	6	w_width
FIELD	1219:9	1219:9	7	w_width
LEAF_NODE	1219:9	1219:9	8	w_width
LEAF_NODE	1219:16	1219:16	4	;
EXPR_STATEMENT	1220:4	1220:17	3	wh = w_height ;
EXPR	1220:4	1220:4	4	wh = w_height
ASSIGN	1220:4	1220:9	5	wh = w_height
LVAL	1220:4	1220:4	6	wh
FIELD	1220:4	1220:4	7	wh
LEAF_NODE	1220:4	1220:4	8	wh
ASSIGN_OP	1220:7	1220:7	6	=
LEAF_NODE	1220:7	1220:7	7	=
RVAL	1220:9	1220:9	6	w_height
FIELD	1220:9	1220:9	7	w_height
LEAF_NODE	1220:9	1220:9	8	w_height
LEAF_NODE	1220:17	1220:17	4	;
EXPR_STATEMENT	1221:4	1221:36	3	XtGetValues ( listWidget , args , 2 ) ;
EXPR	1221:4	1221:4	4	XtGetValues ( listWidget , args , 2 )
FUNCTION_CALL	1221:4	1221:35	5	XtGetValues ( listWidget , args , 2 )
CALLEE	1221:4	1221:4	6	XtGetValues
LEAF_NODE	1221:4	1221:4	7	XtGetValues
LEAF_NODE	1221:15	1221:15	6	(
ARGUMENT	1221:16	1221:16	6	listWidget
FIELD	1221:16	1221:16	7	listWidget
LEAF_NODE	1221:16	1221:16	8	listWidget
LEAF_NODE	1221:26	1221:26	6	,
ARGUMENT	1221:28	1221:28	6	args
FIELD	1221:28	1221:28	7	args
LEAF_NODE	1221:28	1221:28	8	args
LEAF_NODE	1221:32	1221:32	6	,
ARGUMENT	1221:34	1221:34	6	2
FIELD	1221:34	1221:34	7	2
LEAF_NODE	1221:34	1221:34	8	2
LEAF_NODE	1221:35	1221:35	6	)
LEAF_NODE	1221:36	1221:36	4	;
EXPR_STATEMENT	1222:4	1222:18	3	wh -= w_height ;
EXPR	1222:4	1222:4	4	wh -= w_height
ASSIGN	1222:4	1222:10	5	wh -= w_height
LVAL	1222:4	1222:4	6	wh
FIELD	1222:4	1222:4	7	wh
LEAF_NODE	1222:4	1222:4	8	wh
ASSIGN_OP	1222:7	1222:7	6	-=
LEAF_NODE	1222:7	1222:7	7	-=
RVAL	1222:10	1222:10	6	w_height
FIELD	1222:10	1222:10	7	w_height
LEAF_NODE	1222:10	1222:10	8	w_height
LEAF_NODE	1222:18	1222:18	4	;
EXPR_STATEMENT	1224:4	1224:16	3	xo = xOffset ;
EXPR	1224:4	1224:4	4	xo = xOffset
ASSIGN	1224:4	1224:9	5	xo = xOffset
LVAL	1224:4	1224:4	6	xo
FIELD	1224:4	1224:4	7	xo
LEAF_NODE	1224:4	1224:4	8	xo
ASSIGN_OP	1224:7	1224:7	6	=
LEAF_NODE	1224:7	1224:7	7	=
RVAL	1224:9	1224:9	6	xOffset
FIELD	1224:9	1224:9	7	xOffset
LEAF_NODE	1224:9	1224:9	8	xOffset
LEAF_NODE	1224:16	1224:16	4	;
EXPR_STATEMENT	1224:18	1224:30	3	yo = yOffset ;
EXPR	1224:18	1224:18	4	yo = yOffset
ASSIGN	1224:18	1224:23	5	yo = yOffset
LVAL	1224:18	1224:18	6	yo
FIELD	1224:18	1224:18	7	yo
LEAF_NODE	1224:18	1224:18	8	yo
ASSIGN_OP	1224:21	1224:21	6	=
LEAF_NODE	1224:21	1224:21	7	=
RVAL	1224:23	1224:23	6	yOffset
FIELD	1224:23	1224:23	7	yOffset
LEAF_NODE	1224:23	1224:23	8	yOffset
LEAF_NODE	1224:30	1224:30	4	;
SELECTION	1226:4	1227:8	3	
KEYWORD	1226:4	1226:4	4	if
LEAF_NODE	1226:4	1226:4	5	if
LEAF_NODE	1226:7	1226:7	4	(
CONDITION	1226:8	1226:8	4	( xOffset + ww ) >= tfImageWidth
EXPR	1226:8	1226:26	5	( xOffset + ww ) >= tfImageWidth
LEAF_NODE	1226:8	1226:8	6	(
FIELD	1226:9	1226:9	6	xOffset
LEAF_NODE	1226:9	1226:9	7	xOffset
LEAF_NODE	1226:17	1226:17	6	+
FIELD	1226:19	1226:19	6	ww
LEAF_NODE	1226:19	1226:19	7	ww
LEAF_NODE	1226:21	1226:21	6	)
REL_OPERATOR	1226:23	1226:23	6	>=
LEAF_NODE	1226:23	1226:23	7	>=
FIELD	1226:26	1226:26	6	tfImageWidth
LEAF_NODE	1226:26	1226:26	7	tfImageWidth
LEAF_NODE	1226:38	1226:38	4	)
STATEMENTS	1227:8	1227:8	4	
EXPR_STATEMENT	1227:8	1227:49	5	xOffset = MAX ( ( int ) tfImageWidth - ww , 0 ) ;
EXPR	1227:8	1227:8	6	xOffset = MAX ( ( int ) tfImageWidth - ww , 0 )
ASSIGN	1227:8	1227:18	7	xOffset = MAX ( ( int ) tfImageWidth - ww , 0 )
LVAL	1227:8	1227:8	8	xOffset
FIELD	1227:8	1227:8	9	xOffset
LEAF_NODE	1227:8	1227:8	10	xOffset
ASSIGN_OP	1227:16	1227:16	8	=
LEAF_NODE	1227:16	1227:16	9	=
RVAL	1227:18	1227:18	8	MAX ( ( int ) tfImageWidth - ww , 0 )
FUNCTION_CALL	1227:18	1227:48	9	MAX ( ( int ) tfImageWidth - ww , 0 )
CALLEE	1227:18	1227:18	10	MAX
LEAF_NODE	1227:18	1227:18	11	MAX
LEAF_NODE	1227:21	1227:21	10	(
ARGUMENT	1227:22	1227:43	10	( int ) tfImageWidth - ww
LEAF_NODE	1227:22	1227:22	11	(
TYPE_NAME	1227:23	1227:23	11	int
LEAF_NODE	1227:23	1227:23	12	int
LEAF_NODE	1227:26	1227:26	11	)
FIELD	1227:28	1227:28	11	tfImageWidth
LEAF_NODE	1227:28	1227:28	12	tfImageWidth
LEAF_NODE	1227:41	1227:41	11	-
FIELD	1227:43	1227:43	11	ww
LEAF_NODE	1227:43	1227:43	12	ww
LEAF_NODE	1227:45	1227:45	10	,
ARGUMENT	1227:47	1227:47	10	0
FIELD	1227:47	1227:47	11	0
LEAF_NODE	1227:47	1227:47	12	0
LEAF_NODE	1227:48	1227:48	10	)
LEAF_NODE	1227:49	1227:49	6	;
SELECTION	1228:4	1229:8	3	
KEYWORD	1228:4	1228:4	4	if
LEAF_NODE	1228:4	1228:4	5	if
LEAF_NODE	1228:7	1228:7	4	(
CONDITION	1228:8	1228:8	4	( yOffset + wh ) >= tfImageHeight
EXPR	1228:8	1228:26	5	( yOffset + wh ) >= tfImageHeight
LEAF_NODE	1228:8	1228:8	6	(
FIELD	1228:9	1228:9	6	yOffset
LEAF_NODE	1228:9	1228:9	7	yOffset
LEAF_NODE	1228:17	1228:17	6	+
FIELD	1228:19	1228:19	6	wh
LEAF_NODE	1228:19	1228:19	7	wh
LEAF_NODE	1228:21	1228:21	6	)
REL_OPERATOR	1228:23	1228:23	6	>=
LEAF_NODE	1228:23	1228:23	7	>=
FIELD	1228:26	1228:26	6	tfImageHeight
LEAF_NODE	1228:26	1228:26	7	tfImageHeight
LEAF_NODE	1228:39	1228:39	4	)
STATEMENTS	1229:8	1229:8	4	
EXPR_STATEMENT	1229:8	1229:50	5	yOffset = MAX ( ( int ) tfImageHeight - wh , 0 ) ;
EXPR	1229:8	1229:8	6	yOffset = MAX ( ( int ) tfImageHeight - wh , 0 )
ASSIGN	1229:8	1229:18	7	yOffset = MAX ( ( int ) tfImageHeight - wh , 0 )
LVAL	1229:8	1229:8	8	yOffset
FIELD	1229:8	1229:8	9	yOffset
LEAF_NODE	1229:8	1229:8	10	yOffset
ASSIGN_OP	1229:16	1229:16	8	=
LEAF_NODE	1229:16	1229:16	9	=
RVAL	1229:18	1229:18	8	MAX ( ( int ) tfImageHeight - wh , 0 )
FUNCTION_CALL	1229:18	1229:49	9	MAX ( ( int ) tfImageHeight - wh , 0 )
CALLEE	1229:18	1229:18	10	MAX
LEAF_NODE	1229:18	1229:18	11	MAX
LEAF_NODE	1229:21	1229:21	10	(
ARGUMENT	1229:22	1229:44	10	( int ) tfImageHeight - wh
LEAF_NODE	1229:22	1229:22	11	(
TYPE_NAME	1229:23	1229:23	11	int
LEAF_NODE	1229:23	1229:23	12	int
LEAF_NODE	1229:26	1229:26	11	)
FIELD	1229:28	1229:28	11	tfImageHeight
LEAF_NODE	1229:28	1229:28	12	tfImageHeight
LEAF_NODE	1229:42	1229:42	11	-
FIELD	1229:44	1229:44	11	wh
LEAF_NODE	1229:44	1229:44	12	wh
LEAF_NODE	1229:46	1229:46	10	,
ARGUMENT	1229:48	1229:48	10	0
FIELD	1229:48	1229:48	11	0
LEAF_NODE	1229:48	1229:48	12	0
LEAF_NODE	1229:49	1229:49	10	)
LEAF_NODE	1229:50	1229:50	6	;
SELECTION	1235:4	1235:44	3	
KEYWORD	1235:4	1235:4	4	if
LEAF_NODE	1235:4	1235:4	5	if
LEAF_NODE	1235:7	1235:7	4	(
CONDITION	1235:8	1235:8	4	( xo != xOffset ) || ( yo != yOffset )
EXPR	1235:8	1235:8	5	( xo != xOffset ) || ( yo != yOffset )
OR	1235:8	1235:27	6	( xo != xOffset ) || ( yo != yOffset )
EXPR	1235:8	1235:22	7	( xo != xOffset )
LEAF_NODE	1235:8	1235:8	8	(
FIELD	1235:9	1235:9	8	xo
LEAF_NODE	1235:9	1235:9	9	xo
EQ_OPERATOR	1235:12	1235:12	8	!=
LEAF_NODE	1235:12	1235:12	9	!=
FIELD	1235:15	1235:15	8	xOffset
LEAF_NODE	1235:15	1235:15	9	xOffset
LEAF_NODE	1235:22	1235:22	8	)
LEAF_NODE	1235:24	1235:24	7	||
EXPR	1235:27	1235:41	7	( yo != yOffset )
LEAF_NODE	1235:27	1235:27	8	(
FIELD	1235:28	1235:28	8	yo
LEAF_NODE	1235:28	1235:28	9	yo
EQ_OPERATOR	1235:31	1235:31	8	!=
LEAF_NODE	1235:31	1235:31	9	!=
FIELD	1235:34	1235:34	8	yOffset
LEAF_NODE	1235:34	1235:34	9	yOffset
LEAF_NODE	1235:41	1235:41	8	)
LEAF_NODE	1235:42	1235:42	4	)
STATEMENTS	1235:44	1241:4	4	
LEAF_NODE	1235:44	1235:44	5	{
STATEMENTS	1236:8	1240:8	5	
EXPR_STATEMENT	1236:8	1236:32	6	fake_event . type = Expose ;
EXPR	1236:8	1236:8	7	fake_event . type = Expose
ASSIGN	1236:8	1236:26	8	fake_event . type = Expose
LVAL	1236:8	1236:8	9	fake_event . type
FIELD	1236:8	1236:19	10	fake_event . type
LEAF_NODE	1236:8	1236:8	11	fake_event
LEAF_NODE	1236:18	1236:18	11	.
LEAF_NODE	1236:19	1236:19	11	type
ASSIGN_OP	1236:24	1236:24	9	=
LEAF_NODE	1236:24	1236:24	10	=
RVAL	1236:26	1236:26	9	Expose
FIELD	1236:26	1236:26	10	Expose
LEAF_NODE	1236:26	1236:26	11	Expose
LEAF_NODE	1236:32	1236:32	7	;
EXPR_STATEMENT	1237:8	1237:55	6	fake_event . xexpose . x = fake_event . xexpose . y = 0 ;
EXPR	1237:8	1237:8	7	fake_event . xexpose . x = fake_event . xexpose . y = 0
ASSIGN	1237:8	1237:31	8	fake_event . xexpose . x = fake_event . xexpose . y = 0
LVAL	1237:8	1237:8	9	fake_event . xexpose . x
FIELD	1237:8	1237:27	10	fake_event . xexpose . x
LEAF_NODE	1237:8	1237:8	11	fake_event
LEAF_NODE	1237:18	1237:18	11	.
LEAF_NODE	1237:19	1237:19	11	xexpose
LEAF_NODE	1237:26	1237:26	11	.
LEAF_NODE	1237:27	1237:27	11	x
ASSIGN_OP	1237:29	1237:29	9	=
LEAF_NODE	1237:29	1237:29	10	=
RVAL	1237:31	1237:31	9	fake_event . xexpose . y = 0
ASSIGN	1237:31	1237:54	10	fake_event . xexpose . y = 0
LVAL	1237:31	1237:31	11	fake_event . xexpose . y
FIELD	1237:31	1237:50	12	fake_event . xexpose . y
LEAF_NODE	1237:31	1237:31	13	fake_event
LEAF_NODE	1237:41	1237:41	13	.
LEAF_NODE	1237:42	1237:42	13	xexpose
LEAF_NODE	1237:49	1237:49	13	.
LEAF_NODE	1237:50	1237:50	13	y
ASSIGN_OP	1237:52	1237:52	11	=
LEAF_NODE	1237:52	1237:52	12	=
RVAL	1237:54	1237:54	11	0
FIELD	1237:54	1237:54	12	0
LEAF_NODE	1237:54	1237:54	13	0
LEAF_NODE	1237:55	1237:55	7	;
EXPR_STATEMENT	1238:8	1238:47	6	fake_event . xexpose . width = tfImageWidth ;
EXPR	1238:8	1238:8	7	fake_event . xexpose . width = tfImageWidth
ASSIGN	1238:8	1238:35	8	fake_event . xexpose . width = tfImageWidth
LVAL	1238:8	1238:8	9	fake_event . xexpose . width
FIELD	1238:8	1238:27	10	fake_event . xexpose . width
LEAF_NODE	1238:8	1238:8	11	fake_event
LEAF_NODE	1238:18	1238:18	11	.
LEAF_NODE	1238:19	1238:19	11	xexpose
LEAF_NODE	1238:26	1238:26	11	.
LEAF_NODE	1238:27	1238:27	11	width
ASSIGN_OP	1238:33	1238:33	9	=
LEAF_NODE	1238:33	1238:33	10	=
RVAL	1238:35	1238:35	9	tfImageWidth
FIELD	1238:35	1238:35	10	tfImageWidth
LEAF_NODE	1238:35	1238:35	11	tfImageWidth
LEAF_NODE	1238:47	1238:47	7	;
EXPR_STATEMENT	1239:8	1239:49	6	fake_event . xexpose . height = tfImageHeight ;
EXPR	1239:8	1239:8	7	fake_event . xexpose . height = tfImageHeight
ASSIGN	1239:8	1239:36	8	fake_event . xexpose . height = tfImageHeight
LVAL	1239:8	1239:8	9	fake_event . xexpose . height
FIELD	1239:8	1239:27	10	fake_event . xexpose . height
LEAF_NODE	1239:8	1239:8	11	fake_event
LEAF_NODE	1239:18	1239:18	11	.
LEAF_NODE	1239:19	1239:19	11	xexpose
LEAF_NODE	1239:26	1239:26	11	.
LEAF_NODE	1239:27	1239:27	11	height
ASSIGN_OP	1239:34	1239:34	9	=
LEAF_NODE	1239:34	1239:34	10	=
RVAL	1239:36	1239:36	9	tfImageHeight
FIELD	1239:36	1239:36	10	tfImageHeight
LEAF_NODE	1239:36	1239:36	11	tfImageHeight
LEAF_NODE	1239:49	1239:49	7	;
EXPR_STATEMENT	1240:8	1240:49	6	EventProc ( imageWidget , NULL , & fake_event ) ;
EXPR	1240:8	1240:8	7	EventProc ( imageWidget , NULL , & fake_event )
FUNCTION_CALL	1240:8	1240:48	8	EventProc ( imageWidget , NULL , & fake_event )
CALLEE	1240:8	1240:8	9	EventProc
LEAF_NODE	1240:8	1240:8	10	EventProc
LEAF_NODE	1240:17	1240:17	9	(
ARGUMENT	1240:18	1240:18	9	imageWidget
FIELD	1240:18	1240:18	10	imageWidget
LEAF_NODE	1240:18	1240:18	11	imageWidget
LEAF_NODE	1240:29	1240:29	9	,
ARGUMENT	1240:31	1240:31	9	NULL
FIELD	1240:31	1240:31	10	NULL
LEAF_NODE	1240:31	1240:31	11	NULL
LEAF_NODE	1240:35	1240:35	9	,
ARGUMENT	1240:37	1240:37	9	& fake_event
UNARY_EXPR	1240:37	1240:38	10	& fake_event
UNARY_OPERATOR	1240:37	1240:37	11	&
LEAF_NODE	1240:37	1240:37	12	&
FIELD	1240:38	1240:38	11	fake_event
LEAF_NODE	1240:38	1240:38	12	fake_event
LEAF_NODE	1240:48	1240:48	9	)
LEAF_NODE	1240:49	1240:49	7	;
LEAF_NODE	1241:4	1241:4	5	}
LEAF_NODE	1242:0	1242:0	2	}
SIMPLE_DECL	1246:4	1246:20	1	Display * display ;
VAR_DECL	1246:4	1246:13	2	Display * display
TYPE	1246:4	1246:12	3	Display *
TYPE_NAME	1246:4	1246:4	4	Display
LEAF_NODE	1246:4	1246:4	5	Display
POINTER	1246:12	1246:12	4	*
LEAF_NODE	1246:12	1246:12	5	*
NAME	1246:13	1246:13	3	display
LEAF_NODE	1246:13	1246:13	4	display
LEAF_NODE	1246:20	1246:20	2	;
SIMPLE_DECL	1247:4	1247:28	1	XErrorEvent * error_event ;
VAR_DECL	1247:4	1247:17	2	XErrorEvent * error_event
TYPE	1247:4	1247:16	3	XErrorEvent *
TYPE_NAME	1247:4	1247:4	4	XErrorEvent
LEAF_NODE	1247:4	1247:4	5	XErrorEvent
POINTER	1247:16	1247:16	4	*
LEAF_NODE	1247:16	1247:16	5	*
NAME	1247:17	1247:17	3	error_event
LEAF_NODE	1247:17	1247:17	4	error_event
LEAF_NODE	1247:28	1247:28	2	;
SIMPLE_DECL	1249:4	1249:20	1	char [ 80 ] message ;
VAR_DECL	1249:4	1249:9	2	char [ 80 ] message
TYPE	1249:4	1249:16	3	char [ 80 ]
TYPE_NAME	1249:4	1249:4	4	char
LEAF_NODE	1249:4	1249:4	5	char
TYPE_SUFFIX	1249:16	1249:19	4	[ 80 ]
LEAF_NODE	1249:16	1249:16	5	[
FIELD	1249:17	1249:17	5	80
LEAF_NODE	1249:17	1249:17	6	80
LEAF_NODE	1249:19	1249:19	5	]
NAME	1249:9	1249:9	3	message
LEAF_NODE	1249:9	1249:9	4	message
LEAF_NODE	1249:20	1249:20	2	;
FUNCTION_DEF	1265:0	1278:0	1	
RETURN_TYPE	1265:0	1265:0	2	void
TYPE_NAME	1265:0	1265:0	3	void
LEAF_NODE	1265:0	1265:0	4	void
FUNCTION_NAME	1266:0	1266:0	2	Usage
LEAF_NODE	1266:0	1266:0	3	Usage
PARAMETER_LIST	1266:5	1266:6	2	( )
LEAF_NODE	1266:5	1266:5	3	(
LEAF_NODE	1266:6	1266:6	3	)
LEAF_NODE	1267:0	1267:0	2	{
STATEMENTS	1268:4	1277:4	2	
EXPR_STATEMENT	1268:4	1268:57	3	fprintf ( stderr , "Usage xtiff: [options] tiff-file\n" ) ;
EXPR	1268:4	1268:4	4	fprintf ( stderr , "Usage xtiff: [options] tiff-file\n" )
FUNCTION_CALL	1268:4	1268:56	5	fprintf ( stderr , "Usage xtiff: [options] tiff-file\n" )
CALLEE	1268:4	1268:4	6	fprintf
LEAF_NODE	1268:4	1268:4	7	fprintf
LEAF_NODE	1268:11	1268:11	6	(
ARGUMENT	1268:12	1268:12	6	stderr
FIELD	1268:12	1268:12	7	stderr
LEAF_NODE	1268:12	1268:12	8	stderr
LEAF_NODE	1268:18	1268:18	6	,
ARGUMENT	1268:20	1268:20	6	"Usage xtiff: [options] tiff-file\n"
FIELD	1268:20	1268:20	7	"Usage xtiff: [options] tiff-file\n"
LEAF_NODE	1268:20	1268:20	8	"Usage xtiff: [options] tiff-file\n"
LEAF_NODE	1268:56	1268:56	6	)
LEAF_NODE	1268:57	1268:57	4	;
EXPR_STATEMENT	1269:4	1269:46	3	fprintf ( stderr , "\tstandard Xt options\n" ) ;
EXPR	1269:4	1269:4	4	fprintf ( stderr , "\tstandard Xt options\n" )
FUNCTION_CALL	1269:4	1269:45	5	fprintf ( stderr , "\tstandard Xt options\n" )
CALLEE	1269:4	1269:4	6	fprintf
LEAF_NODE	1269:4	1269:4	7	fprintf
LEAF_NODE	1269:11	1269:11	6	(
ARGUMENT	1269:12	1269:12	6	stderr
FIELD	1269:12	1269:12	7	stderr
LEAF_NODE	1269:12	1269:12	8	stderr
LEAF_NODE	1269:18	1269:18	6	,
ARGUMENT	1269:20	1269:20	6	"\tstandard Xt options\n"
FIELD	1269:20	1269:20	7	"\tstandard Xt options\n"
LEAF_NODE	1269:20	1269:20	8	"\tstandard Xt options\n"
LEAF_NODE	1269:45	1269:45	6	)
LEAF_NODE	1269:46	1269:46	4	;
EXPR_STATEMENT	1270:4	1270:34	3	fprintf ( stderr , "\t[-help]\n" ) ;
EXPR	1270:4	1270:4	4	fprintf ( stderr , "\t[-help]\n" )
FUNCTION_CALL	1270:4	1270:33	5	fprintf ( stderr , "\t[-help]\n" )
CALLEE	1270:4	1270:4	6	fprintf
LEAF_NODE	1270:4	1270:4	7	fprintf
LEAF_NODE	1270:11	1270:11	6	(
ARGUMENT	1270:12	1270:12	6	stderr
FIELD	1270:12	1270:12	7	stderr
LEAF_NODE	1270:12	1270:12	8	stderr
LEAF_NODE	1270:18	1270:18	6	,
ARGUMENT	1270:20	1270:20	6	"\t[-help]\n"
FIELD	1270:20	1270:20	7	"\t[-help]\n"
LEAF_NODE	1270:20	1270:20	8	"\t[-help]\n"
LEAF_NODE	1270:33	1270:33	6	)
LEAF_NODE	1270:34	1270:34	4	;
EXPR_STATEMENT	1271:4	1271:41	3	fprintf ( stderr , "\t[-gamma gamma]\n" ) ;
EXPR	1271:4	1271:4	4	fprintf ( stderr , "\t[-gamma gamma]\n" )
FUNCTION_CALL	1271:4	1271:40	5	fprintf ( stderr , "\t[-gamma gamma]\n" )
CALLEE	1271:4	1271:4	6	fprintf
LEAF_NODE	1271:4	1271:4	7	fprintf
LEAF_NODE	1271:11	1271:11	6	(
ARGUMENT	1271:12	1271:12	6	stderr
FIELD	1271:12	1271:12	7	stderr
LEAF_NODE	1271:12	1271:12	8	stderr
LEAF_NODE	1271:18	1271:18	6	,
ARGUMENT	1271:20	1271:20	6	"\t[-gamma gamma]\n"
FIELD	1271:20	1271:20	7	"\t[-gamma gamma]\n"
LEAF_NODE	1271:20	1271:20	8	"\t[-gamma gamma]\n"
LEAF_NODE	1271:40	1271:40	6	)
LEAF_NODE	1271:41	1271:41	4	;
EXPR_STATEMENT	1272:4	1272:54	3	fprintf ( stderr , "\t[-usePixmap (True | False)]\n" ) ;
EXPR	1272:4	1272:4	4	fprintf ( stderr , "\t[-usePixmap (True | False)]\n" )
FUNCTION_CALL	1272:4	1272:53	5	fprintf ( stderr , "\t[-usePixmap (True | False)]\n" )
CALLEE	1272:4	1272:4	6	fprintf
LEAF_NODE	1272:4	1272:4	7	fprintf
LEAF_NODE	1272:11	1272:11	6	(
ARGUMENT	1272:12	1272:12	6	stderr
FIELD	1272:12	1272:12	7	stderr
LEAF_NODE	1272:12	1272:12	8	stderr
LEAF_NODE	1272:18	1272:18	6	,
ARGUMENT	1272:20	1272:20	6	"\t[-usePixmap (True | False)]\n"
FIELD	1272:20	1272:20	7	"\t[-usePixmap (True | False)]\n"
LEAF_NODE	1272:20	1272:20	8	"\t[-usePixmap (True | False)]\n"
LEAF_NODE	1272:53	1272:53	6	)
LEAF_NODE	1272:54	1272:54	4	;
EXPR_STATEMENT	1273:4	1273:50	3	fprintf ( stderr , "\t[-viewportWidth pixels]\n" ) ;
EXPR	1273:4	1273:4	4	fprintf ( stderr , "\t[-viewportWidth pixels]\n" )
FUNCTION_CALL	1273:4	1273:49	5	fprintf ( stderr , "\t[-viewportWidth pixels]\n" )
CALLEE	1273:4	1273:4	6	fprintf
LEAF_NODE	1273:4	1273:4	7	fprintf
LEAF_NODE	1273:11	1273:11	6	(
ARGUMENT	1273:12	1273:12	6	stderr
FIELD	1273:12	1273:12	7	stderr
LEAF_NODE	1273:12	1273:12	8	stderr
LEAF_NODE	1273:18	1273:18	6	,
ARGUMENT	1273:20	1273:20	6	"\t[-viewportWidth pixels]\n"
FIELD	1273:20	1273:20	7	"\t[-viewportWidth pixels]\n"
LEAF_NODE	1273:20	1273:20	8	"\t[-viewportWidth pixels]\n"
LEAF_NODE	1273:49	1273:49	6	)
LEAF_NODE	1273:50	1273:50	4	;
EXPR_STATEMENT	1274:4	1274:51	3	fprintf ( stderr , "\t[-viewportHeight pixels]\n" ) ;
EXPR	1274:4	1274:4	4	fprintf ( stderr , "\t[-viewportHeight pixels]\n" )
FUNCTION_CALL	1274:4	1274:50	5	fprintf ( stderr , "\t[-viewportHeight pixels]\n" )
CALLEE	1274:4	1274:4	6	fprintf
LEAF_NODE	1274:4	1274:4	7	fprintf
LEAF_NODE	1274:11	1274:11	6	(
ARGUMENT	1274:12	1274:12	6	stderr
FIELD	1274:12	1274:12	7	stderr
LEAF_NODE	1274:12	1274:12	8	stderr
LEAF_NODE	1274:18	1274:18	6	,
ARGUMENT	1274:20	1274:20	6	"\t[-viewportHeight pixels]\n"
FIELD	1274:20	1274:20	7	"\t[-viewportHeight pixels]\n"
LEAF_NODE	1274:20	1274:20	8	"\t[-viewportHeight pixels]\n"
LEAF_NODE	1274:50	1274:50	6	)
LEAF_NODE	1274:51	1274:51	4	;
EXPR_STATEMENT	1275:4	1275:46	3	fprintf ( stderr , "\t[-translate pixels]\n" ) ;
EXPR	1275:4	1275:4	4	fprintf ( stderr , "\t[-translate pixels]\n" )
FUNCTION_CALL	1275:4	1275:45	5	fprintf ( stderr , "\t[-translate pixels]\n" )
CALLEE	1275:4	1275:4	6	fprintf
LEAF_NODE	1275:4	1275:4	7	fprintf
LEAF_NODE	1275:11	1275:11	6	(
ARGUMENT	1275:12	1275:12	6	stderr
FIELD	1275:12	1275:12	7	stderr
LEAF_NODE	1275:12	1275:12	8	stderr
LEAF_NODE	1275:18	1275:18	6	,
ARGUMENT	1275:20	1275:20	6	"\t[-translate pixels]\n"
FIELD	1275:20	1275:20	7	"\t[-translate pixels]\n"
LEAF_NODE	1275:20	1275:20	8	"\t[-translate pixels]\n"
LEAF_NODE	1275:45	1275:45	6	)
LEAF_NODE	1275:46	1275:46	4	;
EXPR_STATEMENT	1276:4	1276:52	3	fprintf ( stderr , "\t[-verbose (True | False)]\n" ) ;
EXPR	1276:4	1276:4	4	fprintf ( stderr , "\t[-verbose (True | False)]\n" )
FUNCTION_CALL	1276:4	1276:51	5	fprintf ( stderr , "\t[-verbose (True | False)]\n" )
CALLEE	1276:4	1276:4	6	fprintf
LEAF_NODE	1276:4	1276:4	7	fprintf
LEAF_NODE	1276:11	1276:11	6	(
ARGUMENT	1276:12	1276:12	6	stderr
FIELD	1276:12	1276:12	7	stderr
LEAF_NODE	1276:12	1276:12	8	stderr
LEAF_NODE	1276:18	1276:18	6	,
ARGUMENT	1276:20	1276:20	6	"\t[-verbose (True | False)]\n"
FIELD	1276:20	1276:20	7	"\t[-verbose (True | False)]\n"
LEAF_NODE	1276:20	1276:20	8	"\t[-verbose (True | False)]\n"
LEAF_NODE	1276:51	1276:51	6	)
LEAF_NODE	1276:52	1276:52	4	;
EXPR_STATEMENT	1277:4	1277:11	3	exit ( 0 ) ;
EXPR	1277:4	1277:4	4	exit ( 0 )
FUNCTION_CALL	1277:4	1277:10	5	exit ( 0 )
CALLEE	1277:4	1277:4	6	exit
LEAF_NODE	1277:4	1277:4	7	exit
LEAF_NODE	1277:8	1277:8	6	(
ARGUMENT	1277:9	1277:9	6	0
FIELD	1277:9	1277:9	7	0
LEAF_NODE	1277:9	1277:9	8	0
LEAF_NODE	1277:10	1277:10	6	)
LEAF_NODE	1277:11	1277:11	4	;
LEAF_NODE	1278:0	1278:0	2	}
