SOURCE_FILE	3	0	
FUNCTION_DEF	3	1	
RETURN_TYPE	3	2	int
TYPE_NAME	3	3	int
LEAF_NODE	3	4	int
FUNCTION_NAME	3	2	main
LEAF_NODE	3	3	main
PARAMETER_LIST	3	2	( )
LEAF_NODE	3	3	(
LEAF_NODE	3	3	)
LEAF_NODE	4	2	{
STATEMENTS	6	2	
SIMPLE_DECL	6	3	int x ; x = 2 , int y ; y = 3 , int z ; z = 4 ;
INIT_DECL_LIST	6	4	int x ; x = 2 , int y ; y = 3 , int z ; z = 4
VAR_DECL	6	5	int x ; x = 2
TYPE	6	6	int
TYPE_NAME	6	7	int
LEAF_NODE	6	8	int
NAME	6	6	x
LEAF_NODE	6	7	x
LEAF_NODE	0	6	;
INIT	6	6	x = 2
ASSIGN	6	7	x = 2
LVAL	6	8	x
NAME	6	9	x
LEAF_NODE	6	10	x
ASSIGN_OP	6	8	=
LEAF_NODE	6	9	=
RVAL	6	8	2
FIELD	6	9	2
LEAF_NODE	6	10	2
LEAF_NODE	6	5	,
INIT_DECL_LIST	6	5	int y ; y = 3 , int z ; z = 4
VAR_DECL	6	6	int y ; y = 3
TYPE	6	7	int
TYPE_NAME	6	8	int
LEAF_NODE	6	9	int
NAME	6	7	y
LEAF_NODE	6	8	y
LEAF_NODE	0	7	;
INIT	6	7	y = 3
ASSIGN	6	8	y = 3
LVAL	6	9	y
NAME	6	10	y
LEAF_NODE	6	11	y
ASSIGN_OP	6	9	=
LEAF_NODE	6	10	=
RVAL	6	9	3
FIELD	6	10	3
LEAF_NODE	6	11	3
LEAF_NODE	6	6	,
VAR_DECL	6	6	int z ; z = 4
TYPE	6	7	int
TYPE_NAME	6	8	int
LEAF_NODE	6	9	int
NAME	6	7	z
LEAF_NODE	6	8	z
LEAF_NODE	0	7	;
INIT	6	7	z = 4
ASSIGN	6	8	z = 4
LVAL	6	9	z
NAME	6	10	z
LEAF_NODE	6	11	z
ASSIGN_OP	6	9	=
LEAF_NODE	6	10	=
RVAL	6	9	4
FIELD	6	10	4
LEAF_NODE	6	11	4
LEAF_NODE	6	4	;
EXPR_STATEMENT	8	3	x = x + x ;
EXPR	8	4	x = x + x
ASSIGN	8	5	x = x + x
LVAL	8	6	x
FIELD	8	7	x
LEAF_NODE	8	8	x
ASSIGN_OP	8	6	=
LEAF_NODE	8	7	=
RVAL	8	6	x + x
FIELD	8	7	x
LEAF_NODE	8	8	x
LEAF_NODE	8	7	+
FIELD	8	7	x
LEAF_NODE	8	8	x
LEAF_NODE	8	4	;
EXPR_STATEMENT	9	3	printf ( "%d" , x ) ;
EXPR	9	4	printf ( "%d" , x )
FUNCTION_CALL	9	5	printf ( "%d" , x )
CALLEE	9	6	printf
LEAF_NODE	9	7	printf
LEAF_NODE	9	6	(
ARGUMENT	9	6	"%d"
FIELD	9	7	"%d"
LEAF_NODE	9	8	"%d"
LEAF_NODE	9	6	,
ARGUMENT	9	6	x
FIELD	9	7	x
LEAF_NODE	9	8	x
LEAF_NODE	9	6	)
LEAF_NODE	9	4	;
JUMP_STATEMENT	11	3	return 0 ;
KEYWORD	11	4	return
LEAF_NODE	11	5	return
DESTINATION	11	4	0
EXPR	11	5	0
FIELD	11	6	0
LEAF_NODE	11	7	0
LEAF_NODE	11	4	;
LEAF_NODE	12	2	}
