SOURCE_FILE	1	0	int main ( ) { int x ; x = 22 , int y ; y = 44 ; if ( x == 23 ) { x = 2 ; } else { y = 314 ; } while ( x < 21 ) { printf ( "value of x: %d\n" , x ) ; x ++ ; } x = x + x ; printf ( "%d" , x ) ; return 0 ; }
FUNCTION_DEF	1	1	int main ( ) { int x ; x = 22 , int y ; y = 44 ; if ( x == 23 ) { x = 2 ; } else { y = 314 ; } while ( x < 21 ) { printf ( "value of x: %d\n" , x ) ; x ++ ; } x = x + x ; printf ( "%d" , x ) ; return 0 ; }
RETURN_TYPE	1	2	int
TYPE_NAME	1	3	int
LEAF_NODE	1	4	int
FUNCTION_NAME	1	2	main
LEAF_NODE	1	3	main
PARAMETER_LIST	1	2	( )
LEAF_NODE	1	3	(
LEAF_NODE	1	3	)
LEAF_NODE	1	2	{
STATEMENTS	3	2	int x ; x = 22 , int y ; y = 44 ; if ( x == 23 ) { x = 2 ; } else { y = 314 ; } while ( x < 21 ) { printf ( "value of x: %d\n" , x ) ; x ++ ; } x = x + x ; printf ( "%d" , x ) ; return 0 ;
SIMPLE_DECL	3	3	int x ; x = 22 , int y ; y = 44 ;
INIT_DECL_LIST	3	4	int x ; x = 22 , int y ; y = 44
VAR_DECL	3	5	int x ; x = 22
TYPE	3	6	int
TYPE_NAME	3	7	int
LEAF_NODE	3	8	int
NAME	3	6	x
LEAF_NODE	3	7	x
LEAF_NODE	0	6	;
INIT	3	6	x = 22
ASSIGN	3	7	x = 22
LVAL	3	8	x
NAME	3	9	x
LEAF_NODE	3	10	x
ASSIGN_OP	3	8	=
LEAF_NODE	3	9	=
RVAL	3	8	22
FIELD	3	9	22
LEAF_NODE	3	10	22
LEAF_NODE	3	5	,
VAR_DECL	3	5	int y ; y = 44
TYPE	3	6	int
TYPE_NAME	3	7	int
LEAF_NODE	3	8	int
NAME	3	6	y
LEAF_NODE	3	7	y
LEAF_NODE	0	6	;
INIT	3	6	y = 44
ASSIGN	3	7	y = 44
LVAL	3	8	y
NAME	3	9	y
LEAF_NODE	3	10	y
ASSIGN_OP	3	8	=
LEAF_NODE	3	9	=
RVAL	3	8	44
FIELD	3	9	44
LEAF_NODE	3	10	44
LEAF_NODE	3	4	;
SELECTION	5	3	if ( x == 23 ) { x = 2 ; }
KEYWORD	5	4	if
LEAF_NODE	5	5	if
LEAF_NODE	5	4	(
CONDITION	5	4	x == 23
EXPR	5	5	x == 23
FIELD	5	6	x
LEAF_NODE	5	7	x
EQ_OPERATOR	5	6	==
LEAF_NODE	5	7	==
FIELD	5	6	23
LEAF_NODE	5	7	23
LEAF_NODE	5	4	)
STATEMENTS	5	4	{ x = 2 ; }
LEAF_NODE	5	5	{
STATEMENTS	6	5	x = 2 ;
EXPR_STATEMENT	6	6	x = 2 ;
EXPR	6	7	x = 2
ASSIGN	6	8	x = 2
LVAL	6	9	x
FIELD	6	10	x
LEAF_NODE	6	11	x
ASSIGN_OP	6	9	=
LEAF_NODE	6	10	=
RVAL	6	9	2
FIELD	6	10	2
LEAF_NODE	6	11	2
LEAF_NODE	6	7	;
LEAF_NODE	7	5	}
SELECTION	7	3	else { y = 314 ; }
KEYWORD	7	4	else
LEAF_NODE	7	5	else
STATEMENTS	7	4	{ y = 314 ; }
LEAF_NODE	7	5	{
STATEMENTS	8	5	y = 314 ;
EXPR_STATEMENT	8	6	y = 314 ;
EXPR	8	7	y = 314
ASSIGN	8	8	y = 314
LVAL	8	9	y
FIELD	8	10	y
LEAF_NODE	8	11	y
ASSIGN_OP	8	9	=
LEAF_NODE	8	10	=
RVAL	8	9	314
FIELD	8	10	314
LEAF_NODE	8	11	314
LEAF_NODE	8	7	;
LEAF_NODE	9	5	}
ITERATION	12	3	while ( x < 21 ) { printf ( "value of x: %d\n" , x ) ; x ++ ; }
KEYWORD	12	4	while
LEAF_NODE	12	5	while
LEAF_NODE	12	4	(
CONDITION	12	4	x < 21
EXPR	12	5	x < 21
FIELD	12	6	x
LEAF_NODE	12	7	x
REL_OPERATOR	12	6	<
LEAF_NODE	12	7	<
FIELD	12	6	21
LEAF_NODE	12	7	21
LEAF_NODE	12	4	)
STATEMENTS	12	4	{ printf ( "value of x: %d\n" , x ) ; x ++ ; }
LEAF_NODE	12	5	{
STATEMENTS	13	5	printf ( "value of x: %d\n" , x ) ; x ++ ;
EXPR_STATEMENT	13	6	printf ( "value of x: %d\n" , x ) ;
EXPR	13	7	printf ( "value of x: %d\n" , x )
FUNCTION_CALL	13	8	printf ( "value of x: %d\n" , x )
CALLEE	13	9	printf
LEAF_NODE	13	10	printf
LEAF_NODE	13	9	(
ARGUMENT	13	9	"value of x: %d\n"
FIELD	13	10	"value of x: %d\n"
LEAF_NODE	13	11	"value of x: %d\n"
LEAF_NODE	13	9	,
ARGUMENT	13	9	x
FIELD	13	10	x
LEAF_NODE	13	11	x
LEAF_NODE	13	9	)
LEAF_NODE	13	7	;
EXPR_STATEMENT	14	6	x ++ ;
EXPR	14	7	x ++
FIELD	14	8	x ++
LEAF_NODE	14	9	x
LEAF_NODE	14	9	++
LEAF_NODE	14	7	;
LEAF_NODE	15	5	}
EXPR_STATEMENT	18	3	x = x + x ;
EXPR	18	4	x = x + x
ASSIGN	18	5	x = x + x
LVAL	18	6	x
FIELD	18	7	x
LEAF_NODE	18	8	x
ASSIGN_OP	18	6	=
LEAF_NODE	18	7	=
RVAL	18	6	x + x
FIELD	18	7	x
LEAF_NODE	18	8	x
LEAF_NODE	18	7	+
FIELD	18	7	x
LEAF_NODE	18	8	x
LEAF_NODE	18	4	;
EXPR_STATEMENT	19	3	printf ( "%d" , x ) ;
EXPR	19	4	printf ( "%d" , x )
FUNCTION_CALL	19	5	printf ( "%d" , x )
CALLEE	19	6	printf
LEAF_NODE	19	7	printf
LEAF_NODE	19	6	(
ARGUMENT	19	6	"%d"
FIELD	19	7	"%d"
LEAF_NODE	19	8	"%d"
LEAF_NODE	19	6	,
ARGUMENT	19	6	x
FIELD	19	7	x
LEAF_NODE	19	8	x
LEAF_NODE	19	6	)
LEAF_NODE	19	4	;
JUMP_STATEMENT	21	3	return 0 ;
KEYWORD	21	4	return
LEAF_NODE	21	5	return
DESTINATION	21	4	0
EXPR	21	5	0
FIELD	21	6	0
LEAF_NODE	21	7	0
LEAF_NODE	21	4	;
LEAF_NODE	22	2	}
