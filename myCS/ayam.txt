SOURCE_FILE	4	0	
FUNCTION_DEF	4	1	
RETURN_TYPE	4	2	int
TYPE_NAME	4	3	int
LEAF_NODE	4	4	int
FUNCTION_NAME	4	2	main
LEAF_NODE	4	3	main
PARAMETER_LIST	4	2	( )
LEAF_NODE	4	3	(
LEAF_NODE	4	3	)
LEAF_NODE	4	2	{
STATEMENTS	6	2	
SIMPLE_DECL	6	3	int x ; x = 22 ;
VAR_DECL	6	4	int x ; x = 22
TYPE	6	5	int
TYPE_NAME	6	6	int
LEAF_NODE	6	7	int
NAME	6	5	x
LEAF_NODE	6	6	x
LEAF_NODE	0	5	;
INIT	6	5	x = 22
ASSIGN	6	6	x = 22
LVAL	6	7	x
NAME	6	8	x
LEAF_NODE	6	9	x
ASSIGN_OP	6	7	=
LEAF_NODE	6	8	=
RVAL	6	7	22
FIELD	6	8	22
LEAF_NODE	6	9	22
LEAF_NODE	6	4	;
EXPR_STATEMENT	8	3	x = x + x ;
EXPR	8	4	x = x + x
ASSIGN	8	5	x = x + x
LVAL	8	6	x
FIELD	8	7	x
LEAF_NODE	8	8	x
ASSIGN_OP	8	6	=
LEAF_NODE	8	7	=
RVAL	8	6	x + x
FIELD	8	7	x
LEAF_NODE	8	8	x
LEAF_NODE	8	7	+
FIELD	8	7	x
LEAF_NODE	8	8	x
LEAF_NODE	8	4	;
EXPR_STATEMENT	9	3	printf ( "%d" , x ) ;
EXPR	9	4	printf ( "%d" , x )
FUNCTION_CALL	9	5	printf ( "%d" , x )
CALLEE	9	6	printf
LEAF_NODE	9	7	printf
LEAF_NODE	9	6	(
ARGUMENT	9	6	"%d"
FIELD	9	7	"%d"
LEAF_NODE	9	8	"%d"
LEAF_NODE	9	6	,
ARGUMENT	9	6	x
FIELD	9	7	x
LEAF_NODE	9	8	x
LEAF_NODE	9	6	)
LEAF_NODE	9	4	;
JUMP_STATEMENT	11	3	return 0 ;
KEYWORD	11	4	return
LEAF_NODE	11	5	return
DESTINATION	11	4	0
EXPR	11	5	0
FIELD	11	6	0
LEAF_NODE	11	7	0
LEAF_NODE	11	4	;
LEAF_NODE	12	2	}
